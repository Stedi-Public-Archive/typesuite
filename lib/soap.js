"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.sendSoapRequest = exports.deserializeSoapResponse = exports.serializeSoapRequest = void 0;
const crypto_1 = require("crypto");
const axios_1 = __importDefault(require("axios"));
const http_1 = __importDefault(require("axios/lib/adapters/http"));
const jsonix_1 = require("jsonix");
const platform_core_1 = require("./netsuite_webservices/2019_2/platform_core");
const mappings_1 = __importDefault(require("./netsuite_webservices/2019_2/mappings"));
const mappings_2 = __importDefault(require("./xmlsoap/mappings"));
const envelope_1 = require("./xmlsoap/envelope");
const com_netsuite_webservices_platform_messages_2019_2_1 = require("./netsuite_webservices/2019_2/__mappings/com_netsuite_webservices_platform_messages_2019_2");
const platform_messages_1 = require("./netsuite_webservices/2019_2/platform_messages");
const ALL_MAPPINGS = [...mappings_2.default, ...mappings_1.default];
const JSONIX_CONTEXT_OPTIONS = {
    namespacePrefixes: {
        "http://www.w3.org/2001/XMLSchema-instance": "xsi",
        "http://schemas.xmlsoap.org/soap/envelope/": "soap",
        "urn:common_2019_2.platform.webservices.netsuite.com": "platform_common",
        "urn:core_2019_2.platform.webservices.netsuite.com": "platform_core",
        "urn:messages_2019_2.platform.webservices.netsuite.com": "platform_messages",
    },
};
function elementKeyFor(object) {
    var _a;
    const elementName = (_a = com_netsuite_webservices_platform_messages_2019_2_1.com_netsuite_webservices_platform_messages_2019_2.elementInfos.find((elementInfo) => {
        const typeInfo = elementInfo.typeInfo.split(".").slice(-1)[0];
        return typeInfo === object.constructor.name;
    })) === null || _a === void 0 ? void 0 : _a.elementName;
    return `platform_messages:${
    // eslint-disable-next-line @typescript-eslint/restrict-template-expressions
    elementName !== null && elementName !== void 0 ? elementName : "<<" + object.constructor.name + ">>"}`;
}
function serializeSoapRequest(passport, body, preferences) {
    const passportElement = { name: elementKeyFor(passport), value: passport };
    const headerElements = [passportElement];
    if (preferences) {
        const prefs = new platform_messages_1.Preferences(preferences);
        headerElements.push({
            name: elementKeyFor(prefs),
            value: prefs,
        });
    }
    const bodyElement = { name: elementKeyFor(body), value: body };
    const envelope = new envelope_1.Envelope({
        header: new envelope_1.Header({ any: headerElements }),
        body: new envelope_1.Body({ any: [bodyElement] }),
    });
    const data = { "soap:Envelope": envelope };
    const context = new jsonix_1.Jsonix.Context(ALL_MAPPINGS, JSONIX_CONTEXT_OPTIONS);
    const xmlString = context.createMarshaller().marshalString(data);
    return '<?xml version="1.0" encoding="utf-8"?>' + xmlString;
}
exports.serializeSoapRequest = serializeSoapRequest;
function deserializeSoapResponse(xmlContent) {
    const context = new jsonix_1.Jsonix.Context(ALL_MAPPINGS);
    return context.createUnmarshaller().unmarshalString(xmlContent);
}
exports.deserializeSoapResponse = deserializeSoapResponse;
function endpoint(config) {
    const account = config.account.replace("_", "-");
    return `https://${account}.suitetalk.api.netsuite.com/services/NetSuitePort_${config.apiVersion}`;
}
/**
 * Serializes the provided request into XML and sends a SOAP request to the configured
 * endpoint. For successful responses, returns the data extracted the envelope and cast
 * into the type specified by the generic type parameter R.
 *
 * If the SOAP request results in a failed response, returns the SOAP Fault within
 * the envelope as a rejected promise.
 *
 * @param config
 * @param request
 * @param soapAction
 */
async function sendSoapRequest(config, request, soapAction) {
    const authToken = authenticateRequestWithTokenPassport(config);
    const soapXML = serializeSoapRequest(authToken, request, config.preferences);
    try {
        const response = await axios_1.default.post(endpoint(config), soapXML, {
            headers: {
                SOAPAction: soapAction,
                contentType: "text/xml; charset=UTF-8",
            },
            // We are using this library in Node, this works well for Jest and Production.
            adapter: http_1.default,
        });
        const soapEnvelope = deserializeSoapResponse(response.data);
        return soapEnvelope.value.body.any[0].value;
    }
    catch (error) {
        if (error.response) {
            // Non 20x response
            const soapEnvelope = deserializeSoapResponse(error.response.data);
            const fault = soapEnvelope.value.body.any[0].value;
            return Promise.reject(fault);
        }
        else {
            // Network error.
            throw error;
        }
    }
}
exports.sendSoapRequest = sendSoapRequest;
function authenticateRequestWithTokenPassport(config) {
    const nonce = crypto_1.randomBytes(18).toString("hex");
    const timeStamp = Math.round(new Date().getTime() / 1000);
    const baseString = [
        config.account,
        config.token.consumerKey,
        config.token.tokenKey,
        nonce,
        timeStamp,
    ].join("&");
    const base64hash = crypto_1.createHmac("sha256", `${config.token.consumerSecret}&${config.token.tokenSecret}`)
        .update(baseString)
        .digest("base64");
    return new platform_core_1.TokenPassport({
        account: config.account,
        consumerKey: config.token.consumerKey,
        nonce: nonce,
        timestamp: timeStamp,
        token: config.token.tokenKey,
        signature: {
            algorithm: "HMAC_SHA256",
            value: base64hash,
        },
    });
}
//# sourceMappingURL=data:application/json;base64,