import * as PlatformCore from "./platform_core";
import * as PlatformCommon from "./platform_common";
import * as TransactionsSalesTypes from "./transactions_sales_types";
import * as PlatformCommonTypes from "./platform_common_types";
import { SoapMappingBase } from "../../soap-types";
export declare type OpportunityCompetitorsListProps = {
    competitors?: OpportunityCompetitors[];
    replaceAll?: boolean;
};
export declare class OpportunityCompetitorsList extends SoapMappingBase {
    competitors?: OpportunityCompetitors[];
    replaceAll?: boolean;
    constructor(props: OpportunityCompetitorsListProps);
}
export declare type OpportunityPartnersListProps = {
    partners?: PlatformCommon.Partners[];
    replaceAll?: boolean;
};
export declare class OpportunityPartnersList extends SoapMappingBase {
    partners?: PlatformCommon.Partners[];
    replaceAll?: boolean;
    constructor(props: OpportunityPartnersListProps);
}
export declare type SalesOrderItemListProps = {
    item?: SalesOrderItem[];
    replaceAll?: boolean;
};
export declare class SalesOrderItemList extends SoapMappingBase {
    item?: SalesOrderItem[];
    replaceAll?: boolean;
    constructor(props: SalesOrderItemListProps);
}
export declare type UsageProps = {
    customForm?: PlatformCore.RecordRef;
    memo?: string;
    item?: PlatformCore.RecordRef;
    subscriptionPlan?: PlatformCore.RecordRef;
    customer?: PlatformCore.RecordRef;
    usageSubscription?: PlatformCore.RecordRef;
    usageSubscriptionLine?: PlatformCore.RecordRef;
    usageQuantity?: number;
    usageDate?: string;
    internalId?: string;
    externalId?: string;
} & PlatformCore.RecordProps;
export declare class Usage extends PlatformCore.Record {
    customForm?: PlatformCore.RecordRef;
    memo?: string;
    item?: PlatformCore.RecordRef;
    subscriptionPlan?: PlatformCore.RecordRef;
    customer?: PlatformCore.RecordRef;
    usageSubscription?: PlatformCore.RecordRef;
    usageSubscriptionLine?: PlatformCore.RecordRef;
    usageQuantity?: number;
    usageDate?: string;
    internalId?: string;
    externalId?: string;
    constructor(props: UsageProps);
}
export declare type UsageSearchRowProps = {
    basic?: PlatformCommon.UsageSearchRowBasic;
    chargeJoin?: PlatformCommon.ChargeSearchRowBasic;
    customerJoin?: PlatformCommon.CustomerSearchRowBasic;
    itemJoin?: PlatformCommon.ItemSearchRowBasic;
    subscriptionPlanJoin?: PlatformCommon.ItemSearchRowBasic;
};
export declare class UsageSearchRow extends PlatformCore.SearchRow {
    basic?: PlatformCommon.UsageSearchRowBasic;
    chargeJoin?: PlatformCommon.ChargeSearchRowBasic;
    customerJoin?: PlatformCommon.CustomerSearchRowBasic;
    itemJoin?: PlatformCommon.ItemSearchRowBasic;
    subscriptionPlanJoin?: PlatformCommon.ItemSearchRowBasic;
    constructor(props: UsageSearchRowProps);
}
export declare type ItemFulfillmentItemProps = {
    jobName?: string;
    itemReceive?: boolean;
    itemName?: string;
    description?: string;
    department?: PlatformCore.RecordRef;
    clazz?: PlatformCore.RecordRef;
    location?: PlatformCore.RecordRef;
    onHand?: number;
    quantity?: number;
    unitsDisplay?: string;
    createPo?: string;
    inventoryDetail?: PlatformCommon.InventoryDetail;
    binNumbers?: string;
    serialNumbers?: string;
    poNum?: string;
    item?: PlatformCore.RecordRef;
    orderLine?: number;
    quantityRemaining?: number;
    options?: PlatformCore.CustomFieldList;
    shipGroup?: number;
    itemIsFulfilled?: boolean;
    shipAddress?: PlatformCore.RecordRef;
    shipMethod?: PlatformCore.RecordRef;
    customFieldList?: PlatformCore.CustomFieldList;
};
export declare class ItemFulfillmentItem extends SoapMappingBase {
    jobName?: string;
    itemReceive?: boolean;
    itemName?: string;
    description?: string;
    department?: PlatformCore.RecordRef;
    clazz?: PlatformCore.RecordRef;
    location?: PlatformCore.RecordRef;
    onHand?: number;
    quantity?: number;
    unitsDisplay?: string;
    createPo?: string;
    inventoryDetail?: PlatformCommon.InventoryDetail;
    binNumbers?: string;
    serialNumbers?: string;
    poNum?: string;
    item?: PlatformCore.RecordRef;
    orderLine?: number;
    quantityRemaining?: number;
    options?: PlatformCore.CustomFieldList;
    shipGroup?: number;
    itemIsFulfilled?: boolean;
    shipAddress?: PlatformCore.RecordRef;
    shipMethod?: PlatformCore.RecordRef;
    customFieldList?: PlatformCore.CustomFieldList;
    constructor(props: ItemFulfillmentItemProps);
}
export declare type ItemFulfillmentPackageProps = {
    packageWeight?: number;
    packageDescr?: string;
    packageTrackingNumber?: string;
};
export declare class ItemFulfillmentPackage extends SoapMappingBase {
    packageWeight?: number;
    packageDescr?: string;
    packageTrackingNumber?: string;
    constructor(props: ItemFulfillmentPackageProps);
}
export declare type OpportunitySearchProps = {
    basic?: PlatformCommon.OpportunitySearchBasic;
    actualJoin?: PlatformCommon.TransactionSearchBasic;
    callJoin?: PlatformCommon.PhoneCallSearchBasic;
    customerJoin?: PlatformCommon.CustomerSearchBasic;
    decisionMakerJoin?: PlatformCommon.ContactSearchBasic;
    estimateJoin?: PlatformCommon.TransactionSearchBasic;
    eventJoin?: PlatformCommon.CalendarEventSearchBasic;
    fileJoin?: PlatformCommon.FileSearchBasic;
    itemJoin?: PlatformCommon.ItemSearchBasic;
    leadSourceJoin?: PlatformCommon.CampaignSearchBasic;
    messagesJoin?: PlatformCommon.MessageSearchBasic;
    orderJoin?: PlatformCommon.TransactionSearchBasic;
    originatingLeadJoin?: PlatformCommon.OriginatingLeadSearchBasic;
    partnerJoin?: PlatformCommon.PartnerSearchBasic;
    salesRepJoin?: PlatformCommon.EmployeeSearchBasic;
    taskJoin?: PlatformCommon.TaskSearchBasic;
    userNotesJoin?: PlatformCommon.NoteSearchBasic;
    customSearchJoin?: PlatformCommon.CustomSearchJoin[];
};
export declare class OpportunitySearch extends PlatformCore.SearchRecord {
    basic?: PlatformCommon.OpportunitySearchBasic;
    actualJoin?: PlatformCommon.TransactionSearchBasic;
    callJoin?: PlatformCommon.PhoneCallSearchBasic;
    customerJoin?: PlatformCommon.CustomerSearchBasic;
    decisionMakerJoin?: PlatformCommon.ContactSearchBasic;
    estimateJoin?: PlatformCommon.TransactionSearchBasic;
    eventJoin?: PlatformCommon.CalendarEventSearchBasic;
    fileJoin?: PlatformCommon.FileSearchBasic;
    itemJoin?: PlatformCommon.ItemSearchBasic;
    leadSourceJoin?: PlatformCommon.CampaignSearchBasic;
    messagesJoin?: PlatformCommon.MessageSearchBasic;
    orderJoin?: PlatformCommon.TransactionSearchBasic;
    originatingLeadJoin?: PlatformCommon.OriginatingLeadSearchBasic;
    partnerJoin?: PlatformCommon.PartnerSearchBasic;
    salesRepJoin?: PlatformCommon.EmployeeSearchBasic;
    taskJoin?: PlatformCommon.TaskSearchBasic;
    userNotesJoin?: PlatformCommon.NoteSearchBasic;
    customSearchJoin?: PlatformCommon.CustomSearchJoin[];
    constructor(props: OpportunitySearchProps);
}
export declare type ItemFulfillmentItemListProps = {
    item?: ItemFulfillmentItem[];
    replaceAll?: boolean;
};
export declare class ItemFulfillmentItemList extends SoapMappingBase {
    item?: ItemFulfillmentItem[];
    replaceAll?: boolean;
    constructor(props: ItemFulfillmentItemListProps);
}
export declare type UsageSearchProps = {
    basic?: PlatformCommon.UsageSearchBasic;
    chargeJoin?: PlatformCommon.ChargeSearchBasic;
    customerJoin?: PlatformCommon.CustomerSearchBasic;
    itemJoin?: PlatformCommon.ItemSearchBasic;
    subscriptionPlanJoin?: PlatformCommon.ItemSearchBasic;
};
export declare class UsageSearch extends PlatformCore.SearchRecord {
    basic?: PlatformCommon.UsageSearchBasic;
    chargeJoin?: PlatformCommon.ChargeSearchBasic;
    customerJoin?: PlatformCommon.CustomerSearchBasic;
    itemJoin?: PlatformCommon.ItemSearchBasic;
    subscriptionPlanJoin?: PlatformCommon.ItemSearchBasic;
    constructor(props: UsageSearchProps);
}
export declare type CashSaleItemProps = {
    job?: PlatformCore.RecordRef;
    item?: PlatformCore.RecordRef;
    line?: number;
    quantityAvailable?: number;
    quantityOnHand?: number;
    quantityFulfilled?: number;
    quantity?: number;
    units?: PlatformCore.RecordRef;
    inventoryDetail?: PlatformCommon.InventoryDetail;
    serialNumbers?: string;
    binNumbers?: string;
    description?: string;
    price?: PlatformCore.RecordRef;
    rate?: string;
    amount?: number;
    orderLine?: number;
    licenseCode?: string;
    isTaxable?: boolean;
    options?: PlatformCore.CustomFieldList;
    deferRevRec?: boolean;
    currentPercent?: number;
    department?: PlatformCore.RecordRef;
    percentComplete?: number;
    clazz?: PlatformCore.RecordRef;
    location?: PlatformCore.RecordRef;
    revRecSchedule?: PlatformCore.RecordRef;
    revRecStartDate?: string;
    revRecEndDate?: string;
    subscriptionLine?: PlatformCore.RecordRef;
    grossAmt?: number;
    costEstimateType?: PlatformCommonTypes.ItemCostEstimateType;
    excludeFromRateRequest?: boolean;
    catchUpPeriod?: PlatformCore.RecordRef;
    costEstimate?: number;
    taxDetailsReference?: string;
    amountOrdered?: number;
    tax1Amt?: number;
    quantityOrdered?: number;
    quantityRemaining?: number;
    taxCode?: PlatformCore.RecordRef;
    taxRate1?: number;
    taxRate2?: number;
    giftCertFrom?: string;
    giftCertRecipientName?: string;
    giftCertRecipientEmail?: string;
    giftCertMessage?: string;
    taxAmount?: number;
    giftCertNumber?: string;
    shipGroup?: number;
    itemIsFulfilled?: boolean;
    shipAddress?: PlatformCore.RecordRef;
    shipMethod?: PlatformCore.RecordRef;
    vsoeSopGroup?: PlatformCommonTypes.VsoeSopGroup;
    vsoeIsEstimate?: boolean;
    vsoePrice?: number;
    vsoeAmount?: number;
    vsoeAllocation?: number;
    vsoeDeferral?: PlatformCommonTypes.VsoeDeferral;
    vsoePermitDiscount?: PlatformCommonTypes.VsoePermitDiscount;
    vsoeDelivered?: boolean;
    chargeType?: PlatformCore.RecordRef;
    chargesList?: PlatformCore.RecordRefList;
    customFieldList?: PlatformCore.CustomFieldList;
};
export declare class CashSaleItem extends SoapMappingBase {
    job?: PlatformCore.RecordRef;
    item?: PlatformCore.RecordRef;
    line?: number;
    quantityAvailable?: number;
    quantityOnHand?: number;
    quantityFulfilled?: number;
    quantity?: number;
    units?: PlatformCore.RecordRef;
    inventoryDetail?: PlatformCommon.InventoryDetail;
    serialNumbers?: string;
    binNumbers?: string;
    description?: string;
    price?: PlatformCore.RecordRef;
    rate?: string;
    amount?: number;
    orderLine?: number;
    licenseCode?: string;
    isTaxable?: boolean;
    options?: PlatformCore.CustomFieldList;
    deferRevRec?: boolean;
    currentPercent?: number;
    department?: PlatformCore.RecordRef;
    percentComplete?: number;
    clazz?: PlatformCore.RecordRef;
    location?: PlatformCore.RecordRef;
    revRecSchedule?: PlatformCore.RecordRef;
    revRecStartDate?: string;
    revRecEndDate?: string;
    subscriptionLine?: PlatformCore.RecordRef;
    grossAmt?: number;
    costEstimateType?: PlatformCommonTypes.ItemCostEstimateType;
    excludeFromRateRequest?: boolean;
    catchUpPeriod?: PlatformCore.RecordRef;
    costEstimate?: number;
    taxDetailsReference?: string;
    amountOrdered?: number;
    tax1Amt?: number;
    quantityOrdered?: number;
    quantityRemaining?: number;
    taxCode?: PlatformCore.RecordRef;
    taxRate1?: number;
    taxRate2?: number;
    giftCertFrom?: string;
    giftCertRecipientName?: string;
    giftCertRecipientEmail?: string;
    giftCertMessage?: string;
    taxAmount?: number;
    giftCertNumber?: string;
    shipGroup?: number;
    itemIsFulfilled?: boolean;
    shipAddress?: PlatformCore.RecordRef;
    shipMethod?: PlatformCore.RecordRef;
    vsoeSopGroup?: PlatformCommonTypes.VsoeSopGroup;
    vsoeIsEstimate?: boolean;
    vsoePrice?: number;
    vsoeAmount?: number;
    vsoeAllocation?: number;
    vsoeDeferral?: PlatformCommonTypes.VsoeDeferral;
    vsoePermitDiscount?: PlatformCommonTypes.VsoePermitDiscount;
    vsoeDelivered?: boolean;
    chargeType?: PlatformCore.RecordRef;
    chargesList?: PlatformCore.RecordRefList;
    customFieldList?: PlatformCore.CustomFieldList;
    constructor(props: CashSaleItemProps);
}
export declare type InvoiceTimeListProps = {
    time?: InvoiceTime[];
    replaceAll?: boolean;
};
export declare class InvoiceTimeList extends SoapMappingBase {
    time?: InvoiceTime[];
    replaceAll?: boolean;
    constructor(props: InvoiceTimeListProps);
}
export declare type TransactionSearchAdvancedProps = {
    criteria?: TransactionSearch;
    columns?: TransactionSearchRow;
    savedSearchId?: string;
    savedSearchScriptId?: string;
};
export declare class TransactionSearchAdvanced extends PlatformCore.SearchRecord {
    criteria?: TransactionSearch;
    columns?: TransactionSearchRow;
    savedSearchId?: string;
    savedSearchScriptId?: string;
    constructor(props: TransactionSearchAdvancedProps);
}
export declare type CashSaleExpCostListProps = {
    expCost?: CashSaleExpCost[];
    replaceAll?: boolean;
};
export declare class CashSaleExpCostList extends SoapMappingBase {
    expCost?: CashSaleExpCost[];
    replaceAll?: boolean;
    constructor(props: CashSaleExpCostListProps);
}
export declare type ItemFulfillmentPackageUpsListProps = {
    packageUps?: ItemFulfillmentPackageUps[];
    replaceAll?: boolean;
};
export declare class ItemFulfillmentPackageUpsList extends SoapMappingBase {
    packageUps?: ItemFulfillmentPackageUps[];
    replaceAll?: boolean;
    constructor(props: ItemFulfillmentPackageUpsListProps);
}
export declare type InvoiceItemCostListProps = {
    itemCost?: InvoiceItemCost[];
    replaceAll?: boolean;
};
export declare class InvoiceItemCostList extends SoapMappingBase {
    itemCost?: InvoiceItemCost[];
    replaceAll?: boolean;
    constructor(props: InvoiceItemCostListProps);
}
export declare type ItemFulfillmentProps = {
    createdDate?: string;
    lastModifiedDate?: string;
    customForm?: PlatformCore.RecordRef;
    postingPeriod?: PlatformCore.RecordRef;
    entity?: PlatformCore.RecordRef;
    createdFrom?: PlatformCore.RecordRef;
    requestedBy?: PlatformCore.RecordRef;
    createdFromShipGroup?: number;
    partner?: PlatformCore.RecordRef;
    shippingAddress?: PlatformCommon.Address;
    pickedDate?: string;
    packedDate?: string;
    shippedDate?: string;
    shipIsResidential?: boolean;
    shipAddressList?: PlatformCore.RecordRef;
    shipStatus?: TransactionsSalesTypes.ItemFulfillmentShipStatus;
    saturdayDeliveryUps?: boolean;
    sendShipNotifyEmailUps?: boolean;
    sendBackupEmailUps?: boolean;
    shipNotifyEmailAddressUps?: string;
    shipNotifyEmailAddress2Ups?: string;
    backupEmailAddressUps?: string;
    shipNotifyEmailMessageUps?: string;
    thirdPartyAcctUps?: string;
    thirdPartyZipcodeUps?: string;
    thirdPartyCountryUps?: PlatformCommonTypes.Country;
    thirdPartyTypeUps?: TransactionsSalesTypes.ItemFulfillmentThirdPartyTypeUps;
    partiesToTransactionUps?: boolean;
    exportTypeUps?: TransactionsSalesTypes.ItemFulfillmentExportTypeUps;
    methodOfTransportUps?: TransactionsSalesTypes.ItemFulfillmentMethodOfTransportUps;
    carrierIdUps?: string;
    entryNumberUps?: string;
    inbondCodeUps?: string;
    isRoutedExportTransactionUps?: boolean;
    licenseNumberUps?: string;
    licenseDateUps?: string;
    licenseExceptionUps?: TransactionsSalesTypes.ItemFulfillmentLicenseExceptionUps;
    eccNumberUps?: string;
    recipientTaxIdUps?: string;
    blanketStartDateUps?: string;
    blanketEndDateUps?: string;
    shipmentWeightUps?: number;
    saturdayDeliveryFedEx?: boolean;
    saturdayPickupFedex?: boolean;
    sendShipNotifyEmailFedEx?: boolean;
    sendBackupEmailFedEx?: boolean;
    signatureHomeDeliveryFedEx?: boolean;
    shipNotifyEmailAddressFedEx?: string;
    backupEmailAddressFedEx?: string;
    shipDateFedEx?: string;
    homeDeliveryTypeFedEx?: TransactionsSalesTypes.ItemFulfillmentHomeDeliveryTypeFedEx;
    homeDeliveryDateFedEx?: string;
    bookingConfirmationNumFedEx?: string;
    intlExemptionNumFedEx?: string;
    b13AFilingOptionFedEx?: TransactionsSalesTypes.ItemFulfillmentB13AFilingOptionFedEx;
    b13AStatementDataFedEx?: string;
    thirdPartyAcctFedEx?: string;
    thirdPartyCountryFedEx?: PlatformCommonTypes.Country;
    thirdPartyTypeFedEx?: TransactionsSalesTypes.ItemFulfillmentThirdPartyTypeFedEx;
    shipmentWeightFedEx?: number;
    termsOfSaleFedEx?: TransactionsSalesTypes.ItemFulfillmentTermsOfSaleFedEx;
    termsFreightChargeFedEx?: number;
    termsInsuranceChargeFedEx?: number;
    insideDeliveryFedEx?: boolean;
    insidePickupFedEx?: boolean;
    ancillaryEndorsementFedEx?: TransactionsSalesTypes.ItemFulfillmentAncillaryEndorsementFedEx;
    holdAtLocationFedEx?: boolean;
    halPhoneFedEx?: string;
    halAddr1FedEx?: string;
    halAddr2FedEx?: string;
    halAddr3FedEx?: string;
    halCityFedEx?: string;
    halZipFedEx?: string;
    halStateFedEx?: string;
    halCountryFedEx?: string;
    hazmatTypeFedEx?: TransactionsSalesTypes.ItemFulfillmentHazmatTypeFedEx;
    accessibilityTypeFedEx?: TransactionsSalesTypes.ItemFulfillmentAccessibilityTypeFedEx;
    isCargoAircraftOnlyFedEx?: boolean;
    tranDate?: string;
    tranId?: string;
    shipMethod?: PlatformCore.RecordRef;
    generateIntegratedShipperLabel?: boolean;
    shippingCost?: number;
    handlingCost?: number;
    memo?: string;
    transferLocation?: PlatformCore.RecordRef;
    packageList?: ItemFulfillmentPackageList;
    packageUpsList?: ItemFulfillmentPackageUpsList;
    packageUspsList?: ItemFulfillmentPackageUspsList;
    packageFedExList?: ItemFulfillmentPackageFedExList;
    itemList?: ItemFulfillmentItemList;
    accountingBookDetailList?: PlatformCommon.AccountingBookDetailList;
    customFieldList?: PlatformCore.CustomFieldList;
    internalId?: string;
    externalId?: string;
} & PlatformCore.RecordProps;
export declare class ItemFulfillment extends PlatformCore.Record {
    createdDate?: string;
    lastModifiedDate?: string;
    customForm?: PlatformCore.RecordRef;
    postingPeriod?: PlatformCore.RecordRef;
    entity?: PlatformCore.RecordRef;
    createdFrom?: PlatformCore.RecordRef;
    requestedBy?: PlatformCore.RecordRef;
    createdFromShipGroup?: number;
    partner?: PlatformCore.RecordRef;
    shippingAddress?: PlatformCommon.Address;
    pickedDate?: string;
    packedDate?: string;
    shippedDate?: string;
    shipIsResidential?: boolean;
    shipAddressList?: PlatformCore.RecordRef;
    shipStatus?: TransactionsSalesTypes.ItemFulfillmentShipStatus;
    saturdayDeliveryUps?: boolean;
    sendShipNotifyEmailUps?: boolean;
    sendBackupEmailUps?: boolean;
    shipNotifyEmailAddressUps?: string;
    shipNotifyEmailAddress2Ups?: string;
    backupEmailAddressUps?: string;
    shipNotifyEmailMessageUps?: string;
    thirdPartyAcctUps?: string;
    thirdPartyZipcodeUps?: string;
    thirdPartyCountryUps?: PlatformCommonTypes.Country;
    thirdPartyTypeUps?: TransactionsSalesTypes.ItemFulfillmentThirdPartyTypeUps;
    partiesToTransactionUps?: boolean;
    exportTypeUps?: TransactionsSalesTypes.ItemFulfillmentExportTypeUps;
    methodOfTransportUps?: TransactionsSalesTypes.ItemFulfillmentMethodOfTransportUps;
    carrierIdUps?: string;
    entryNumberUps?: string;
    inbondCodeUps?: string;
    isRoutedExportTransactionUps?: boolean;
    licenseNumberUps?: string;
    licenseDateUps?: string;
    licenseExceptionUps?: TransactionsSalesTypes.ItemFulfillmentLicenseExceptionUps;
    eccNumberUps?: string;
    recipientTaxIdUps?: string;
    blanketStartDateUps?: string;
    blanketEndDateUps?: string;
    shipmentWeightUps?: number;
    saturdayDeliveryFedEx?: boolean;
    saturdayPickupFedex?: boolean;
    sendShipNotifyEmailFedEx?: boolean;
    sendBackupEmailFedEx?: boolean;
    signatureHomeDeliveryFedEx?: boolean;
    shipNotifyEmailAddressFedEx?: string;
    backupEmailAddressFedEx?: string;
    shipDateFedEx?: string;
    homeDeliveryTypeFedEx?: TransactionsSalesTypes.ItemFulfillmentHomeDeliveryTypeFedEx;
    homeDeliveryDateFedEx?: string;
    bookingConfirmationNumFedEx?: string;
    intlExemptionNumFedEx?: string;
    b13AFilingOptionFedEx?: TransactionsSalesTypes.ItemFulfillmentB13AFilingOptionFedEx;
    b13AStatementDataFedEx?: string;
    thirdPartyAcctFedEx?: string;
    thirdPartyCountryFedEx?: PlatformCommonTypes.Country;
    thirdPartyTypeFedEx?: TransactionsSalesTypes.ItemFulfillmentThirdPartyTypeFedEx;
    shipmentWeightFedEx?: number;
    termsOfSaleFedEx?: TransactionsSalesTypes.ItemFulfillmentTermsOfSaleFedEx;
    termsFreightChargeFedEx?: number;
    termsInsuranceChargeFedEx?: number;
    insideDeliveryFedEx?: boolean;
    insidePickupFedEx?: boolean;
    ancillaryEndorsementFedEx?: TransactionsSalesTypes.ItemFulfillmentAncillaryEndorsementFedEx;
    holdAtLocationFedEx?: boolean;
    halPhoneFedEx?: string;
    halAddr1FedEx?: string;
    halAddr2FedEx?: string;
    halAddr3FedEx?: string;
    halCityFedEx?: string;
    halZipFedEx?: string;
    halStateFedEx?: string;
    halCountryFedEx?: string;
    hazmatTypeFedEx?: TransactionsSalesTypes.ItemFulfillmentHazmatTypeFedEx;
    accessibilityTypeFedEx?: TransactionsSalesTypes.ItemFulfillmentAccessibilityTypeFedEx;
    isCargoAircraftOnlyFedEx?: boolean;
    tranDate?: string;
    tranId?: string;
    shipMethod?: PlatformCore.RecordRef;
    generateIntegratedShipperLabel?: boolean;
    shippingCost?: number;
    handlingCost?: number;
    memo?: string;
    transferLocation?: PlatformCore.RecordRef;
    packageList?: ItemFulfillmentPackageList;
    packageUpsList?: ItemFulfillmentPackageUpsList;
    packageUspsList?: ItemFulfillmentPackageUspsList;
    packageFedExList?: ItemFulfillmentPackageFedExList;
    itemList?: ItemFulfillmentItemList;
    accountingBookDetailList?: PlatformCommon.AccountingBookDetailList;
    customFieldList?: PlatformCore.CustomFieldList;
    internalId?: string;
    externalId?: string;
    constructor(props: ItemFulfillmentProps);
}
export declare type OpportunitySalesTeamProps = {
    employee?: PlatformCore.RecordRef;
    salesRole?: PlatformCore.RecordRef;
    isPrimary?: boolean;
    contribution?: number;
};
export declare class OpportunitySalesTeam extends SoapMappingBase {
    employee?: PlatformCore.RecordRef;
    salesRole?: PlatformCore.RecordRef;
    isPrimary?: boolean;
    contribution?: number;
    constructor(props: OpportunitySalesTeamProps);
}
export declare type ItemFulfillmentPackageUspsProps = {
    packageWeightUsps?: number;
    packageDescrUsps?: string;
    packageTrackingNumberUsps?: string;
    packagingUsps?: TransactionsSalesTypes.ItemFulfillmentPackageUspsPackagingUsps;
    useInsuredValueUsps?: boolean;
    insuredValueUsps?: number;
    reference1Usps?: string;
    reference2Usps?: string;
    packageLengthUsps?: number;
    packageWidthUsps?: number;
    packageHeightUsps?: number;
    deliveryConfUsps?: TransactionsSalesTypes.ItemFulfillmentPackageUspsDeliveryConfUsps;
};
export declare class ItemFulfillmentPackageUsps extends SoapMappingBase {
    packageWeightUsps?: number;
    packageDescrUsps?: string;
    packageTrackingNumberUsps?: string;
    packagingUsps?: TransactionsSalesTypes.ItemFulfillmentPackageUspsPackagingUsps;
    useInsuredValueUsps?: boolean;
    insuredValueUsps?: number;
    reference1Usps?: string;
    reference2Usps?: string;
    packageLengthUsps?: number;
    packageWidthUsps?: number;
    packageHeightUsps?: number;
    deliveryConfUsps?: TransactionsSalesTypes.ItemFulfillmentPackageUspsDeliveryConfUsps;
    constructor(props: ItemFulfillmentPackageUspsProps);
}
export declare type InvoiceTimeProps = {
    apply?: boolean;
    doc?: number;
    line?: number;
    billedDate?: string;
    employeeDisp?: string;
    itemDisp?: string;
    jobDisp?: string;
    department?: string;
    clazz?: string;
    location?: string;
    quantity?: string;
    rate?: number;
    unitDisp?: string;
    amount?: number;
    memo?: string;
    taxAmount?: number;
    revRecSchedule?: PlatformCore.RecordRef;
    revRecStartDate?: string;
    revRecEndDate?: string;
    grossAmt?: number;
    taxDetailsReference?: string;
    tax1Amt?: number;
    taxCode?: PlatformCore.RecordRef;
    taxRate1?: number;
    taxRate2?: number;
};
export declare class InvoiceTime extends SoapMappingBase {
    apply?: boolean;
    doc?: number;
    line?: number;
    billedDate?: string;
    employeeDisp?: string;
    itemDisp?: string;
    jobDisp?: string;
    department?: string;
    clazz?: string;
    location?: string;
    quantity?: string;
    rate?: number;
    unitDisp?: string;
    amount?: number;
    memo?: string;
    taxAmount?: number;
    revRecSchedule?: PlatformCore.RecordRef;
    revRecStartDate?: string;
    revRecEndDate?: string;
    grossAmt?: number;
    taxDetailsReference?: string;
    tax1Amt?: number;
    taxCode?: PlatformCore.RecordRef;
    taxRate1?: number;
    taxRate2?: number;
    constructor(props: InvoiceTimeProps);
}
export declare type EstimateItemProps = {
    job?: PlatformCore.RecordRef;
    item?: PlatformCore.RecordRef;
    line?: number;
    expandItemGroup?: boolean;
    quantityAvailable?: number;
    quantityOnHand?: number;
    quantity?: number;
    units?: PlatformCore.RecordRef;
    description?: string;
    serialNumbers?: string;
    price?: PlatformCore.RecordRef;
    rate?: string;
    amount?: number;
    options?: PlatformCore.CustomFieldList;
    revRecTermInMonths?: number;
    department?: PlatformCore.RecordRef;
    clazz?: PlatformCore.RecordRef;
    location?: PlatformCore.RecordRef;
    isTaxable?: boolean;
    altSalesAmt?: number;
    taxAmount?: number;
    fromJob?: boolean;
    grossAmt?: number;
    isEstimate?: boolean;
    subscription?: PlatformCore.RecordRef;
    tax1Amt?: number;
    taxCode?: PlatformCore.RecordRef;
    costEstimateType?: PlatformCommonTypes.ItemCostEstimateType;
    costEstimate?: number;
    excludeFromRateRequest?: boolean;
    taxDetailsReference?: string;
    taxRate1?: number;
    taxRate2?: number;
    shipGroup?: number;
    itemIsFulfilled?: boolean;
    shipAddress?: PlatformCore.RecordRef;
    shipMethod?: PlatformCore.RecordRef;
    expectedShipDate?: string;
    chargeType?: PlatformCore.RecordRef;
    customFieldList?: PlatformCore.CustomFieldList;
};
export declare class EstimateItem extends SoapMappingBase {
    job?: PlatformCore.RecordRef;
    item?: PlatformCore.RecordRef;
    line?: number;
    expandItemGroup?: boolean;
    quantityAvailable?: number;
    quantityOnHand?: number;
    quantity?: number;
    units?: PlatformCore.RecordRef;
    description?: string;
    serialNumbers?: string;
    price?: PlatformCore.RecordRef;
    rate?: string;
    amount?: number;
    options?: PlatformCore.CustomFieldList;
    revRecTermInMonths?: number;
    department?: PlatformCore.RecordRef;
    clazz?: PlatformCore.RecordRef;
    location?: PlatformCore.RecordRef;
    isTaxable?: boolean;
    altSalesAmt?: number;
    taxAmount?: number;
    fromJob?: boolean;
    grossAmt?: number;
    isEstimate?: boolean;
    subscription?: PlatformCore.RecordRef;
    tax1Amt?: number;
    taxCode?: PlatformCore.RecordRef;
    costEstimateType?: PlatformCommonTypes.ItemCostEstimateType;
    costEstimate?: number;
    excludeFromRateRequest?: boolean;
    taxDetailsReference?: string;
    taxRate1?: number;
    taxRate2?: number;
    shipGroup?: number;
    itemIsFulfilled?: boolean;
    shipAddress?: PlatformCore.RecordRef;
    shipMethod?: PlatformCore.RecordRef;
    expectedShipDate?: string;
    chargeType?: PlatformCore.RecordRef;
    customFieldList?: PlatformCore.CustomFieldList;
    constructor(props: EstimateItemProps);
}
export declare type ItemFulfillmentPackageListProps = {
    _package?: ItemFulfillmentPackage[];
    replaceAll?: boolean;
};
export declare class ItemFulfillmentPackageList extends SoapMappingBase {
    _package?: ItemFulfillmentPackage[];
    replaceAll?: boolean;
    constructor(props: ItemFulfillmentPackageListProps);
}
export declare type SalesOrderProps = {
    createdDate?: string;
    customForm?: PlatformCore.RecordRef;
    entity?: PlatformCore.RecordRef;
    job?: PlatformCore.RecordRef;
    currency?: PlatformCore.RecordRef;
    drAccount?: PlatformCore.RecordRef;
    fxAccount?: PlatformCore.RecordRef;
    tranDate?: string;
    tranId?: string;
    entityTaxRegNum?: PlatformCore.RecordRef;
    source?: string;
    createdFrom?: PlatformCore.RecordRef;
    orderStatus?: TransactionsSalesTypes.SalesOrderOrderStatus;
    nextBill?: string;
    opportunity?: PlatformCore.RecordRef;
    salesRep?: PlatformCore.RecordRef;
    contribPct?: string;
    partner?: PlatformCore.RecordRef;
    salesGroup?: PlatformCore.RecordRef;
    syncSalesTeams?: boolean;
    leadSource?: PlatformCore.RecordRef;
    startDate?: string;
    endDate?: string;
    otherRefNum?: string;
    memo?: string;
    salesEffectiveDate?: string;
    excludeCommission?: boolean;
    totalCostEstimate?: number;
    estGrossProfit?: number;
    estGrossProfitPercent?: number;
    exchangeRate?: number;
    promoCode?: PlatformCore.RecordRef;
    currencyName?: string;
    discountItem?: PlatformCore.RecordRef;
    discountRate?: string;
    isTaxable?: boolean;
    taxItem?: PlatformCore.RecordRef;
    taxRate?: number;
    toBePrinted?: boolean;
    toBeEmailed?: boolean;
    email?: string;
    toBeFaxed?: boolean;
    fax?: string;
    messageSel?: PlatformCore.RecordRef;
    message?: string;
    paymentOption?: PlatformCore.RecordRef;
    inputAuthCode?: string;
    inputReferenceCode?: string;
    checkNumber?: string;
    paymentCardCsc?: string;
    paymentProcessingProfile?: PlatformCore.RecordRef;
    handlingMode?: TransactionsSalesTypes.SalesOrderHandlingMode;
    outputAuthCode?: string;
    outputReferenceCode?: string;
    paymentOperation?: TransactionsSalesTypes.SalesOrderPaymentOperation;
    dynamicDescriptor?: string;
    billingAddress?: PlatformCommon.Address;
    billAddressList?: PlatformCore.RecordRef;
    shippingAddress?: PlatformCommon.Address;
    shipIsResidential?: boolean;
    shipAddressList?: PlatformCore.RecordRef;
    fob?: string;
    shipDate?: string;
    actualShipDate?: string;
    shipMethod?: PlatformCore.RecordRef;
    shippingCost?: number;
    shippingTax1Rate?: number;
    isMultiShipTo?: boolean;
    shippingTax2Rate?: string;
    shippingTaxCode?: PlatformCore.RecordRef;
    handlingTaxCode?: PlatformCore.RecordRef;
    handlingTax1Rate?: number;
    handlingTax2Rate?: string;
    handlingCost?: number;
    trackingNumbers?: string;
    linkedTrackingNumbers?: string;
    shipComplete?: boolean;
    paymentMethod?: PlatformCore.RecordRef;
    shopperIpAddress?: string;
    saveOnAuthDecline?: boolean;
    canHaveStackable?: boolean;
    creditCard?: PlatformCore.RecordRef;
    revenueStatus?: PlatformCommonTypes.RevenueStatus;
    recognizedRevenue?: number;
    deferredRevenue?: number;
    revRecOnRevCommitment?: boolean;
    revCommitStatus?: PlatformCommonTypes.RevenueCommitStatus;
    ccNumber?: string;
    ccExpireDate?: string;
    ccName?: string;
    ccStreet?: string;
    ccZipCode?: string;
    payPalStatus?: string;
    creditCardProcessor?: PlatformCore.RecordRef;
    payPalTranId?: string;
    ccApproved?: boolean;
    getAuth?: boolean;
    authCode?: string;
    ccAvsStreetMatch?: PlatformCommonTypes.AvsMatchCode;
    ccAvsZipMatch?: PlatformCommonTypes.AvsMatchCode;
    isRecurringPayment?: boolean;
    ccSecurityCodeMatch?: PlatformCommonTypes.AvsMatchCode;
    altSalesTotal?: number;
    ignoreAvs?: boolean;
    paymentEventResult?: TransactionsSalesTypes.TransactionPaymentEventResult;
    paymentEventHoldReason?: TransactionsSalesTypes.TransactionPaymentEventHoldReason;
    paymentEventType?: TransactionsSalesTypes.TransactionPaymentEventType;
    paymentEventDate?: string;
    paymentEventUpdatedBy?: string;
    subTotal?: number;
    discountTotal?: number;
    taxTotal?: number;
    altShippingCost?: number;
    altHandlingCost?: number;
    total?: number;
    revRecSchedule?: PlatformCore.RecordRef;
    revRecStartDate?: string;
    revRecEndDate?: string;
    paypalAuthId?: string;
    balance?: number;
    paypalProcess?: boolean;
    billingSchedule?: PlatformCore.RecordRef;
    ccSecurityCode?: string;
    threeDStatusCode?: string;
    clazz?: PlatformCore.RecordRef;
    department?: PlatformCore.RecordRef;
    subsidiary?: PlatformCore.RecordRef;
    intercoTransaction?: PlatformCore.RecordRef;
    intercoStatus?: PlatformCommonTypes.IntercoStatus;
    debitCardIssueNo?: string;
    lastModifiedDate?: string;
    nexus?: PlatformCore.RecordRef;
    subsidiaryTaxRegNum?: PlatformCore.RecordRef;
    taxRegOverride?: boolean;
    taxPointDate?: string;
    taxDetailsOverride?: boolean;
    location?: PlatformCore.RecordRef;
    pnRefNum?: string;
    status?: string;
    tax2Total?: number;
    terms?: PlatformCore.RecordRef;
    validFrom?: string;
    vatRegNum?: string;
    giftCertApplied?: number;
    oneTime?: number;
    recurWeekly?: number;
    recurMonthly?: number;
    recurQuarterly?: number;
    recurAnnually?: number;
    tranIsVsoeBundle?: boolean;
    vsoeAutoCalc?: boolean;
    syncPartnerTeams?: boolean;
    salesTeamList?: SalesOrderSalesTeamList;
    partnersList?: SalesOrderPartnersList;
    giftCertRedemptionList?: PlatformCommon.GiftCertRedemptionList;
    promotionsList?: PromotionsList;
    itemList?: SalesOrderItemList;
    shipGroupList?: SalesOrderShipGroupList;
    accountingBookDetailList?: PlatformCommon.AccountingBookDetailList;
    taxDetailsList?: PlatformCommon.TaxDetailsList;
    customFieldList?: PlatformCore.CustomFieldList;
    internalId?: string;
    externalId?: string;
} & PlatformCore.RecordProps;
export declare class SalesOrder extends PlatformCore.Record {
    createdDate?: string;
    customForm?: PlatformCore.RecordRef;
    entity?: PlatformCore.RecordRef;
    job?: PlatformCore.RecordRef;
    currency?: PlatformCore.RecordRef;
    drAccount?: PlatformCore.RecordRef;
    fxAccount?: PlatformCore.RecordRef;
    tranDate?: string;
    tranId?: string;
    entityTaxRegNum?: PlatformCore.RecordRef;
    source?: string;
    createdFrom?: PlatformCore.RecordRef;
    orderStatus?: TransactionsSalesTypes.SalesOrderOrderStatus;
    nextBill?: string;
    opportunity?: PlatformCore.RecordRef;
    salesRep?: PlatformCore.RecordRef;
    contribPct?: string;
    partner?: PlatformCore.RecordRef;
    salesGroup?: PlatformCore.RecordRef;
    syncSalesTeams?: boolean;
    leadSource?: PlatformCore.RecordRef;
    startDate?: string;
    endDate?: string;
    otherRefNum?: string;
    memo?: string;
    salesEffectiveDate?: string;
    excludeCommission?: boolean;
    totalCostEstimate?: number;
    estGrossProfit?: number;
    estGrossProfitPercent?: number;
    exchangeRate?: number;
    promoCode?: PlatformCore.RecordRef;
    currencyName?: string;
    discountItem?: PlatformCore.RecordRef;
    discountRate?: string;
    isTaxable?: boolean;
    taxItem?: PlatformCore.RecordRef;
    taxRate?: number;
    toBePrinted?: boolean;
    toBeEmailed?: boolean;
    email?: string;
    toBeFaxed?: boolean;
    fax?: string;
    messageSel?: PlatformCore.RecordRef;
    message?: string;
    paymentOption?: PlatformCore.RecordRef;
    inputAuthCode?: string;
    inputReferenceCode?: string;
    checkNumber?: string;
    paymentCardCsc?: string;
    paymentProcessingProfile?: PlatformCore.RecordRef;
    handlingMode?: TransactionsSalesTypes.SalesOrderHandlingMode;
    outputAuthCode?: string;
    outputReferenceCode?: string;
    paymentOperation?: TransactionsSalesTypes.SalesOrderPaymentOperation;
    dynamicDescriptor?: string;
    billingAddress?: PlatformCommon.Address;
    billAddressList?: PlatformCore.RecordRef;
    shippingAddress?: PlatformCommon.Address;
    shipIsResidential?: boolean;
    shipAddressList?: PlatformCore.RecordRef;
    fob?: string;
    shipDate?: string;
    actualShipDate?: string;
    shipMethod?: PlatformCore.RecordRef;
    shippingCost?: number;
    shippingTax1Rate?: number;
    isMultiShipTo?: boolean;
    shippingTax2Rate?: string;
    shippingTaxCode?: PlatformCore.RecordRef;
    handlingTaxCode?: PlatformCore.RecordRef;
    handlingTax1Rate?: number;
    handlingTax2Rate?: string;
    handlingCost?: number;
    trackingNumbers?: string;
    linkedTrackingNumbers?: string;
    shipComplete?: boolean;
    paymentMethod?: PlatformCore.RecordRef;
    shopperIpAddress?: string;
    saveOnAuthDecline?: boolean;
    canHaveStackable?: boolean;
    creditCard?: PlatformCore.RecordRef;
    revenueStatus?: PlatformCommonTypes.RevenueStatus;
    recognizedRevenue?: number;
    deferredRevenue?: number;
    revRecOnRevCommitment?: boolean;
    revCommitStatus?: PlatformCommonTypes.RevenueCommitStatus;
    ccNumber?: string;
    ccExpireDate?: string;
    ccName?: string;
    ccStreet?: string;
    ccZipCode?: string;
    payPalStatus?: string;
    creditCardProcessor?: PlatformCore.RecordRef;
    payPalTranId?: string;
    ccApproved?: boolean;
    getAuth?: boolean;
    authCode?: string;
    ccAvsStreetMatch?: PlatformCommonTypes.AvsMatchCode;
    ccAvsZipMatch?: PlatformCommonTypes.AvsMatchCode;
    isRecurringPayment?: boolean;
    ccSecurityCodeMatch?: PlatformCommonTypes.AvsMatchCode;
    altSalesTotal?: number;
    ignoreAvs?: boolean;
    paymentEventResult?: TransactionsSalesTypes.TransactionPaymentEventResult;
    paymentEventHoldReason?: TransactionsSalesTypes.TransactionPaymentEventHoldReason;
    paymentEventType?: TransactionsSalesTypes.TransactionPaymentEventType;
    paymentEventDate?: string;
    paymentEventUpdatedBy?: string;
    subTotal?: number;
    discountTotal?: number;
    taxTotal?: number;
    altShippingCost?: number;
    altHandlingCost?: number;
    total?: number;
    revRecSchedule?: PlatformCore.RecordRef;
    revRecStartDate?: string;
    revRecEndDate?: string;
    paypalAuthId?: string;
    balance?: number;
    paypalProcess?: boolean;
    billingSchedule?: PlatformCore.RecordRef;
    ccSecurityCode?: string;
    threeDStatusCode?: string;
    clazz?: PlatformCore.RecordRef;
    department?: PlatformCore.RecordRef;
    subsidiary?: PlatformCore.RecordRef;
    intercoTransaction?: PlatformCore.RecordRef;
    intercoStatus?: PlatformCommonTypes.IntercoStatus;
    debitCardIssueNo?: string;
    lastModifiedDate?: string;
    nexus?: PlatformCore.RecordRef;
    subsidiaryTaxRegNum?: PlatformCore.RecordRef;
    taxRegOverride?: boolean;
    taxPointDate?: string;
    taxDetailsOverride?: boolean;
    location?: PlatformCore.RecordRef;
    pnRefNum?: string;
    status?: string;
    tax2Total?: number;
    terms?: PlatformCore.RecordRef;
    validFrom?: string;
    vatRegNum?: string;
    giftCertApplied?: number;
    oneTime?: number;
    recurWeekly?: number;
    recurMonthly?: number;
    recurQuarterly?: number;
    recurAnnually?: number;
    tranIsVsoeBundle?: boolean;
    vsoeAutoCalc?: boolean;
    syncPartnerTeams?: boolean;
    salesTeamList?: SalesOrderSalesTeamList;
    partnersList?: SalesOrderPartnersList;
    giftCertRedemptionList?: PlatformCommon.GiftCertRedemptionList;
    promotionsList?: PromotionsList;
    itemList?: SalesOrderItemList;
    shipGroupList?: SalesOrderShipGroupList;
    accountingBookDetailList?: PlatformCommon.AccountingBookDetailList;
    taxDetailsList?: PlatformCommon.TaxDetailsList;
    customFieldList?: PlatformCore.CustomFieldList;
    internalId?: string;
    externalId?: string;
    constructor(props: SalesOrderProps);
}
export declare type ItemFulfillmentPackageFedExListProps = {
    packageFedEx?: ItemFulfillmentPackageFedEx[];
    replaceAll?: boolean;
};
export declare class ItemFulfillmentPackageFedExList extends SoapMappingBase {
    packageFedEx?: ItemFulfillmentPackageFedEx[];
    replaceAll?: boolean;
    constructor(props: ItemFulfillmentPackageFedExListProps);
}
export declare type InvoiceSalesTeamListProps = {
    salesTeam?: InvoiceSalesTeam[];
    replaceAll?: boolean;
};
export declare class InvoiceSalesTeamList extends SoapMappingBase {
    salesTeam?: InvoiceSalesTeam[];
    replaceAll?: boolean;
    constructor(props: InvoiceSalesTeamListProps);
}
export declare type EstimateSalesTeamProps = {
    employee?: PlatformCore.RecordRef;
    salesRole?: PlatformCore.RecordRef;
    isPrimary?: boolean;
    contribution?: number;
};
export declare class EstimateSalesTeam extends SoapMappingBase {
    employee?: PlatformCore.RecordRef;
    salesRole?: PlatformCore.RecordRef;
    isPrimary?: boolean;
    contribution?: number;
    constructor(props: EstimateSalesTeamProps);
}
export declare type InvoiceExpCostListProps = {
    expCost?: InvoiceExpCost[];
    replaceAll?: boolean;
};
export declare class InvoiceExpCostList extends SoapMappingBase {
    expCost?: InvoiceExpCost[];
    replaceAll?: boolean;
    constructor(props: InvoiceExpCostListProps);
}
export declare type CashSaleTimeProps = {
    apply?: boolean;
    doc?: number;
    line?: number;
    billedDate?: string;
    employeeDisp?: string;
    itemDisp?: string;
    jobDisp?: string;
    department?: string;
    clazz?: string;
    location?: string;
    quantity?: string;
    rate?: number;
    unitDisp?: string;
    amount?: number;
    memo?: string;
    taxAmount?: number;
    revRecSchedule?: PlatformCore.RecordRef;
    revRecStartDate?: string;
    revRecEndDate?: string;
    grossAmt?: number;
    taxDetailsReference?: string;
    tax1Amt?: number;
    taxCode?: PlatformCore.RecordRef;
    taxRate1?: number;
    taxRate2?: number;
};
export declare class CashSaleTime extends SoapMappingBase {
    apply?: boolean;
    doc?: number;
    line?: number;
    billedDate?: string;
    employeeDisp?: string;
    itemDisp?: string;
    jobDisp?: string;
    department?: string;
    clazz?: string;
    location?: string;
    quantity?: string;
    rate?: number;
    unitDisp?: string;
    amount?: number;
    memo?: string;
    taxAmount?: number;
    revRecSchedule?: PlatformCore.RecordRef;
    revRecStartDate?: string;
    revRecEndDate?: string;
    grossAmt?: number;
    taxDetailsReference?: string;
    tax1Amt?: number;
    taxCode?: PlatformCore.RecordRef;
    taxRate1?: number;
    taxRate2?: number;
    constructor(props: CashSaleTimeProps);
}
export declare type OpportunityItemProps = {
    job?: PlatformCore.RecordRef;
    item?: PlatformCore.RecordRef;
    line?: number;
    quantityAvailable?: number;
    quantityOnHand?: number;
    quantity?: number;
    units?: PlatformCore.RecordRef;
    description?: string;
    price?: PlatformCore.RecordRef;
    rate?: string;
    amount?: number;
    altSalesAmt?: number;
    revRecTermInMonths?: number;
    options?: PlatformCore.CustomFieldList;
    fromJob?: boolean;
    department?: PlatformCore.RecordRef;
    isEstimate?: boolean;
    location?: PlatformCore.RecordRef;
    clazz?: PlatformCore.RecordRef;
    costEstimateType?: PlatformCommonTypes.ItemCostEstimateType;
    costEstimate?: number;
    taxAmount?: number;
    taxDetailsReference?: string;
    grossAmt?: number;
    tax1Amt?: number;
    taxCode?: PlatformCore.RecordRef;
    taxRate1?: number;
    taxRate2?: number;
    expectedShipDate?: string;
    subscription?: PlatformCore.RecordRef;
    customFieldList?: PlatformCore.CustomFieldList;
};
export declare class OpportunityItem extends SoapMappingBase {
    job?: PlatformCore.RecordRef;
    item?: PlatformCore.RecordRef;
    line?: number;
    quantityAvailable?: number;
    quantityOnHand?: number;
    quantity?: number;
    units?: PlatformCore.RecordRef;
    description?: string;
    price?: PlatformCore.RecordRef;
    rate?: string;
    amount?: number;
    altSalesAmt?: number;
    revRecTermInMonths?: number;
    options?: PlatformCore.CustomFieldList;
    fromJob?: boolean;
    department?: PlatformCore.RecordRef;
    isEstimate?: boolean;
    location?: PlatformCore.RecordRef;
    clazz?: PlatformCore.RecordRef;
    costEstimateType?: PlatformCommonTypes.ItemCostEstimateType;
    costEstimate?: number;
    taxAmount?: number;
    taxDetailsReference?: string;
    grossAmt?: number;
    tax1Amt?: number;
    taxCode?: PlatformCore.RecordRef;
    taxRate1?: number;
    taxRate2?: number;
    expectedShipDate?: string;
    subscription?: PlatformCore.RecordRef;
    customFieldList?: PlatformCore.CustomFieldList;
    constructor(props: OpportunityItemProps);
}
export declare type InvoiceItemProps = {
    job?: PlatformCore.RecordRef;
    item?: PlatformCore.RecordRef;
    line?: number;
    description?: string;
    amount?: number;
    isTaxable?: boolean;
    options?: PlatformCore.CustomFieldList;
    subscriptionLine?: PlatformCore.RecordRef;
    deferRevRec?: boolean;
    quantity?: number;
    currentPercent?: number;
    units?: PlatformCore.RecordRef;
    inventoryDetail?: PlatformCommon.InventoryDetail;
    serialNumbers?: string;
    binNumbers?: string;
    price?: PlatformCore.RecordRef;
    rate?: string;
    percentComplete?: number;
    quantityOnHand?: number;
    quantityAvailable?: number;
    quantityOrdered?: number;
    quantityRemaining?: number;
    quantityFulfilled?: number;
    amountOrdered?: number;
    department?: PlatformCore.RecordRef;
    orderLine?: number;
    licenseCode?: string;
    clazz?: PlatformCore.RecordRef;
    location?: PlatformCore.RecordRef;
    revRecSchedule?: PlatformCore.RecordRef;
    revRecStartDate?: string;
    revRecEndDate?: string;
    grossAmt?: number;
    costEstimateType?: PlatformCommonTypes.ItemCostEstimateType;
    costEstimate?: number;
    taxDetailsReference?: string;
    excludeFromRateRequest?: boolean;
    catchUpPeriod?: PlatformCore.RecordRef;
    tax1Amt?: number;
    taxCode?: PlatformCore.RecordRef;
    taxRate1?: number;
    taxRate2?: number;
    giftCertFrom?: string;
    giftCertRecipientName?: string;
    giftCertRecipientEmail?: string;
    giftCertMessage?: string;
    taxAmount?: number;
    giftCertNumber?: string;
    shipGroup?: number;
    itemIsFulfilled?: boolean;
    shipAddress?: PlatformCore.RecordRef;
    shipMethod?: PlatformCore.RecordRef;
    vsoeSopGroup?: PlatformCommonTypes.VsoeSopGroup;
    vsoeIsEstimate?: boolean;
    vsoePrice?: number;
    vsoeAmount?: number;
    vsoeAllocation?: number;
    vsoeDeferral?: PlatformCommonTypes.VsoeDeferral;
    vsoePermitDiscount?: PlatformCommonTypes.VsoePermitDiscount;
    vsoeDelivered?: boolean;
    chargeType?: PlatformCore.RecordRef;
    chargesList?: PlatformCore.RecordRefList;
    customFieldList?: PlatformCore.CustomFieldList;
};
export declare class InvoiceItem extends SoapMappingBase {
    job?: PlatformCore.RecordRef;
    item?: PlatformCore.RecordRef;
    line?: number;
    description?: string;
    amount?: number;
    isTaxable?: boolean;
    options?: PlatformCore.CustomFieldList;
    subscriptionLine?: PlatformCore.RecordRef;
    deferRevRec?: boolean;
    quantity?: number;
    currentPercent?: number;
    units?: PlatformCore.RecordRef;
    inventoryDetail?: PlatformCommon.InventoryDetail;
    serialNumbers?: string;
    binNumbers?: string;
    price?: PlatformCore.RecordRef;
    rate?: string;
    percentComplete?: number;
    quantityOnHand?: number;
    quantityAvailable?: number;
    quantityOrdered?: number;
    quantityRemaining?: number;
    quantityFulfilled?: number;
    amountOrdered?: number;
    department?: PlatformCore.RecordRef;
    orderLine?: number;
    licenseCode?: string;
    clazz?: PlatformCore.RecordRef;
    location?: PlatformCore.RecordRef;
    revRecSchedule?: PlatformCore.RecordRef;
    revRecStartDate?: string;
    revRecEndDate?: string;
    grossAmt?: number;
    costEstimateType?: PlatformCommonTypes.ItemCostEstimateType;
    costEstimate?: number;
    taxDetailsReference?: string;
    excludeFromRateRequest?: boolean;
    catchUpPeriod?: PlatformCore.RecordRef;
    tax1Amt?: number;
    taxCode?: PlatformCore.RecordRef;
    taxRate1?: number;
    taxRate2?: number;
    giftCertFrom?: string;
    giftCertRecipientName?: string;
    giftCertRecipientEmail?: string;
    giftCertMessage?: string;
    taxAmount?: number;
    giftCertNumber?: string;
    shipGroup?: number;
    itemIsFulfilled?: boolean;
    shipAddress?: PlatformCore.RecordRef;
    shipMethod?: PlatformCore.RecordRef;
    vsoeSopGroup?: PlatformCommonTypes.VsoeSopGroup;
    vsoeIsEstimate?: boolean;
    vsoePrice?: number;
    vsoeAmount?: number;
    vsoeAllocation?: number;
    vsoeDeferral?: PlatformCommonTypes.VsoeDeferral;
    vsoePermitDiscount?: PlatformCommonTypes.VsoePermitDiscount;
    vsoeDelivered?: boolean;
    chargeType?: PlatformCore.RecordRef;
    chargesList?: PlatformCore.RecordRefList;
    customFieldList?: PlatformCore.CustomFieldList;
    constructor(props: InvoiceItemProps);
}
export declare type AccountingTransactionSearchProps = {
    basic?: PlatformCommon.AccountingTransactionSearchBasic;
    accountJoin?: PlatformCommon.AccountSearchBasic;
    revRecScheduleJoin?: PlatformCommon.RevRecScheduleSearchBasic;
    transactionJoin?: PlatformCommon.TransactionSearchBasic;
};
export declare class AccountingTransactionSearch extends PlatformCore.SearchRecord {
    basic?: PlatformCommon.AccountingTransactionSearchBasic;
    accountJoin?: PlatformCommon.AccountSearchBasic;
    revRecScheduleJoin?: PlatformCommon.RevRecScheduleSearchBasic;
    transactionJoin?: PlatformCommon.TransactionSearchBasic;
    constructor(props: AccountingTransactionSearchProps);
}
export declare type SalesOrderShipGroupListProps = {
    shipGroup?: TransactionShipGroup[];
    replaceAll?: boolean;
};
export declare class SalesOrderShipGroupList extends SoapMappingBase {
    shipGroup?: TransactionShipGroup[];
    replaceAll?: boolean;
    constructor(props: SalesOrderShipGroupListProps);
}
export declare type CashSaleItemCostProps = {
    apply?: boolean;
    doc?: number;
    line?: number;
    taxDetailsReference?: string;
    billedDate?: string;
    itemDisp?: string;
    memo?: string;
    jobDisp?: string;
    department?: string;
    clazz?: string;
    location?: string;
    unitDisp?: string;
    options?: PlatformCore.CustomFieldList;
    itemCostCount?: string;
    quantity?: string;
    serialNumbers?: string;
    cost?: number;
    amount?: number;
    taxAmount?: number;
    revRecSchedule?: PlatformCore.RecordRef;
    revRecStartDate?: string;
    revRecEndDate?: string;
    grossAmt?: number;
    tax1Amt?: number;
    taxCode?: PlatformCore.RecordRef;
    taxRate1?: number;
    taxRate2?: number;
};
export declare class CashSaleItemCost extends SoapMappingBase {
    apply?: boolean;
    doc?: number;
    line?: number;
    taxDetailsReference?: string;
    billedDate?: string;
    itemDisp?: string;
    memo?: string;
    jobDisp?: string;
    department?: string;
    clazz?: string;
    location?: string;
    unitDisp?: string;
    options?: PlatformCore.CustomFieldList;
    itemCostCount?: string;
    quantity?: string;
    serialNumbers?: string;
    cost?: number;
    amount?: number;
    taxAmount?: number;
    revRecSchedule?: PlatformCore.RecordRef;
    revRecStartDate?: string;
    revRecEndDate?: string;
    grossAmt?: number;
    tax1Amt?: number;
    taxCode?: PlatformCore.RecordRef;
    taxRate1?: number;
    taxRate2?: number;
    constructor(props: CashSaleItemCostProps);
}
export declare type EstimateItemListProps = {
    item?: EstimateItem[];
    replaceAll?: boolean;
};
export declare class EstimateItemList extends SoapMappingBase {
    item?: EstimateItem[];
    replaceAll?: boolean;
    constructor(props: EstimateItemListProps);
}
export declare type InvoiceShipGroupListProps = {
    shipGroup?: TransactionShipGroup[];
    replaceAll?: boolean;
};
export declare class InvoiceShipGroupList extends SoapMappingBase {
    shipGroup?: TransactionShipGroup[];
    replaceAll?: boolean;
    constructor(props: InvoiceShipGroupListProps);
}
export declare type InvoiceSalesTeamProps = {
    employee?: PlatformCore.RecordRef;
    salesRole?: PlatformCore.RecordRef;
    isPrimary?: boolean;
    contribution?: number;
};
export declare class InvoiceSalesTeam extends SoapMappingBase {
    employee?: PlatformCore.RecordRef;
    salesRole?: PlatformCore.RecordRef;
    isPrimary?: boolean;
    contribution?: number;
    constructor(props: InvoiceSalesTeamProps);
}
export declare type OpportunitySalesTeamListProps = {
    salesTeam?: OpportunitySalesTeam[];
    replaceAll?: boolean;
};
export declare class OpportunitySalesTeamList extends SoapMappingBase {
    salesTeam?: OpportunitySalesTeam[];
    replaceAll?: boolean;
    constructor(props: OpportunitySalesTeamListProps);
}
export declare type OpportunityProps = {
    customForm?: PlatformCore.RecordRef;
    currency?: PlatformCore.RecordRef;
    estimatedBudget?: number;
    entity?: PlatformCore.RecordRef;
    job?: PlatformCore.RecordRef;
    title?: string;
    tranId?: string;
    entityTaxRegNum?: PlatformCore.RecordRef;
    taxPointDate?: string;
    oneTime?: number;
    recurWeekly?: number;
    recurMonthly?: number;
    recurQuarterly?: number;
    recurAnnually?: number;
    source?: string;
    salesRep?: PlatformCore.RecordRef;
    contribPct?: string;
    partner?: PlatformCore.RecordRef;
    salesGroup?: PlatformCore.RecordRef;
    syncSalesTeams?: boolean;
    leadSource?: PlatformCore.RecordRef;
    entityStatus?: PlatformCore.RecordRef;
    probability?: number;
    tranDate?: string;
    expectedCloseDate?: string;
    daysOpen?: number;
    forecastType?: PlatformCore.RecordRef;
    currencyName?: string;
    exchangeRate?: number;
    projectedTotal?: number;
    rangeLow?: number;
    rangeHigh?: number;
    projAltSalesAmt?: number;
    altSalesRangeLow?: number;
    altSalesRangeHigh?: number;
    weightedTotal?: number;
    actionItem?: string;
    winLossReason?: PlatformCore.RecordRef;
    memo?: string;
    taxTotal?: number;
    isBudgetApproved?: boolean;
    tax2Total?: number;
    salesReadiness?: PlatformCore.RecordRef;
    totalCostEstimate?: number;
    buyingTimeFrame?: PlatformCore.RecordRef;
    estGrossProfit?: number;
    buyingReason?: PlatformCore.RecordRef;
    estGrossProfitPercent?: number;
    billingAddress?: PlatformCommon.Address;
    billAddressList?: PlatformCore.RecordRef;
    shippingAddress?: PlatformCommon.Address;
    shipIsResidential?: boolean;
    shipAddressList?: PlatformCore.RecordRef;
    clazz?: PlatformCore.RecordRef;
    closeDate?: string;
    createdDate?: string;
    lastModifiedDate?: string;
    nexus?: PlatformCore.RecordRef;
    subsidiaryTaxRegNum?: PlatformCore.RecordRef;
    taxRegOverride?: boolean;
    taxDetailsOverride?: boolean;
    department?: PlatformCore.RecordRef;
    location?: PlatformCore.RecordRef;
    subsidiary?: PlatformCore.RecordRef;
    status?: string;
    vatRegNum?: string;
    syncPartnerTeams?: boolean;
    salesTeamList?: OpportunitySalesTeamList;
    partnersList?: OpportunityPartnersList;
    itemList?: OpportunityItemList;
    competitorsList?: OpportunityCompetitorsList;
    accountingBookDetailList?: PlatformCommon.AccountingBookDetailList;
    taxDetailsList?: PlatformCommon.TaxDetailsList;
    customFieldList?: PlatformCore.CustomFieldList;
    internalId?: string;
    externalId?: string;
} & PlatformCore.RecordProps;
export declare class Opportunity extends PlatformCore.Record {
    customForm?: PlatformCore.RecordRef;
    currency?: PlatformCore.RecordRef;
    estimatedBudget?: number;
    entity?: PlatformCore.RecordRef;
    job?: PlatformCore.RecordRef;
    title?: string;
    tranId?: string;
    entityTaxRegNum?: PlatformCore.RecordRef;
    taxPointDate?: string;
    oneTime?: number;
    recurWeekly?: number;
    recurMonthly?: number;
    recurQuarterly?: number;
    recurAnnually?: number;
    source?: string;
    salesRep?: PlatformCore.RecordRef;
    contribPct?: string;
    partner?: PlatformCore.RecordRef;
    salesGroup?: PlatformCore.RecordRef;
    syncSalesTeams?: boolean;
    leadSource?: PlatformCore.RecordRef;
    entityStatus?: PlatformCore.RecordRef;
    probability?: number;
    tranDate?: string;
    expectedCloseDate?: string;
    daysOpen?: number;
    forecastType?: PlatformCore.RecordRef;
    currencyName?: string;
    exchangeRate?: number;
    projectedTotal?: number;
    rangeLow?: number;
    rangeHigh?: number;
    projAltSalesAmt?: number;
    altSalesRangeLow?: number;
    altSalesRangeHigh?: number;
    weightedTotal?: number;
    actionItem?: string;
    winLossReason?: PlatformCore.RecordRef;
    memo?: string;
    taxTotal?: number;
    isBudgetApproved?: boolean;
    tax2Total?: number;
    salesReadiness?: PlatformCore.RecordRef;
    totalCostEstimate?: number;
    buyingTimeFrame?: PlatformCore.RecordRef;
    estGrossProfit?: number;
    buyingReason?: PlatformCore.RecordRef;
    estGrossProfitPercent?: number;
    billingAddress?: PlatformCommon.Address;
    billAddressList?: PlatformCore.RecordRef;
    shippingAddress?: PlatformCommon.Address;
    shipIsResidential?: boolean;
    shipAddressList?: PlatformCore.RecordRef;
    clazz?: PlatformCore.RecordRef;
    closeDate?: string;
    createdDate?: string;
    lastModifiedDate?: string;
    nexus?: PlatformCore.RecordRef;
    subsidiaryTaxRegNum?: PlatformCore.RecordRef;
    taxRegOverride?: boolean;
    taxDetailsOverride?: boolean;
    department?: PlatformCore.RecordRef;
    location?: PlatformCore.RecordRef;
    subsidiary?: PlatformCore.RecordRef;
    status?: string;
    vatRegNum?: string;
    syncPartnerTeams?: boolean;
    salesTeamList?: OpportunitySalesTeamList;
    partnersList?: OpportunityPartnersList;
    itemList?: OpportunityItemList;
    competitorsList?: OpportunityCompetitorsList;
    accountingBookDetailList?: PlatformCommon.AccountingBookDetailList;
    taxDetailsList?: PlatformCommon.TaxDetailsList;
    customFieldList?: PlatformCore.CustomFieldList;
    internalId?: string;
    externalId?: string;
    constructor(props: OpportunityProps);
}
export declare type SalesOrderItemProps = {
    job?: PlatformCore.RecordRef;
    subscription?: PlatformCore.RecordRef;
    item?: PlatformCore.RecordRef;
    quantityAvailable?: number;
    expandItemGroup?: boolean;
    lineUniqueKey?: number;
    quantityOnHand?: number;
    quantity?: number;
    units?: PlatformCore.RecordRef;
    inventoryDetail?: PlatformCommon.InventoryDetail;
    description?: string;
    price?: PlatformCore.RecordRef;
    rate?: string;
    serialNumbers?: string;
    amount?: number;
    isTaxable?: boolean;
    commitInventory?: TransactionsSalesTypes.SalesOrderItemCommitInventory;
    orderPriority?: number;
    licenseCode?: string;
    options?: PlatformCore.CustomFieldList;
    department?: PlatformCore.RecordRef;
    clazz?: PlatformCore.RecordRef;
    location?: PlatformCore.RecordRef;
    createPo?: TransactionsSalesTypes.SalesOrderItemCreatePo;
    createdPo?: PlatformCore.RecordRef;
    altSalesAmt?: number;
    createWo?: boolean;
    poVendor?: PlatformCore.RecordRef;
    poCurrency?: string;
    poRate?: number;
    revRecSchedule?: PlatformCore.RecordRef;
    revRecStartDate?: string;
    revRecTermInMonths?: number;
    revRecEndDate?: string;
    deferRevRec?: boolean;
    isClosed?: boolean;
    itemFulfillmentChoice?: TransactionsSalesTypes.SalesOrderItemFulfillmentChoice;
    catchUpPeriod?: PlatformCore.RecordRef;
    billingSchedule?: PlatformCore.RecordRef;
    fromJob?: boolean;
    grossAmt?: number;
    taxAmount?: number;
    excludeFromRateRequest?: boolean;
    isEstimate?: boolean;
    inventoryLocation?: PlatformCore.RecordRef;
    inventorySubsidiary?: PlatformCore.RecordRef;
    line?: number;
    percentComplete?: number;
    costEstimateType?: PlatformCommonTypes.ItemCostEstimateType;
    costEstimate?: number;
    quantityBackOrdered?: number;
    quantityBilled?: number;
    quantityCommitted?: number;
    quantityFulfilled?: number;
    quantityPacked?: number;
    quantityPicked?: number;
    tax1Amt?: number;
    taxCode?: PlatformCore.RecordRef;
    taxRate1?: number;
    taxRate2?: number;
    giftCertFrom?: string;
    giftCertRecipientName?: string;
    giftCertRecipientEmail?: string;
    giftCertMessage?: string;
    giftCertNumber?: string;
    shipGroup?: number;
    itemIsFulfilled?: boolean;
    shipAddress?: PlatformCore.RecordRef;
    shipMethod?: PlatformCore.RecordRef;
    vsoeSopGroup?: PlatformCommonTypes.VsoeSopGroup;
    vsoeIsEstimate?: boolean;
    vsoePrice?: number;
    vsoeAmount?: number;
    vsoeAllocation?: number;
    vsoeDeferral?: PlatformCommonTypes.VsoeDeferral;
    vsoePermitDiscount?: PlatformCommonTypes.VsoePermitDiscount;
    vsoeDelivered?: boolean;
    expectedShipDate?: string;
    noAutoAssignLocation?: boolean;
    locationAutoAssigned?: boolean;
    taxDetailsReference?: string;
    chargeType?: PlatformCore.RecordRef;
    customFieldList?: PlatformCore.CustomFieldList;
};
export declare class SalesOrderItem extends SoapMappingBase {
    job?: PlatformCore.RecordRef;
    subscription?: PlatformCore.RecordRef;
    item?: PlatformCore.RecordRef;
    quantityAvailable?: number;
    expandItemGroup?: boolean;
    lineUniqueKey?: number;
    quantityOnHand?: number;
    quantity?: number;
    units?: PlatformCore.RecordRef;
    inventoryDetail?: PlatformCommon.InventoryDetail;
    description?: string;
    price?: PlatformCore.RecordRef;
    rate?: string;
    serialNumbers?: string;
    amount?: number;
    isTaxable?: boolean;
    commitInventory?: TransactionsSalesTypes.SalesOrderItemCommitInventory;
    orderPriority?: number;
    licenseCode?: string;
    options?: PlatformCore.CustomFieldList;
    department?: PlatformCore.RecordRef;
    clazz?: PlatformCore.RecordRef;
    location?: PlatformCore.RecordRef;
    createPo?: TransactionsSalesTypes.SalesOrderItemCreatePo;
    createdPo?: PlatformCore.RecordRef;
    altSalesAmt?: number;
    createWo?: boolean;
    poVendor?: PlatformCore.RecordRef;
    poCurrency?: string;
    poRate?: number;
    revRecSchedule?: PlatformCore.RecordRef;
    revRecStartDate?: string;
    revRecTermInMonths?: number;
    revRecEndDate?: string;
    deferRevRec?: boolean;
    isClosed?: boolean;
    itemFulfillmentChoice?: TransactionsSalesTypes.SalesOrderItemFulfillmentChoice;
    catchUpPeriod?: PlatformCore.RecordRef;
    billingSchedule?: PlatformCore.RecordRef;
    fromJob?: boolean;
    grossAmt?: number;
    taxAmount?: number;
    excludeFromRateRequest?: boolean;
    isEstimate?: boolean;
    inventoryLocation?: PlatformCore.RecordRef;
    inventorySubsidiary?: PlatformCore.RecordRef;
    line?: number;
    percentComplete?: number;
    costEstimateType?: PlatformCommonTypes.ItemCostEstimateType;
    costEstimate?: number;
    quantityBackOrdered?: number;
    quantityBilled?: number;
    quantityCommitted?: number;
    quantityFulfilled?: number;
    quantityPacked?: number;
    quantityPicked?: number;
    tax1Amt?: number;
    taxCode?: PlatformCore.RecordRef;
    taxRate1?: number;
    taxRate2?: number;
    giftCertFrom?: string;
    giftCertRecipientName?: string;
    giftCertRecipientEmail?: string;
    giftCertMessage?: string;
    giftCertNumber?: string;
    shipGroup?: number;
    itemIsFulfilled?: boolean;
    shipAddress?: PlatformCore.RecordRef;
    shipMethod?: PlatformCore.RecordRef;
    vsoeSopGroup?: PlatformCommonTypes.VsoeSopGroup;
    vsoeIsEstimate?: boolean;
    vsoePrice?: number;
    vsoeAmount?: number;
    vsoeAllocation?: number;
    vsoeDeferral?: PlatformCommonTypes.VsoeDeferral;
    vsoePermitDiscount?: PlatformCommonTypes.VsoePermitDiscount;
    vsoeDelivered?: boolean;
    expectedShipDate?: string;
    noAutoAssignLocation?: boolean;
    locationAutoAssigned?: boolean;
    taxDetailsReference?: string;
    chargeType?: PlatformCore.RecordRef;
    customFieldList?: PlatformCore.CustomFieldList;
    constructor(props: SalesOrderItemProps);
}
export declare type CashSaleTimeListProps = {
    time?: CashSaleTime[];
    replaceAll?: boolean;
};
export declare class CashSaleTimeList extends SoapMappingBase {
    time?: CashSaleTime[];
    replaceAll?: boolean;
    constructor(props: CashSaleTimeListProps);
}
export declare type PromotionsListProps = {
    promotions?: Promotions[];
    replaceAll?: boolean;
};
export declare class PromotionsList extends SoapMappingBase {
    promotions?: Promotions[];
    replaceAll?: boolean;
    constructor(props: PromotionsListProps);
}
export declare type TransactionSearchRowProps = {
    basic?: PlatformCommon.TransactionSearchRowBasic;
    accountJoin?: PlatformCommon.AccountSearchRowBasic;
    accountingPeriodJoin?: PlatformCommon.AccountingPeriodSearchRowBasic;
    accountingTransactionJoin?: PlatformCommon.AccountingTransactionSearchRowBasic;
    advanceToApplyAccountJoin?: PlatformCommon.AccountSearchRowBasic;
    appliedToTransactionJoin?: PlatformCommon.TransactionSearchRowBasic;
    applyingTransactionJoin?: PlatformCommon.TransactionSearchRowBasic;
    billingAddressJoin?: PlatformCommon.AddressSearchRowBasic;
    billingTransactionJoin?: PlatformCommon.TransactionSearchRowBasic;
    binNumberJoin?: PlatformCommon.BinSearchRowBasic;
    bomJoin?: PlatformCommon.BomSearchRowBasic;
    bomRevisionJoin?: PlatformCommon.BomRevisionSearchRowBasic;
    callJoin?: PlatformCommon.PhoneCallSearchRowBasic;
    caseJoin?: PlatformCommon.SupportCaseSearchRowBasic;
    classJoin?: PlatformCommon.ClassificationSearchRowBasic;
    cogsPurchaseJoin?: PlatformCommon.TransactionSearchRowBasic;
    cogsSaleJoin?: PlatformCommon.TransactionSearchRowBasic;
    contactPrimaryJoin?: PlatformCommon.ContactSearchRowBasic;
    createdFromJoin?: PlatformCommon.TransactionSearchRowBasic;
    customerJoin?: PlatformCommon.CustomerSearchRowBasic;
    customerMainJoin?: PlatformCommon.CustomerSearchRowBasic;
    departmentJoin?: PlatformCommon.DepartmentSearchRowBasic;
    depositTransactionJoin?: PlatformCommon.TransactionSearchRowBasic;
    employeeJoin?: PlatformCommon.EmployeeSearchRowBasic;
    eventJoin?: PlatformCommon.CalendarEventSearchRowBasic;
    expenseCategoryJoin?: PlatformCommon.ExpenseCategorySearchRowBasic;
    fileJoin?: PlatformCommon.FileSearchRowBasic;
    fromLocationJoin?: PlatformCommon.LocationSearchRowBasic;
    fulfillingTransactionJoin?: PlatformCommon.TransactionSearchRowBasic;
    headerBillingAccountJoin?: PlatformCommon.BillingAccountSearchRowBasic;
    installmentJoin?: PlatformCommon.InstallmentSearchRowBasic;
    inventoryDetailJoin?: PlatformCommon.InventoryDetailSearchRowBasic;
    itemJoin?: PlatformCommon.ItemSearchRowBasic;
    itemNumberJoin?: PlatformCommon.InventoryNumberSearchRowBasic;
    jobJoin?: PlatformCommon.JobSearchRowBasic;
    jobMainJoin?: PlatformCommon.JobSearchRowBasic;
    leadSourceJoin?: PlatformCommon.CampaignSearchRowBasic;
    lineBillingAccountJoin?: PlatformCommon.BillingAccountSearchRowBasic;
    lineFileJoin?: PlatformCommon.FileSearchRowBasic;
    locationJoin?: PlatformCommon.LocationSearchRowBasic;
    manufacturingOperationTaskJoin?: PlatformCommon.ManufacturingOperationTaskSearchRowBasic;
    messagesJoin?: PlatformCommon.MessageSearchRowBasic;
    nextApproverJoin?: PlatformCommon.EntitySearchRowBasic;
    opportunityJoin?: PlatformCommon.OpportunitySearchRowBasic;
    paidTransactionJoin?: PlatformCommon.TransactionSearchRowBasic;
    partnerJoin?: PlatformCommon.PartnerSearchRowBasic;
    payingTransactionJoin?: PlatformCommon.TransactionSearchRowBasic;
    payrollItemJoin?: PlatformCommon.PayrollItemSearchRowBasic;
    projectTaskJoin?: PlatformCommon.ProjectTaskSearchRowBasic;
    purchaseOrderJoin?: PlatformCommon.TransactionSearchRowBasic;
    requestorJoin?: PlatformCommon.EmployeeSearchRowBasic;
    revCommittingTransactionJoin?: PlatformCommon.TransactionSearchRowBasic;
    revisionJoin?: PlatformCommon.ItemRevisionSearchRowBasic;
    revRecScheduleJoin?: PlatformCommon.RevRecScheduleSearchRowBasic;
    rgPostingTransactionJoin?: PlatformCommon.TransactionSearchRowBasic;
    salesOrderJoin?: PlatformCommon.TransactionSearchRowBasic;
    salesRepJoin?: PlatformCommon.EmployeeSearchRowBasic;
    shippingAddressJoin?: PlatformCommon.AddressSearchRowBasic;
    subsidiaryJoin?: PlatformCommon.SubsidiarySearchRowBasic;
    taskJoin?: PlatformCommon.TaskSearchRowBasic;
    taxCodeJoin?: PlatformCommon.SalesTaxItemSearchRowBasic;
    taxDetailJoin?: PlatformCommon.TaxDetailSearchRowBasic;
    taxItemJoin?: PlatformCommon.SalesTaxItemSearchRowBasic;
    timeJoin?: PlatformCommon.TimeBillSearchRowBasic;
    toLocationJoin?: PlatformCommon.LocationSearchRowBasic;
    userJoin?: PlatformCommon.EmployeeSearchRowBasic;
    userNotesJoin?: PlatformCommon.NoteSearchRowBasic;
    vendorJoin?: PlatformCommon.VendorSearchRowBasic;
    vendorLineJoin?: PlatformCommon.VendorSearchRowBasic;
    customSearchJoin?: PlatformCommon.CustomSearchRowBasic[];
};
export declare class TransactionSearchRow extends PlatformCore.SearchRow {
    basic?: PlatformCommon.TransactionSearchRowBasic;
    accountJoin?: PlatformCommon.AccountSearchRowBasic;
    accountingPeriodJoin?: PlatformCommon.AccountingPeriodSearchRowBasic;
    accountingTransactionJoin?: PlatformCommon.AccountingTransactionSearchRowBasic;
    advanceToApplyAccountJoin?: PlatformCommon.AccountSearchRowBasic;
    appliedToTransactionJoin?: PlatformCommon.TransactionSearchRowBasic;
    applyingTransactionJoin?: PlatformCommon.TransactionSearchRowBasic;
    billingAddressJoin?: PlatformCommon.AddressSearchRowBasic;
    billingTransactionJoin?: PlatformCommon.TransactionSearchRowBasic;
    binNumberJoin?: PlatformCommon.BinSearchRowBasic;
    bomJoin?: PlatformCommon.BomSearchRowBasic;
    bomRevisionJoin?: PlatformCommon.BomRevisionSearchRowBasic;
    callJoin?: PlatformCommon.PhoneCallSearchRowBasic;
    caseJoin?: PlatformCommon.SupportCaseSearchRowBasic;
    classJoin?: PlatformCommon.ClassificationSearchRowBasic;
    cogsPurchaseJoin?: PlatformCommon.TransactionSearchRowBasic;
    cogsSaleJoin?: PlatformCommon.TransactionSearchRowBasic;
    contactPrimaryJoin?: PlatformCommon.ContactSearchRowBasic;
    createdFromJoin?: PlatformCommon.TransactionSearchRowBasic;
    customerJoin?: PlatformCommon.CustomerSearchRowBasic;
    customerMainJoin?: PlatformCommon.CustomerSearchRowBasic;
    departmentJoin?: PlatformCommon.DepartmentSearchRowBasic;
    depositTransactionJoin?: PlatformCommon.TransactionSearchRowBasic;
    employeeJoin?: PlatformCommon.EmployeeSearchRowBasic;
    eventJoin?: PlatformCommon.CalendarEventSearchRowBasic;
    expenseCategoryJoin?: PlatformCommon.ExpenseCategorySearchRowBasic;
    fileJoin?: PlatformCommon.FileSearchRowBasic;
    fromLocationJoin?: PlatformCommon.LocationSearchRowBasic;
    fulfillingTransactionJoin?: PlatformCommon.TransactionSearchRowBasic;
    headerBillingAccountJoin?: PlatformCommon.BillingAccountSearchRowBasic;
    installmentJoin?: PlatformCommon.InstallmentSearchRowBasic;
    inventoryDetailJoin?: PlatformCommon.InventoryDetailSearchRowBasic;
    itemJoin?: PlatformCommon.ItemSearchRowBasic;
    itemNumberJoin?: PlatformCommon.InventoryNumberSearchRowBasic;
    jobJoin?: PlatformCommon.JobSearchRowBasic;
    jobMainJoin?: PlatformCommon.JobSearchRowBasic;
    leadSourceJoin?: PlatformCommon.CampaignSearchRowBasic;
    lineBillingAccountJoin?: PlatformCommon.BillingAccountSearchRowBasic;
    lineFileJoin?: PlatformCommon.FileSearchRowBasic;
    locationJoin?: PlatformCommon.LocationSearchRowBasic;
    manufacturingOperationTaskJoin?: PlatformCommon.ManufacturingOperationTaskSearchRowBasic;
    messagesJoin?: PlatformCommon.MessageSearchRowBasic;
    nextApproverJoin?: PlatformCommon.EntitySearchRowBasic;
    opportunityJoin?: PlatformCommon.OpportunitySearchRowBasic;
    paidTransactionJoin?: PlatformCommon.TransactionSearchRowBasic;
    partnerJoin?: PlatformCommon.PartnerSearchRowBasic;
    payingTransactionJoin?: PlatformCommon.TransactionSearchRowBasic;
    payrollItemJoin?: PlatformCommon.PayrollItemSearchRowBasic;
    projectTaskJoin?: PlatformCommon.ProjectTaskSearchRowBasic;
    purchaseOrderJoin?: PlatformCommon.TransactionSearchRowBasic;
    requestorJoin?: PlatformCommon.EmployeeSearchRowBasic;
    revCommittingTransactionJoin?: PlatformCommon.TransactionSearchRowBasic;
    revisionJoin?: PlatformCommon.ItemRevisionSearchRowBasic;
    revRecScheduleJoin?: PlatformCommon.RevRecScheduleSearchRowBasic;
    rgPostingTransactionJoin?: PlatformCommon.TransactionSearchRowBasic;
    salesOrderJoin?: PlatformCommon.TransactionSearchRowBasic;
    salesRepJoin?: PlatformCommon.EmployeeSearchRowBasic;
    shippingAddressJoin?: PlatformCommon.AddressSearchRowBasic;
    subsidiaryJoin?: PlatformCommon.SubsidiarySearchRowBasic;
    taskJoin?: PlatformCommon.TaskSearchRowBasic;
    taxCodeJoin?: PlatformCommon.SalesTaxItemSearchRowBasic;
    taxDetailJoin?: PlatformCommon.TaxDetailSearchRowBasic;
    taxItemJoin?: PlatformCommon.SalesTaxItemSearchRowBasic;
    timeJoin?: PlatformCommon.TimeBillSearchRowBasic;
    toLocationJoin?: PlatformCommon.LocationSearchRowBasic;
    userJoin?: PlatformCommon.EmployeeSearchRowBasic;
    userNotesJoin?: PlatformCommon.NoteSearchRowBasic;
    vendorJoin?: PlatformCommon.VendorSearchRowBasic;
    vendorLineJoin?: PlatformCommon.VendorSearchRowBasic;
    customSearchJoin?: PlatformCommon.CustomSearchRowBasic[];
    constructor(props: TransactionSearchRowProps);
}
export declare type OpportunityCompetitorsProps = {
    competitor?: PlatformCore.RecordRef;
    url?: string;
    notes?: string;
    strategy?: string;
    winner?: boolean;
};
export declare class OpportunityCompetitors extends SoapMappingBase {
    competitor?: PlatformCore.RecordRef;
    url?: string;
    notes?: string;
    strategy?: string;
    winner?: boolean;
    constructor(props: OpportunityCompetitorsProps);
}
export declare type CashSaleItemCostListProps = {
    itemCost?: CashSaleItemCost[];
    replaceAll?: boolean;
};
export declare class CashSaleItemCostList extends SoapMappingBase {
    itemCost?: CashSaleItemCost[];
    replaceAll?: boolean;
    constructor(props: CashSaleItemCostListProps);
}
export declare type SalesOrderSalesTeamListProps = {
    salesTeam?: SalesOrderSalesTeam[];
    replaceAll?: boolean;
};
export declare class SalesOrderSalesTeamList extends SoapMappingBase {
    salesTeam?: SalesOrderSalesTeam[];
    replaceAll?: boolean;
    constructor(props: SalesOrderSalesTeamListProps);
}
export declare type SalesOrderPartnersListProps = {
    partners?: PlatformCommon.Partners[];
    replaceAll?: boolean;
};
export declare class SalesOrderPartnersList extends SoapMappingBase {
    partners?: PlatformCommon.Partners[];
    replaceAll?: boolean;
    constructor(props: SalesOrderPartnersListProps);
}
export declare type AccountingTransactionSearchAdvancedProps = {
    criteria?: AccountingTransactionSearch;
    columns?: AccountingTransactionSearchRow;
    savedSearchId?: string;
    savedSearchScriptId?: string;
};
export declare class AccountingTransactionSearchAdvanced extends PlatformCore.SearchRecord {
    criteria?: AccountingTransactionSearch;
    columns?: AccountingTransactionSearchRow;
    savedSearchId?: string;
    savedSearchScriptId?: string;
    constructor(props: AccountingTransactionSearchAdvancedProps);
}
export declare type OpportunityItemListProps = {
    item?: OpportunityItem[];
    replaceAll?: boolean;
};
export declare class OpportunityItemList extends SoapMappingBase {
    item?: OpportunityItem[];
    replaceAll?: boolean;
    constructor(props: OpportunityItemListProps);
}
export declare type TransactionSearchProps = {
    basic?: PlatformCommon.TransactionSearchBasic;
    accountJoin?: PlatformCommon.AccountSearchBasic;
    accountingPeriodJoin?: PlatformCommon.AccountingPeriodSearchBasic;
    accountingTransactionJoin?: PlatformCommon.AccountingTransactionSearchBasic;
    advanceToApplyAccountJoin?: PlatformCommon.AccountSearchBasic;
    appliedToTransactionJoin?: PlatformCommon.TransactionSearchBasic;
    applyingTransactionJoin?: PlatformCommon.TransactionSearchBasic;
    billingAddressJoin?: PlatformCommon.AddressSearchBasic;
    billingTransactionJoin?: PlatformCommon.TransactionSearchBasic;
    binNumberJoin?: PlatformCommon.BinSearchBasic;
    bomJoin?: PlatformCommon.BomSearchBasic;
    bomRevisionJoin?: PlatformCommon.BomRevisionSearchBasic;
    callJoin?: PlatformCommon.PhoneCallSearchBasic;
    caseJoin?: PlatformCommon.SupportCaseSearchBasic;
    classJoin?: PlatformCommon.ClassificationSearchBasic;
    cogsPurchaseJoin?: PlatformCommon.TransactionSearchBasic;
    cogsSaleJoin?: PlatformCommon.TransactionSearchBasic;
    contactPrimaryJoin?: PlatformCommon.ContactSearchBasic;
    createdFromJoin?: PlatformCommon.TransactionSearchBasic;
    customerJoin?: PlatformCommon.CustomerSearchBasic;
    customerMainJoin?: PlatformCommon.CustomerSearchBasic;
    departmentJoin?: PlatformCommon.DepartmentSearchBasic;
    depositTransactionJoin?: PlatformCommon.TransactionSearchBasic;
    employeeJoin?: PlatformCommon.EmployeeSearchBasic;
    eventJoin?: PlatformCommon.CalendarEventSearchBasic;
    expenseCategoryJoin?: PlatformCommon.ExpenseCategorySearchBasic;
    fileJoin?: PlatformCommon.FileSearchBasic;
    fromLocationJoin?: PlatformCommon.LocationSearchBasic;
    fulfillingTransactionJoin?: PlatformCommon.TransactionSearchBasic;
    headerBillingAccountJoin?: PlatformCommon.BillingAccountSearchBasic;
    installmentJoin?: PlatformCommon.InstallmentSearchBasic;
    inventoryDetailJoin?: PlatformCommon.InventoryDetailSearchBasic;
    itemJoin?: PlatformCommon.ItemSearchBasic;
    itemNumberJoin?: PlatformCommon.InventoryNumberSearchBasic;
    jobJoin?: PlatformCommon.JobSearchBasic;
    jobMainJoin?: PlatformCommon.JobSearchBasic;
    leadSourceJoin?: PlatformCommon.CampaignSearchBasic;
    lineBillingAccountJoin?: PlatformCommon.BillingAccountSearchBasic;
    lineFileJoin?: PlatformCommon.FileSearchBasic;
    locationJoin?: PlatformCommon.LocationSearchBasic;
    manufacturingOperationTaskJoin?: PlatformCommon.ManufacturingOperationTaskSearchBasic;
    messagesJoin?: PlatformCommon.MessageSearchBasic;
    nextApproverJoin?: PlatformCommon.EntitySearchBasic;
    opportunityJoin?: PlatformCommon.OpportunitySearchBasic;
    paidTransactionJoin?: PlatformCommon.TransactionSearchBasic;
    partnerJoin?: PlatformCommon.PartnerSearchBasic;
    payingTransactionJoin?: PlatformCommon.TransactionSearchBasic;
    payrollItemJoin?: PlatformCommon.PayrollItemSearchBasic;
    projectTaskJoin?: PlatformCommon.ProjectTaskSearchBasic;
    purchaseOrderJoin?: PlatformCommon.TransactionSearchBasic;
    requestorJoin?: PlatformCommon.EmployeeSearchBasic;
    revCommittingTransactionJoin?: PlatformCommon.TransactionSearchBasic;
    revisionJoin?: PlatformCommon.ItemRevisionSearchBasic;
    revRecScheduleJoin?: PlatformCommon.RevRecScheduleSearchBasic;
    rgPostingTransactionJoin?: PlatformCommon.TransactionSearchBasic;
    salesOrderJoin?: PlatformCommon.TransactionSearchBasic;
    salesRepJoin?: PlatformCommon.EmployeeSearchBasic;
    shippingAddressJoin?: PlatformCommon.AddressSearchBasic;
    subsidiaryJoin?: PlatformCommon.SubsidiarySearchBasic;
    taskJoin?: PlatformCommon.TaskSearchBasic;
    taxCodeJoin?: PlatformCommon.SalesTaxItemSearchBasic;
    taxDetailJoin?: PlatformCommon.TaxDetailSearchBasic;
    taxItemJoin?: PlatformCommon.SalesTaxItemSearchBasic;
    timeJoin?: PlatformCommon.TimeBillSearchBasic;
    toLocationJoin?: PlatformCommon.LocationSearchBasic;
    userJoin?: PlatformCommon.EmployeeSearchBasic;
    userNotesJoin?: PlatformCommon.NoteSearchBasic;
    vendorJoin?: PlatformCommon.VendorSearchBasic;
    vendorLineJoin?: PlatformCommon.VendorSearchBasic;
    customSearchJoin?: PlatformCommon.CustomSearchJoin[];
};
export declare class TransactionSearch extends PlatformCore.SearchRecord {
    basic?: PlatformCommon.TransactionSearchBasic;
    accountJoin?: PlatformCommon.AccountSearchBasic;
    accountingPeriodJoin?: PlatformCommon.AccountingPeriodSearchBasic;
    accountingTransactionJoin?: PlatformCommon.AccountingTransactionSearchBasic;
    advanceToApplyAccountJoin?: PlatformCommon.AccountSearchBasic;
    appliedToTransactionJoin?: PlatformCommon.TransactionSearchBasic;
    applyingTransactionJoin?: PlatformCommon.TransactionSearchBasic;
    billingAddressJoin?: PlatformCommon.AddressSearchBasic;
    billingTransactionJoin?: PlatformCommon.TransactionSearchBasic;
    binNumberJoin?: PlatformCommon.BinSearchBasic;
    bomJoin?: PlatformCommon.BomSearchBasic;
    bomRevisionJoin?: PlatformCommon.BomRevisionSearchBasic;
    callJoin?: PlatformCommon.PhoneCallSearchBasic;
    caseJoin?: PlatformCommon.SupportCaseSearchBasic;
    classJoin?: PlatformCommon.ClassificationSearchBasic;
    cogsPurchaseJoin?: PlatformCommon.TransactionSearchBasic;
    cogsSaleJoin?: PlatformCommon.TransactionSearchBasic;
    contactPrimaryJoin?: PlatformCommon.ContactSearchBasic;
    createdFromJoin?: PlatformCommon.TransactionSearchBasic;
    customerJoin?: PlatformCommon.CustomerSearchBasic;
    customerMainJoin?: PlatformCommon.CustomerSearchBasic;
    departmentJoin?: PlatformCommon.DepartmentSearchBasic;
    depositTransactionJoin?: PlatformCommon.TransactionSearchBasic;
    employeeJoin?: PlatformCommon.EmployeeSearchBasic;
    eventJoin?: PlatformCommon.CalendarEventSearchBasic;
    expenseCategoryJoin?: PlatformCommon.ExpenseCategorySearchBasic;
    fileJoin?: PlatformCommon.FileSearchBasic;
    fromLocationJoin?: PlatformCommon.LocationSearchBasic;
    fulfillingTransactionJoin?: PlatformCommon.TransactionSearchBasic;
    headerBillingAccountJoin?: PlatformCommon.BillingAccountSearchBasic;
    installmentJoin?: PlatformCommon.InstallmentSearchBasic;
    inventoryDetailJoin?: PlatformCommon.InventoryDetailSearchBasic;
    itemJoin?: PlatformCommon.ItemSearchBasic;
    itemNumberJoin?: PlatformCommon.InventoryNumberSearchBasic;
    jobJoin?: PlatformCommon.JobSearchBasic;
    jobMainJoin?: PlatformCommon.JobSearchBasic;
    leadSourceJoin?: PlatformCommon.CampaignSearchBasic;
    lineBillingAccountJoin?: PlatformCommon.BillingAccountSearchBasic;
    lineFileJoin?: PlatformCommon.FileSearchBasic;
    locationJoin?: PlatformCommon.LocationSearchBasic;
    manufacturingOperationTaskJoin?: PlatformCommon.ManufacturingOperationTaskSearchBasic;
    messagesJoin?: PlatformCommon.MessageSearchBasic;
    nextApproverJoin?: PlatformCommon.EntitySearchBasic;
    opportunityJoin?: PlatformCommon.OpportunitySearchBasic;
    paidTransactionJoin?: PlatformCommon.TransactionSearchBasic;
    partnerJoin?: PlatformCommon.PartnerSearchBasic;
    payingTransactionJoin?: PlatformCommon.TransactionSearchBasic;
    payrollItemJoin?: PlatformCommon.PayrollItemSearchBasic;
    projectTaskJoin?: PlatformCommon.ProjectTaskSearchBasic;
    purchaseOrderJoin?: PlatformCommon.TransactionSearchBasic;
    requestorJoin?: PlatformCommon.EmployeeSearchBasic;
    revCommittingTransactionJoin?: PlatformCommon.TransactionSearchBasic;
    revisionJoin?: PlatformCommon.ItemRevisionSearchBasic;
    revRecScheduleJoin?: PlatformCommon.RevRecScheduleSearchBasic;
    rgPostingTransactionJoin?: PlatformCommon.TransactionSearchBasic;
    salesOrderJoin?: PlatformCommon.TransactionSearchBasic;
    salesRepJoin?: PlatformCommon.EmployeeSearchBasic;
    shippingAddressJoin?: PlatformCommon.AddressSearchBasic;
    subsidiaryJoin?: PlatformCommon.SubsidiarySearchBasic;
    taskJoin?: PlatformCommon.TaskSearchBasic;
    taxCodeJoin?: PlatformCommon.SalesTaxItemSearchBasic;
    taxDetailJoin?: PlatformCommon.TaxDetailSearchBasic;
    taxItemJoin?: PlatformCommon.SalesTaxItemSearchBasic;
    timeJoin?: PlatformCommon.TimeBillSearchBasic;
    toLocationJoin?: PlatformCommon.LocationSearchBasic;
    userJoin?: PlatformCommon.EmployeeSearchBasic;
    userNotesJoin?: PlatformCommon.NoteSearchBasic;
    vendorJoin?: PlatformCommon.VendorSearchBasic;
    vendorLineJoin?: PlatformCommon.VendorSearchBasic;
    customSearchJoin?: PlatformCommon.CustomSearchJoin[];
    constructor(props: TransactionSearchProps);
}
export declare type CashSaleProps = {
    createdDate?: string;
    lastModifiedDate?: string;
    nexus?: PlatformCore.RecordRef;
    subsidiaryTaxRegNum?: PlatformCore.RecordRef;
    taxRegOverride?: boolean;
    taxDetailsOverride?: boolean;
    customForm?: PlatformCore.RecordRef;
    entity?: PlatformCore.RecordRef;
    billingAccount?: PlatformCore.RecordRef;
    recurringBill?: boolean;
    tranDate?: string;
    tranId?: string;
    entityTaxRegNum?: PlatformCore.RecordRef;
    taxPointDate?: string;
    source?: string;
    postingPeriod?: PlatformCore.RecordRef;
    createdFrom?: PlatformCore.RecordRef;
    opportunity?: PlatformCore.RecordRef;
    department?: PlatformCore.RecordRef;
    clazz?: PlatformCore.RecordRef;
    location?: PlatformCore.RecordRef;
    subsidiary?: PlatformCore.RecordRef;
    salesRep?: PlatformCore.RecordRef;
    contribPct?: string;
    partner?: PlatformCore.RecordRef;
    leadSource?: PlatformCore.RecordRef;
    startDate?: string;
    endDate?: string;
    otherRefNum?: string;
    memo?: string;
    salesEffectiveDate?: string;
    excludeCommission?: boolean;
    revRecSchedule?: PlatformCore.RecordRef;
    undepFunds?: boolean;
    canHaveStackable?: boolean;
    currency?: PlatformCore.RecordRef;
    account?: PlatformCore.RecordRef;
    revRecStartDate?: string;
    revRecEndDate?: string;
    totalCostEstimate?: number;
    estGrossProfit?: number;
    estGrossProfitPercent?: number;
    exchangeRate?: number;
    currencyName?: string;
    promoCode?: PlatformCore.RecordRef;
    discountItem?: PlatformCore.RecordRef;
    discountRate?: string;
    isTaxable?: boolean;
    taxItem?: PlatformCore.RecordRef;
    taxRate?: number;
    toBePrinted?: boolean;
    toBeEmailed?: boolean;
    toBeFaxed?: boolean;
    fax?: string;
    messageSel?: PlatformCore.RecordRef;
    message?: string;
    paymentOption?: PlatformCore.RecordRef;
    inputAuthCode?: string;
    inputReferenceCode?: string;
    checkNumber?: string;
    paymentCardCsc?: string;
    paymentProcessingProfile?: PlatformCore.RecordRef;
    handlingMode?: TransactionsSalesTypes.CashSaleHandlingMode;
    outputAuthCode?: string;
    outputReferenceCode?: string;
    paymentOperation?: TransactionsSalesTypes.CashSalePaymentOperation;
    dynamicDescriptor?: string;
    billingAddress?: PlatformCommon.Address;
    billAddressList?: PlatformCore.RecordRef;
    shippingAddress?: PlatformCommon.Address;
    shipIsResidential?: boolean;
    shipAddressList?: PlatformCore.RecordRef;
    fob?: string;
    shipDate?: string;
    shipMethod?: PlatformCore.RecordRef;
    shippingCost?: number;
    shippingTax1Rate?: number;
    shippingTax2Rate?: string;
    shippingTaxCode?: PlatformCore.RecordRef;
    handlingTaxCode?: PlatformCore.RecordRef;
    handlingTax1Rate?: number;
    handlingCost?: number;
    handlingTax2Rate?: string;
    linkedTrackingNumbers?: string;
    trackingNumbers?: string;
    salesGroup?: PlatformCore.RecordRef;
    revenueStatus?: PlatformCommonTypes.RevenueStatus;
    recognizedRevenue?: number;
    deferredRevenue?: number;
    revRecOnRevCommitment?: boolean;
    syncSalesTeams?: boolean;
    paymentMethod?: PlatformCore.RecordRef;
    payPalStatus?: string;
    creditCard?: PlatformCore.RecordRef;
    ccNumber?: string;
    ccExpireDate?: string;
    ccName?: string;
    ccStreet?: string;
    ccZipCode?: string;
    creditCardProcessor?: PlatformCore.RecordRef;
    ccApproved?: boolean;
    authCode?: string;
    ccAvsStreetMatch?: PlatformCommonTypes.AvsMatchCode;
    ccAvsZipMatch?: PlatformCommonTypes.AvsMatchCode;
    isRecurringPayment?: boolean;
    payPalTranId?: string;
    subTotal?: number;
    ccIsPurchaseCardBin?: boolean;
    ignoreAvs?: boolean;
    ccProcessAsPurchaseCard?: boolean;
    itemCostDiscount?: PlatformCore.RecordRef;
    itemCostDiscRate?: string;
    itemCostDiscAmount?: number;
    itemCostTaxRate1?: number;
    itemCostTaxRate2?: number;
    itemCostDiscTaxable?: boolean;
    itemCostTaxCode?: PlatformCore.RecordRef;
    itemCostDiscTax1Amt?: number;
    itemCostDiscPrint?: boolean;
    expCostDiscount?: PlatformCore.RecordRef;
    expCostDiscRate?: string;
    expCostDiscAmount?: number;
    expCostDiscTaxable?: boolean;
    expCostDiscprint?: boolean;
    expCostTaxRate1?: number;
    timeDiscount?: PlatformCore.RecordRef;
    expCostTaxCode?: PlatformCore.RecordRef;
    timeDiscRate?: string;
    expCostTaxRate2?: number;
    expCostDiscTax1Amt?: number;
    timeDiscAmount?: number;
    timeDiscTaxable?: boolean;
    timeDiscPrint?: boolean;
    discountTotal?: number;
    taxTotal?: number;
    timeTaxRate1?: number;
    altShippingCost?: number;
    timeTaxCode?: PlatformCore.RecordRef;
    altHandlingCost?: number;
    total?: number;
    timeDiscTax1Amt?: number;
    ccSecurityCode?: string;
    timeTaxRate2?: number;
    ccSecurityCodeMatch?: PlatformCommonTypes.AvsMatchCode;
    chargeIt?: boolean;
    debitCardIssueNo?: string;
    threeDStatusCode?: string;
    pnRefNum?: string;
    paypalAuthId?: string;
    status?: string;
    paypalProcess?: boolean;
    job?: PlatformCore.RecordRef;
    billingSchedule?: PlatformCore.RecordRef;
    email?: string;
    tax2Total?: number;
    validFrom?: string;
    vatRegNum?: string;
    giftCertApplied?: number;
    tranIsVsoeBundle?: boolean;
    vsoeAutoCalc?: boolean;
    syncPartnerTeams?: boolean;
    salesTeamList?: CashSaleSalesTeamList;
    partnersList?: CashSalePartnersList;
    itemList?: CashSaleItemList;
    accountingBookDetailList?: PlatformCommon.AccountingBookDetailList;
    itemCostList?: CashSaleItemCostList;
    giftCertRedemptionList?: PlatformCommon.GiftCertRedemptionList;
    promotionsList?: PromotionsList;
    expCostList?: CashSaleExpCostList;
    timeList?: CashSaleTimeList;
    shipGroupList?: CashSaleShipGroupList;
    taxDetailsList?: PlatformCommon.TaxDetailsList;
    customFieldList?: PlatformCore.CustomFieldList;
    internalId?: string;
    externalId?: string;
} & PlatformCore.RecordProps;
export declare class CashSale extends PlatformCore.Record {
    createdDate?: string;
    lastModifiedDate?: string;
    nexus?: PlatformCore.RecordRef;
    subsidiaryTaxRegNum?: PlatformCore.RecordRef;
    taxRegOverride?: boolean;
    taxDetailsOverride?: boolean;
    customForm?: PlatformCore.RecordRef;
    entity?: PlatformCore.RecordRef;
    billingAccount?: PlatformCore.RecordRef;
    recurringBill?: boolean;
    tranDate?: string;
    tranId?: string;
    entityTaxRegNum?: PlatformCore.RecordRef;
    taxPointDate?: string;
    source?: string;
    postingPeriod?: PlatformCore.RecordRef;
    createdFrom?: PlatformCore.RecordRef;
    opportunity?: PlatformCore.RecordRef;
    department?: PlatformCore.RecordRef;
    clazz?: PlatformCore.RecordRef;
    location?: PlatformCore.RecordRef;
    subsidiary?: PlatformCore.RecordRef;
    salesRep?: PlatformCore.RecordRef;
    contribPct?: string;
    partner?: PlatformCore.RecordRef;
    leadSource?: PlatformCore.RecordRef;
    startDate?: string;
    endDate?: string;
    otherRefNum?: string;
    memo?: string;
    salesEffectiveDate?: string;
    excludeCommission?: boolean;
    revRecSchedule?: PlatformCore.RecordRef;
    undepFunds?: boolean;
    canHaveStackable?: boolean;
    currency?: PlatformCore.RecordRef;
    account?: PlatformCore.RecordRef;
    revRecStartDate?: string;
    revRecEndDate?: string;
    totalCostEstimate?: number;
    estGrossProfit?: number;
    estGrossProfitPercent?: number;
    exchangeRate?: number;
    currencyName?: string;
    promoCode?: PlatformCore.RecordRef;
    discountItem?: PlatformCore.RecordRef;
    discountRate?: string;
    isTaxable?: boolean;
    taxItem?: PlatformCore.RecordRef;
    taxRate?: number;
    toBePrinted?: boolean;
    toBeEmailed?: boolean;
    toBeFaxed?: boolean;
    fax?: string;
    messageSel?: PlatformCore.RecordRef;
    message?: string;
    paymentOption?: PlatformCore.RecordRef;
    inputAuthCode?: string;
    inputReferenceCode?: string;
    checkNumber?: string;
    paymentCardCsc?: string;
    paymentProcessingProfile?: PlatformCore.RecordRef;
    handlingMode?: TransactionsSalesTypes.CashSaleHandlingMode;
    outputAuthCode?: string;
    outputReferenceCode?: string;
    paymentOperation?: TransactionsSalesTypes.CashSalePaymentOperation;
    dynamicDescriptor?: string;
    billingAddress?: PlatformCommon.Address;
    billAddressList?: PlatformCore.RecordRef;
    shippingAddress?: PlatformCommon.Address;
    shipIsResidential?: boolean;
    shipAddressList?: PlatformCore.RecordRef;
    fob?: string;
    shipDate?: string;
    shipMethod?: PlatformCore.RecordRef;
    shippingCost?: number;
    shippingTax1Rate?: number;
    shippingTax2Rate?: string;
    shippingTaxCode?: PlatformCore.RecordRef;
    handlingTaxCode?: PlatformCore.RecordRef;
    handlingTax1Rate?: number;
    handlingCost?: number;
    handlingTax2Rate?: string;
    linkedTrackingNumbers?: string;
    trackingNumbers?: string;
    salesGroup?: PlatformCore.RecordRef;
    revenueStatus?: PlatformCommonTypes.RevenueStatus;
    recognizedRevenue?: number;
    deferredRevenue?: number;
    revRecOnRevCommitment?: boolean;
    syncSalesTeams?: boolean;
    paymentMethod?: PlatformCore.RecordRef;
    payPalStatus?: string;
    creditCard?: PlatformCore.RecordRef;
    ccNumber?: string;
    ccExpireDate?: string;
    ccName?: string;
    ccStreet?: string;
    ccZipCode?: string;
    creditCardProcessor?: PlatformCore.RecordRef;
    ccApproved?: boolean;
    authCode?: string;
    ccAvsStreetMatch?: PlatformCommonTypes.AvsMatchCode;
    ccAvsZipMatch?: PlatformCommonTypes.AvsMatchCode;
    isRecurringPayment?: boolean;
    payPalTranId?: string;
    subTotal?: number;
    ccIsPurchaseCardBin?: boolean;
    ignoreAvs?: boolean;
    ccProcessAsPurchaseCard?: boolean;
    itemCostDiscount?: PlatformCore.RecordRef;
    itemCostDiscRate?: string;
    itemCostDiscAmount?: number;
    itemCostTaxRate1?: number;
    itemCostTaxRate2?: number;
    itemCostDiscTaxable?: boolean;
    itemCostTaxCode?: PlatformCore.RecordRef;
    itemCostDiscTax1Amt?: number;
    itemCostDiscPrint?: boolean;
    expCostDiscount?: PlatformCore.RecordRef;
    expCostDiscRate?: string;
    expCostDiscAmount?: number;
    expCostDiscTaxable?: boolean;
    expCostDiscprint?: boolean;
    expCostTaxRate1?: number;
    timeDiscount?: PlatformCore.RecordRef;
    expCostTaxCode?: PlatformCore.RecordRef;
    timeDiscRate?: string;
    expCostTaxRate2?: number;
    expCostDiscTax1Amt?: number;
    timeDiscAmount?: number;
    timeDiscTaxable?: boolean;
    timeDiscPrint?: boolean;
    discountTotal?: number;
    taxTotal?: number;
    timeTaxRate1?: number;
    altShippingCost?: number;
    timeTaxCode?: PlatformCore.RecordRef;
    altHandlingCost?: number;
    total?: number;
    timeDiscTax1Amt?: number;
    ccSecurityCode?: string;
    timeTaxRate2?: number;
    ccSecurityCodeMatch?: PlatformCommonTypes.AvsMatchCode;
    chargeIt?: boolean;
    debitCardIssueNo?: string;
    threeDStatusCode?: string;
    pnRefNum?: string;
    paypalAuthId?: string;
    status?: string;
    paypalProcess?: boolean;
    job?: PlatformCore.RecordRef;
    billingSchedule?: PlatformCore.RecordRef;
    email?: string;
    tax2Total?: number;
    validFrom?: string;
    vatRegNum?: string;
    giftCertApplied?: number;
    tranIsVsoeBundle?: boolean;
    vsoeAutoCalc?: boolean;
    syncPartnerTeams?: boolean;
    salesTeamList?: CashSaleSalesTeamList;
    partnersList?: CashSalePartnersList;
    itemList?: CashSaleItemList;
    accountingBookDetailList?: PlatformCommon.AccountingBookDetailList;
    itemCostList?: CashSaleItemCostList;
    giftCertRedemptionList?: PlatformCommon.GiftCertRedemptionList;
    promotionsList?: PromotionsList;
    expCostList?: CashSaleExpCostList;
    timeList?: CashSaleTimeList;
    shipGroupList?: CashSaleShipGroupList;
    taxDetailsList?: PlatformCommon.TaxDetailsList;
    customFieldList?: PlatformCore.CustomFieldList;
    internalId?: string;
    externalId?: string;
    constructor(props: CashSaleProps);
}
export declare type PromotionsProps = {
    promoCode?: PlatformCore.RecordRef;
    couponCode?: PlatformCore.RecordRef;
};
export declare class Promotions extends SoapMappingBase {
    promoCode?: PlatformCore.RecordRef;
    couponCode?: PlatformCore.RecordRef;
    constructor(props: PromotionsProps);
}
export declare type CashSaleSalesTeamListProps = {
    salesTeam?: CashSaleSalesTeam[];
    replaceAll?: boolean;
};
export declare class CashSaleSalesTeamList extends SoapMappingBase {
    salesTeam?: CashSaleSalesTeam[];
    replaceAll?: boolean;
    constructor(props: CashSaleSalesTeamListProps);
}
export declare type ItemFulfillmentPackageFedExProps = {
    packageWeightFedEx?: number;
    dryIceWeightFedEx?: number;
    packageTrackingNumberFedEx?: string;
    packagingFedEx?: TransactionsSalesTypes.ItemFulfillmentPackageFedExPackagingFedEx;
    admPackageTypeFedEx?: TransactionsSalesTypes.ItemFulfillmentPackageFedExAdmPackageTypeFedEx;
    isNonStandardContainerFedEx?: boolean;
    isAlcoholFedEx?: boolean;
    alcoholRecipientTypeFedEx?: PlatformCommonTypes.AlcoholRecipientType;
    isNonHazLithiumFedEx?: boolean;
    insuredValueFedEx?: number;
    useInsuredValueFedEx?: boolean;
    reference1FedEx?: string;
    priorityAlertTypeFedEx?: TransactionsSalesTypes.ItemFulfillmentPackageFedExPriorityAlertTypeFedEx;
    priorityAlertContentFedEx?: string;
    packageLengthFedEx?: number;
    packageWidthFedEx?: number;
    packageHeightFedEx?: number;
    useCodFedEx?: boolean;
    codAmountFedEx?: number;
    codMethodFedEx?: TransactionsSalesTypes.ItemFulfillmentPackageFedExCodMethodFedEx;
    codFreightTypeFedEx?: TransactionsSalesTypes.ItemFulfillmentPackageFedExCodFreightTypeFedEx;
    deliveryConfFedEx?: TransactionsSalesTypes.ItemFulfillmentPackageFedExDeliveryConfFedEx;
    signatureOptionsFedEx?: TransactionsSalesTypes.ItemFulfillmentPackageFedExSignatureOptionsFedEx;
    signatureReleaseFedEx?: string;
    authorizationNumberFedEx?: string;
};
export declare class ItemFulfillmentPackageFedEx extends SoapMappingBase {
    packageWeightFedEx?: number;
    dryIceWeightFedEx?: number;
    packageTrackingNumberFedEx?: string;
    packagingFedEx?: TransactionsSalesTypes.ItemFulfillmentPackageFedExPackagingFedEx;
    admPackageTypeFedEx?: TransactionsSalesTypes.ItemFulfillmentPackageFedExAdmPackageTypeFedEx;
    isNonStandardContainerFedEx?: boolean;
    isAlcoholFedEx?: boolean;
    alcoholRecipientTypeFedEx?: PlatformCommonTypes.AlcoholRecipientType;
    isNonHazLithiumFedEx?: boolean;
    insuredValueFedEx?: number;
    useInsuredValueFedEx?: boolean;
    reference1FedEx?: string;
    priorityAlertTypeFedEx?: TransactionsSalesTypes.ItemFulfillmentPackageFedExPriorityAlertTypeFedEx;
    priorityAlertContentFedEx?: string;
    packageLengthFedEx?: number;
    packageWidthFedEx?: number;
    packageHeightFedEx?: number;
    useCodFedEx?: boolean;
    codAmountFedEx?: number;
    codMethodFedEx?: TransactionsSalesTypes.ItemFulfillmentPackageFedExCodMethodFedEx;
    codFreightTypeFedEx?: TransactionsSalesTypes.ItemFulfillmentPackageFedExCodFreightTypeFedEx;
    deliveryConfFedEx?: TransactionsSalesTypes.ItemFulfillmentPackageFedExDeliveryConfFedEx;
    signatureOptionsFedEx?: TransactionsSalesTypes.ItemFulfillmentPackageFedExSignatureOptionsFedEx;
    signatureReleaseFedEx?: string;
    authorizationNumberFedEx?: string;
    constructor(props: ItemFulfillmentPackageFedExProps);
}
export declare type SalesOrderSalesTeamProps = {
    employee?: PlatformCore.RecordRef;
    salesRole?: PlatformCore.RecordRef;
    isPrimary?: boolean;
    contribution?: number;
};
export declare class SalesOrderSalesTeam extends SoapMappingBase {
    employee?: PlatformCore.RecordRef;
    salesRole?: PlatformCore.RecordRef;
    isPrimary?: boolean;
    contribution?: number;
    constructor(props: SalesOrderSalesTeamProps);
}
export declare type CashSaleShipGroupListProps = {
    shipGroup?: TransactionShipGroup[];
    replaceAll?: boolean;
};
export declare class CashSaleShipGroupList extends SoapMappingBase {
    shipGroup?: TransactionShipGroup[];
    replaceAll?: boolean;
    constructor(props: CashSaleShipGroupListProps);
}
export declare type EstimateShipGroupListProps = {
    shipGroup?: TransactionShipGroup[];
    replaceAll?: boolean;
};
export declare class EstimateShipGroupList extends SoapMappingBase {
    shipGroup?: TransactionShipGroup[];
    replaceAll?: boolean;
    constructor(props: EstimateShipGroupListProps);
}
export declare type UsageSearchAdvancedProps = {
    criteria?: UsageSearch;
    columns?: UsageSearchRow;
    savedSearchId?: string;
    savedSearchScriptId?: string;
};
export declare class UsageSearchAdvanced extends PlatformCore.SearchRecord {
    criteria?: UsageSearch;
    columns?: UsageSearchRow;
    savedSearchId?: string;
    savedSearchScriptId?: string;
    constructor(props: UsageSearchAdvancedProps);
}
export declare type ItemFulfillmentPackageUspsListProps = {
    packageUsps?: ItemFulfillmentPackageUsps[];
    replaceAll?: boolean;
};
export declare class ItemFulfillmentPackageUspsList extends SoapMappingBase {
    packageUsps?: ItemFulfillmentPackageUsps[];
    replaceAll?: boolean;
    constructor(props: ItemFulfillmentPackageUspsListProps);
}
export declare type OpportunitySearchRowProps = {
    basic?: PlatformCommon.OpportunitySearchRowBasic;
    actualJoin?: PlatformCommon.TransactionSearchRowBasic;
    callJoin?: PlatformCommon.PhoneCallSearchRowBasic;
    customerJoin?: PlatformCommon.CustomerSearchRowBasic;
    decisionMakerJoin?: PlatformCommon.ContactSearchRowBasic;
    estimateJoin?: PlatformCommon.TransactionSearchRowBasic;
    eventJoin?: PlatformCommon.CalendarEventSearchRowBasic;
    fileJoin?: PlatformCommon.FileSearchRowBasic;
    itemJoin?: PlatformCommon.ItemSearchRowBasic;
    leadSourceJoin?: PlatformCommon.CampaignSearchRowBasic;
    messagesJoin?: PlatformCommon.MessageSearchRowBasic;
    orderJoin?: PlatformCommon.TransactionSearchRowBasic;
    originatingLeadJoin?: PlatformCommon.OriginatingLeadSearchRowBasic;
    partnerJoin?: PlatformCommon.PartnerSearchRowBasic;
    salesRepJoin?: PlatformCommon.EmployeeSearchRowBasic;
    taskJoin?: PlatformCommon.TaskSearchRowBasic;
    userNotesJoin?: PlatformCommon.NoteSearchRowBasic;
    customSearchJoin?: PlatformCommon.CustomSearchRowBasic[];
};
export declare class OpportunitySearchRow extends PlatformCore.SearchRow {
    basic?: PlatformCommon.OpportunitySearchRowBasic;
    actualJoin?: PlatformCommon.TransactionSearchRowBasic;
    callJoin?: PlatformCommon.PhoneCallSearchRowBasic;
    customerJoin?: PlatformCommon.CustomerSearchRowBasic;
    decisionMakerJoin?: PlatformCommon.ContactSearchRowBasic;
    estimateJoin?: PlatformCommon.TransactionSearchRowBasic;
    eventJoin?: PlatformCommon.CalendarEventSearchRowBasic;
    fileJoin?: PlatformCommon.FileSearchRowBasic;
    itemJoin?: PlatformCommon.ItemSearchRowBasic;
    leadSourceJoin?: PlatformCommon.CampaignSearchRowBasic;
    messagesJoin?: PlatformCommon.MessageSearchRowBasic;
    orderJoin?: PlatformCommon.TransactionSearchRowBasic;
    originatingLeadJoin?: PlatformCommon.OriginatingLeadSearchRowBasic;
    partnerJoin?: PlatformCommon.PartnerSearchRowBasic;
    salesRepJoin?: PlatformCommon.EmployeeSearchRowBasic;
    taskJoin?: PlatformCommon.TaskSearchRowBasic;
    userNotesJoin?: PlatformCommon.NoteSearchRowBasic;
    customSearchJoin?: PlatformCommon.CustomSearchRowBasic[];
    constructor(props: OpportunitySearchRowProps);
}
export declare type CashSaleExpCostProps = {
    apply?: boolean;
    doc?: number;
    line?: number;
    taxDetailsReference?: string;
    billedDate?: string;
    jobDisp?: string;
    employeeDisp?: string;
    categoryDisp?: string;
    memo?: string;
    department?: string;
    clazz?: string;
    location?: string;
    originalAmount?: number;
    amount?: number;
    taxAmount?: number;
    taxableDisp?: string;
    revRecSchedule?: PlatformCore.RecordRef;
    revRecStartDate?: string;
    revRecEndDate?: string;
    grossAmt?: number;
    tax1Amt?: number;
    taxCode?: PlatformCore.RecordRef;
    taxRate1?: number;
    taxRate2?: number;
};
export declare class CashSaleExpCost extends SoapMappingBase {
    apply?: boolean;
    doc?: number;
    line?: number;
    taxDetailsReference?: string;
    billedDate?: string;
    jobDisp?: string;
    employeeDisp?: string;
    categoryDisp?: string;
    memo?: string;
    department?: string;
    clazz?: string;
    location?: string;
    originalAmount?: number;
    amount?: number;
    taxAmount?: number;
    taxableDisp?: string;
    revRecSchedule?: PlatformCore.RecordRef;
    revRecStartDate?: string;
    revRecEndDate?: string;
    grossAmt?: number;
    tax1Amt?: number;
    taxCode?: PlatformCore.RecordRef;
    taxRate1?: number;
    taxRate2?: number;
    constructor(props: CashSaleExpCostProps);
}
export declare type EstimateSalesTeamListProps = {
    salesTeam?: EstimateSalesTeam[];
    replaceAll?: boolean;
};
export declare class EstimateSalesTeamList extends SoapMappingBase {
    salesTeam?: EstimateSalesTeam[];
    replaceAll?: boolean;
    constructor(props: EstimateSalesTeamListProps);
}
export declare type CashSalePartnersListProps = {
    partners?: PlatformCommon.Partners[];
    replaceAll?: boolean;
};
export declare class CashSalePartnersList extends SoapMappingBase {
    partners?: PlatformCommon.Partners[];
    replaceAll?: boolean;
    constructor(props: CashSalePartnersListProps);
}
export declare type InvoiceProps = {
    createdDate?: string;
    lastModifiedDate?: string;
    nexus?: PlatformCore.RecordRef;
    subsidiaryTaxRegNum?: PlatformCore.RecordRef;
    taxRegOverride?: boolean;
    taxDetailsOverride?: boolean;
    customForm?: PlatformCore.RecordRef;
    nextApprover?: PlatformCore.RecordRef;
    entity?: PlatformCore.RecordRef;
    billingAccount?: PlatformCore.RecordRef;
    recurringBill?: boolean;
    tranDate?: string;
    tranId?: string;
    entityTaxRegNum?: PlatformCore.RecordRef;
    taxPointDate?: string;
    source?: string;
    createdFrom?: PlatformCore.RecordRef;
    postingPeriod?: PlatformCore.RecordRef;
    opportunity?: PlatformCore.RecordRef;
    department?: PlatformCore.RecordRef;
    clazz?: PlatformCore.RecordRef;
    terms?: PlatformCore.RecordRef;
    location?: PlatformCore.RecordRef;
    subsidiary?: PlatformCore.RecordRef;
    currency?: PlatformCore.RecordRef;
    dueDate?: string;
    discountDate?: string;
    discountAmount?: number;
    salesRep?: PlatformCore.RecordRef;
    contribPct?: string;
    partner?: PlatformCore.RecordRef;
    leadSource?: PlatformCore.RecordRef;
    startDate?: string;
    endDate?: string;
    otherRefNum?: string;
    memo?: string;
    salesEffectiveDate?: string;
    excludeCommission?: boolean;
    totalCostEstimate?: number;
    estGrossProfit?: number;
    estGrossProfitPercent?: number;
    revRecSchedule?: PlatformCore.RecordRef;
    revRecStartDate?: string;
    revRecEndDate?: string;
    amountPaid?: number;
    amountRemaining?: number;
    balance?: number;
    account?: PlatformCore.RecordRef;
    onCreditHold?: string;
    exchangeRate?: number;
    currencyName?: string;
    promoCode?: PlatformCore.RecordRef;
    discountItem?: PlatformCore.RecordRef;
    discountRate?: string;
    isTaxable?: boolean;
    taxItem?: PlatformCore.RecordRef;
    taxRate?: number;
    toBePrinted?: boolean;
    toBeEmailed?: boolean;
    toBeFaxed?: boolean;
    fax?: string;
    messageSel?: PlatformCore.RecordRef;
    message?: string;
    billingAddress?: PlatformCommon.Address;
    billAddressList?: PlatformCore.RecordRef;
    shippingAddress?: PlatformCommon.Address;
    shipIsResidential?: boolean;
    shipAddressList?: PlatformCore.RecordRef;
    fob?: string;
    shipDate?: string;
    shipMethod?: PlatformCore.RecordRef;
    shippingCost?: number;
    shippingTax1Rate?: number;
    shippingTax2Rate?: string;
    shippingTaxCode?: PlatformCore.RecordRef;
    handlingTaxCode?: PlatformCore.RecordRef;
    handlingTax1Rate?: number;
    handlingCost?: number;
    handlingTax2Rate?: string;
    trackingNumbers?: string;
    linkedTrackingNumbers?: string;
    salesGroup?: PlatformCore.RecordRef;
    subTotal?: number;
    canHaveStackable?: boolean;
    revenueStatus?: PlatformCommonTypes.RevenueStatus;
    recognizedRevenue?: number;
    deferredRevenue?: number;
    revRecOnRevCommitment?: boolean;
    syncSalesTeams?: boolean;
    discountTotal?: number;
    taxTotal?: number;
    altShippingCost?: number;
    altHandlingCost?: number;
    total?: number;
    status?: string;
    job?: PlatformCore.RecordRef;
    billingSchedule?: PlatformCore.RecordRef;
    email?: string;
    tax2Total?: number;
    vatRegNum?: string;
    expCostDiscount?: PlatformCore.RecordRef;
    itemCostDiscount?: PlatformCore.RecordRef;
    timeDiscount?: PlatformCore.RecordRef;
    expCostDiscRate?: string;
    itemCostDiscRate?: string;
    timeDiscRate?: string;
    expCostDiscAmount?: number;
    expCostTaxRate1?: number;
    expCostTaxRate2?: number;
    itemCostDiscAmount?: number;
    expCostTaxCode?: PlatformCore.RecordRef;
    expCostDiscTax1Amt?: number;
    itemCostTaxRate1?: number;
    timeDiscAmount?: number;
    itemCostTaxCode?: PlatformCore.RecordRef;
    expCostDiscTaxable?: boolean;
    itemCostDiscTaxable?: boolean;
    itemCostTaxRate2?: number;
    itemCostDiscTax1Amt?: number;
    itemCostDiscPrint?: boolean;
    timeDiscTaxable?: boolean;
    timeTaxRate1?: number;
    expCostDiscPrint?: boolean;
    timeTaxCode?: PlatformCore.RecordRef;
    timeDiscPrint?: boolean;
    giftCertApplied?: number;
    timeDiscTax1Amt?: number;
    tranIsVsoeBundle?: boolean;
    timeTaxRate2?: number;
    vsoeAutoCalc?: boolean;
    syncPartnerTeams?: boolean;
    salesTeamList?: InvoiceSalesTeamList;
    partnersList?: InvoicePartnersList;
    itemList?: InvoiceItemList;
    itemCostList?: InvoiceItemCostList;
    giftCertRedemptionList?: PlatformCommon.GiftCertRedemptionList;
    promotionsList?: PromotionsList;
    expCostList?: InvoiceExpCostList;
    timeList?: InvoiceTimeList;
    shipGroupList?: InvoiceShipGroupList;
    approvalStatus?: PlatformCore.RecordRef;
    accountingBookDetailList?: PlatformCommon.AccountingBookDetailList;
    taxDetailsList?: PlatformCommon.TaxDetailsList;
    customFieldList?: PlatformCore.CustomFieldList;
    internalId?: string;
    externalId?: string;
} & PlatformCore.RecordProps;
export declare class Invoice extends PlatformCore.Record {
    createdDate?: string;
    lastModifiedDate?: string;
    nexus?: PlatformCore.RecordRef;
    subsidiaryTaxRegNum?: PlatformCore.RecordRef;
    taxRegOverride?: boolean;
    taxDetailsOverride?: boolean;
    customForm?: PlatformCore.RecordRef;
    nextApprover?: PlatformCore.RecordRef;
    entity?: PlatformCore.RecordRef;
    billingAccount?: PlatformCore.RecordRef;
    recurringBill?: boolean;
    tranDate?: string;
    tranId?: string;
    entityTaxRegNum?: PlatformCore.RecordRef;
    taxPointDate?: string;
    source?: string;
    createdFrom?: PlatformCore.RecordRef;
    postingPeriod?: PlatformCore.RecordRef;
    opportunity?: PlatformCore.RecordRef;
    department?: PlatformCore.RecordRef;
    clazz?: PlatformCore.RecordRef;
    terms?: PlatformCore.RecordRef;
    location?: PlatformCore.RecordRef;
    subsidiary?: PlatformCore.RecordRef;
    currency?: PlatformCore.RecordRef;
    dueDate?: string;
    discountDate?: string;
    discountAmount?: number;
    salesRep?: PlatformCore.RecordRef;
    contribPct?: string;
    partner?: PlatformCore.RecordRef;
    leadSource?: PlatformCore.RecordRef;
    startDate?: string;
    endDate?: string;
    otherRefNum?: string;
    memo?: string;
    salesEffectiveDate?: string;
    excludeCommission?: boolean;
    totalCostEstimate?: number;
    estGrossProfit?: number;
    estGrossProfitPercent?: number;
    revRecSchedule?: PlatformCore.RecordRef;
    revRecStartDate?: string;
    revRecEndDate?: string;
    amountPaid?: number;
    amountRemaining?: number;
    balance?: number;
    account?: PlatformCore.RecordRef;
    onCreditHold?: string;
    exchangeRate?: number;
    currencyName?: string;
    promoCode?: PlatformCore.RecordRef;
    discountItem?: PlatformCore.RecordRef;
    discountRate?: string;
    isTaxable?: boolean;
    taxItem?: PlatformCore.RecordRef;
    taxRate?: number;
    toBePrinted?: boolean;
    toBeEmailed?: boolean;
    toBeFaxed?: boolean;
    fax?: string;
    messageSel?: PlatformCore.RecordRef;
    message?: string;
    billingAddress?: PlatformCommon.Address;
    billAddressList?: PlatformCore.RecordRef;
    shippingAddress?: PlatformCommon.Address;
    shipIsResidential?: boolean;
    shipAddressList?: PlatformCore.RecordRef;
    fob?: string;
    shipDate?: string;
    shipMethod?: PlatformCore.RecordRef;
    shippingCost?: number;
    shippingTax1Rate?: number;
    shippingTax2Rate?: string;
    shippingTaxCode?: PlatformCore.RecordRef;
    handlingTaxCode?: PlatformCore.RecordRef;
    handlingTax1Rate?: number;
    handlingCost?: number;
    handlingTax2Rate?: string;
    trackingNumbers?: string;
    linkedTrackingNumbers?: string;
    salesGroup?: PlatformCore.RecordRef;
    subTotal?: number;
    canHaveStackable?: boolean;
    revenueStatus?: PlatformCommonTypes.RevenueStatus;
    recognizedRevenue?: number;
    deferredRevenue?: number;
    revRecOnRevCommitment?: boolean;
    syncSalesTeams?: boolean;
    discountTotal?: number;
    taxTotal?: number;
    altShippingCost?: number;
    altHandlingCost?: number;
    total?: number;
    status?: string;
    job?: PlatformCore.RecordRef;
    billingSchedule?: PlatformCore.RecordRef;
    email?: string;
    tax2Total?: number;
    vatRegNum?: string;
    expCostDiscount?: PlatformCore.RecordRef;
    itemCostDiscount?: PlatformCore.RecordRef;
    timeDiscount?: PlatformCore.RecordRef;
    expCostDiscRate?: string;
    itemCostDiscRate?: string;
    timeDiscRate?: string;
    expCostDiscAmount?: number;
    expCostTaxRate1?: number;
    expCostTaxRate2?: number;
    itemCostDiscAmount?: number;
    expCostTaxCode?: PlatformCore.RecordRef;
    expCostDiscTax1Amt?: number;
    itemCostTaxRate1?: number;
    timeDiscAmount?: number;
    itemCostTaxCode?: PlatformCore.RecordRef;
    expCostDiscTaxable?: boolean;
    itemCostDiscTaxable?: boolean;
    itemCostTaxRate2?: number;
    itemCostDiscTax1Amt?: number;
    itemCostDiscPrint?: boolean;
    timeDiscTaxable?: boolean;
    timeTaxRate1?: number;
    expCostDiscPrint?: boolean;
    timeTaxCode?: PlatformCore.RecordRef;
    timeDiscPrint?: boolean;
    giftCertApplied?: number;
    timeDiscTax1Amt?: number;
    tranIsVsoeBundle?: boolean;
    timeTaxRate2?: number;
    vsoeAutoCalc?: boolean;
    syncPartnerTeams?: boolean;
    salesTeamList?: InvoiceSalesTeamList;
    partnersList?: InvoicePartnersList;
    itemList?: InvoiceItemList;
    itemCostList?: InvoiceItemCostList;
    giftCertRedemptionList?: PlatformCommon.GiftCertRedemptionList;
    promotionsList?: PromotionsList;
    expCostList?: InvoiceExpCostList;
    timeList?: InvoiceTimeList;
    shipGroupList?: InvoiceShipGroupList;
    approvalStatus?: PlatformCore.RecordRef;
    accountingBookDetailList?: PlatformCommon.AccountingBookDetailList;
    taxDetailsList?: PlatformCommon.TaxDetailsList;
    customFieldList?: PlatformCore.CustomFieldList;
    internalId?: string;
    externalId?: string;
    constructor(props: InvoiceProps);
}
export declare type InvoiceItemListProps = {
    item?: InvoiceItem[];
    replaceAll?: boolean;
};
export declare class InvoiceItemList extends SoapMappingBase {
    item?: InvoiceItem[];
    replaceAll?: boolean;
    constructor(props: InvoiceItemListProps);
}
export declare type EstimateProps = {
    createdDate?: string;
    lastModifiedDate?: string;
    nexus?: PlatformCore.RecordRef;
    subsidiaryTaxRegNum?: PlatformCore.RecordRef;
    taxRegOverride?: boolean;
    taxDetailsOverride?: boolean;
    entity?: PlatformCore.RecordRef;
    job?: PlatformCore.RecordRef;
    tranDate?: string;
    tranId?: string;
    entityTaxRegNum?: PlatformCore.RecordRef;
    taxPointDate?: string;
    source?: string;
    customForm?: PlatformCore.RecordRef;
    currency?: PlatformCore.RecordRef;
    title?: string;
    entityStatus?: PlatformCore.RecordRef;
    probability?: number;
    includeInForecast?: boolean;
    forecastType?: PlatformCore.RecordRef;
    opportunity?: PlatformCore.RecordRef;
    department?: PlatformCore.RecordRef;
    clazz?: PlatformCore.RecordRef;
    terms?: PlatformCore.RecordRef;
    dueDate?: string;
    location?: PlatformCore.RecordRef;
    subsidiary?: PlatformCore.RecordRef;
    billingSchedule?: PlatformCore.RecordRef;
    status?: string;
    salesRep?: PlatformCore.RecordRef;
    partner?: PlatformCore.RecordRef;
    contribPct?: string;
    leadSource?: PlatformCore.RecordRef;
    expectedCloseDate?: string;
    otherRefNum?: string;
    memo?: string;
    endDate?: string;
    startDate?: string;
    totalCostEstimate?: number;
    estGrossProfit?: number;
    estGrossProfitPercent?: number;
    createdFrom?: PlatformCore.RecordRef;
    exchangeRate?: number;
    currencyName?: string;
    promoCode?: PlatformCore.RecordRef;
    discountItem?: PlatformCore.RecordRef;
    discountRate?: string;
    isTaxable?: boolean;
    taxItem?: PlatformCore.RecordRef;
    taxRate?: number;
    vatRegNum?: string;
    toBePrinted?: boolean;
    toBeEmailed?: boolean;
    email?: string;
    toBeFaxed?: boolean;
    fax?: string;
    visibleToCustomer?: boolean;
    messageSel?: PlatformCore.RecordRef;
    message?: string;
    billingAddress?: PlatformCommon.Address;
    billAddressList?: PlatformCore.RecordRef;
    shippingAddress?: PlatformCommon.Address;
    shipIsResidential?: boolean;
    shipAddressList?: PlatformCore.RecordRef;
    fob?: string;
    shipDate?: string;
    shipMethod?: PlatformCore.RecordRef;
    shippingCost?: number;
    shippingTax1Rate?: number;
    shippingTaxCode?: PlatformCore.RecordRef;
    shippingTax2Rate?: string;
    handlingTaxCode?: PlatformCore.RecordRef;
    handlingTax1Rate?: number;
    handlingCost?: number;
    trackingNumbers?: string;
    handlingTax2Rate?: string;
    linkedTrackingNumbers?: string;
    salesGroup?: PlatformCore.RecordRef;
    syncSalesTeams?: boolean;
    altSalesTotal?: number;
    canHaveStackable?: boolean;
    oneTime?: number;
    recurWeekly?: number;
    recurMonthly?: number;
    recurQuarterly?: number;
    recurAnnually?: number;
    subTotal?: number;
    discountTotal?: number;
    taxTotal?: number;
    altShippingCost?: number;
    altHandlingCost?: number;
    total?: number;
    tax2Total?: number;
    itemList?: EstimateItemList;
    accountingBookDetailList?: PlatformCommon.AccountingBookDetailList;
    salesTeamList?: EstimateSalesTeamList;
    syncPartnerTeams?: boolean;
    partnersList?: EstimatePartnersList;
    promotionsList?: PromotionsList;
    shipGroupList?: EstimateShipGroupList;
    taxDetailsList?: PlatformCommon.TaxDetailsList;
    customFieldList?: PlatformCore.CustomFieldList;
    internalId?: string;
    externalId?: string;
} & PlatformCore.RecordProps;
export declare class Estimate extends PlatformCore.Record {
    createdDate?: string;
    lastModifiedDate?: string;
    nexus?: PlatformCore.RecordRef;
    subsidiaryTaxRegNum?: PlatformCore.RecordRef;
    taxRegOverride?: boolean;
    taxDetailsOverride?: boolean;
    entity?: PlatformCore.RecordRef;
    job?: PlatformCore.RecordRef;
    tranDate?: string;
    tranId?: string;
    entityTaxRegNum?: PlatformCore.RecordRef;
    taxPointDate?: string;
    source?: string;
    customForm?: PlatformCore.RecordRef;
    currency?: PlatformCore.RecordRef;
    title?: string;
    entityStatus?: PlatformCore.RecordRef;
    probability?: number;
    includeInForecast?: boolean;
    forecastType?: PlatformCore.RecordRef;
    opportunity?: PlatformCore.RecordRef;
    department?: PlatformCore.RecordRef;
    clazz?: PlatformCore.RecordRef;
    terms?: PlatformCore.RecordRef;
    dueDate?: string;
    location?: PlatformCore.RecordRef;
    subsidiary?: PlatformCore.RecordRef;
    billingSchedule?: PlatformCore.RecordRef;
    status?: string;
    salesRep?: PlatformCore.RecordRef;
    partner?: PlatformCore.RecordRef;
    contribPct?: string;
    leadSource?: PlatformCore.RecordRef;
    expectedCloseDate?: string;
    otherRefNum?: string;
    memo?: string;
    endDate?: string;
    startDate?: string;
    totalCostEstimate?: number;
    estGrossProfit?: number;
    estGrossProfitPercent?: number;
    createdFrom?: PlatformCore.RecordRef;
    exchangeRate?: number;
    currencyName?: string;
    promoCode?: PlatformCore.RecordRef;
    discountItem?: PlatformCore.RecordRef;
    discountRate?: string;
    isTaxable?: boolean;
    taxItem?: PlatformCore.RecordRef;
    taxRate?: number;
    vatRegNum?: string;
    toBePrinted?: boolean;
    toBeEmailed?: boolean;
    email?: string;
    toBeFaxed?: boolean;
    fax?: string;
    visibleToCustomer?: boolean;
    messageSel?: PlatformCore.RecordRef;
    message?: string;
    billingAddress?: PlatformCommon.Address;
    billAddressList?: PlatformCore.RecordRef;
    shippingAddress?: PlatformCommon.Address;
    shipIsResidential?: boolean;
    shipAddressList?: PlatformCore.RecordRef;
    fob?: string;
    shipDate?: string;
    shipMethod?: PlatformCore.RecordRef;
    shippingCost?: number;
    shippingTax1Rate?: number;
    shippingTaxCode?: PlatformCore.RecordRef;
    shippingTax2Rate?: string;
    handlingTaxCode?: PlatformCore.RecordRef;
    handlingTax1Rate?: number;
    handlingCost?: number;
    trackingNumbers?: string;
    handlingTax2Rate?: string;
    linkedTrackingNumbers?: string;
    salesGroup?: PlatformCore.RecordRef;
    syncSalesTeams?: boolean;
    altSalesTotal?: number;
    canHaveStackable?: boolean;
    oneTime?: number;
    recurWeekly?: number;
    recurMonthly?: number;
    recurQuarterly?: number;
    recurAnnually?: number;
    subTotal?: number;
    discountTotal?: number;
    taxTotal?: number;
    altShippingCost?: number;
    altHandlingCost?: number;
    total?: number;
    tax2Total?: number;
    itemList?: EstimateItemList;
    accountingBookDetailList?: PlatformCommon.AccountingBookDetailList;
    salesTeamList?: EstimateSalesTeamList;
    syncPartnerTeams?: boolean;
    partnersList?: EstimatePartnersList;
    promotionsList?: PromotionsList;
    shipGroupList?: EstimateShipGroupList;
    taxDetailsList?: PlatformCommon.TaxDetailsList;
    customFieldList?: PlatformCore.CustomFieldList;
    internalId?: string;
    externalId?: string;
    constructor(props: EstimateProps);
}
export declare type TransactionShipGroupProps = {
    id?: number;
    isFulfilled?: boolean;
    weight?: number;
    sourceAddressRef?: PlatformCore.RecordRef;
    sourceAddress?: string;
    destinationAddressRef?: PlatformCore.RecordRef;
    destinationAddress?: string;
    shippingMethodRef?: PlatformCore.RecordRef;
    shippingMethod?: string;
    isHandlingTaxable?: boolean;
    handlingTaxCode?: PlatformCore.RecordRef;
    handlingTaxRate?: string;
    handlingTax2Rate?: string;
    handlingRate?: number;
    handlingTaxAmt?: number;
    handlingTax2Amt?: number;
    isShippingTaxable?: boolean;
    shippingTaxCode?: PlatformCore.RecordRef;
    shippingTaxRate?: string;
    shippingTax2Rate?: string;
    shippingRate?: number;
    shippingTaxAmt?: number;
    shippingTax2Amt?: number;
};
export declare class TransactionShipGroup extends SoapMappingBase {
    id?: number;
    isFulfilled?: boolean;
    weight?: number;
    sourceAddressRef?: PlatformCore.RecordRef;
    sourceAddress?: string;
    destinationAddressRef?: PlatformCore.RecordRef;
    destinationAddress?: string;
    shippingMethodRef?: PlatformCore.RecordRef;
    shippingMethod?: string;
    isHandlingTaxable?: boolean;
    handlingTaxCode?: PlatformCore.RecordRef;
    handlingTaxRate?: string;
    handlingTax2Rate?: string;
    handlingRate?: number;
    handlingTaxAmt?: number;
    handlingTax2Amt?: number;
    isShippingTaxable?: boolean;
    shippingTaxCode?: PlatformCore.RecordRef;
    shippingTaxRate?: string;
    shippingTax2Rate?: string;
    shippingRate?: number;
    shippingTaxAmt?: number;
    shippingTax2Amt?: number;
    constructor(props: TransactionShipGroupProps);
}
export declare type InvoicePartnersListProps = {
    partners?: PlatformCommon.Partners[];
    replaceAll?: boolean;
};
export declare class InvoicePartnersList extends SoapMappingBase {
    partners?: PlatformCommon.Partners[];
    replaceAll?: boolean;
    constructor(props: InvoicePartnersListProps);
}
export declare type EstimatePartnersListProps = {
    partners?: PlatformCommon.Partners[];
    replaceAll?: boolean;
};
export declare class EstimatePartnersList extends SoapMappingBase {
    partners?: PlatformCommon.Partners[];
    replaceAll?: boolean;
    constructor(props: EstimatePartnersListProps);
}
export declare type OpportunitySearchAdvancedProps = {
    criteria?: OpportunitySearch;
    columns?: OpportunitySearchRow;
    savedSearchId?: string;
    savedSearchScriptId?: string;
};
export declare class OpportunitySearchAdvanced extends PlatformCore.SearchRecord {
    criteria?: OpportunitySearch;
    columns?: OpportunitySearchRow;
    savedSearchId?: string;
    savedSearchScriptId?: string;
    constructor(props: OpportunitySearchAdvancedProps);
}
export declare type CashSaleSalesTeamProps = {
    employee?: PlatformCore.RecordRef;
    salesRole?: PlatformCore.RecordRef;
    isPrimary?: boolean;
    contribution?: number;
};
export declare class CashSaleSalesTeam extends SoapMappingBase {
    employee?: PlatformCore.RecordRef;
    salesRole?: PlatformCore.RecordRef;
    isPrimary?: boolean;
    contribution?: number;
    constructor(props: CashSaleSalesTeamProps);
}
export declare type CashSaleItemListProps = {
    item?: CashSaleItem[];
    replaceAll?: boolean;
};
export declare class CashSaleItemList extends SoapMappingBase {
    item?: CashSaleItem[];
    replaceAll?: boolean;
    constructor(props: CashSaleItemListProps);
}
export declare type InvoiceExpCostProps = {
    apply?: boolean;
    doc?: number;
    line?: number;
    taxDetailsReference?: string;
    billedDate?: string;
    jobDisp?: string;
    employeeDisp?: string;
    categoryDisp?: string;
    memo?: string;
    department?: string;
    clazz?: string;
    location?: string;
    originalAmount?: number;
    amount?: number;
    taxAmount?: number;
    taxableDisp?: string;
    revRecSchedule?: PlatformCore.RecordRef;
    revRecStartDate?: string;
    revRecEndDate?: string;
    grossAmt?: number;
    tax1Amt?: number;
    taxCode?: PlatformCore.RecordRef;
    taxRate1?: number;
    taxRate2?: number;
};
export declare class InvoiceExpCost extends SoapMappingBase {
    apply?: boolean;
    doc?: number;
    line?: number;
    taxDetailsReference?: string;
    billedDate?: string;
    jobDisp?: string;
    employeeDisp?: string;
    categoryDisp?: string;
    memo?: string;
    department?: string;
    clazz?: string;
    location?: string;
    originalAmount?: number;
    amount?: number;
    taxAmount?: number;
    taxableDisp?: string;
    revRecSchedule?: PlatformCore.RecordRef;
    revRecStartDate?: string;
    revRecEndDate?: string;
    grossAmt?: number;
    tax1Amt?: number;
    taxCode?: PlatformCore.RecordRef;
    taxRate1?: number;
    taxRate2?: number;
    constructor(props: InvoiceExpCostProps);
}
export declare type AccountingTransactionSearchRowProps = {
    basic?: PlatformCommon.AccountingTransactionSearchRowBasic;
    accountJoin?: PlatformCommon.AccountSearchRowBasic;
    revRecScheduleJoin?: PlatformCommon.RevRecScheduleSearchRowBasic;
    transactionJoin?: PlatformCommon.TransactionSearchRowBasic;
};
export declare class AccountingTransactionSearchRow extends PlatformCore.SearchRow {
    basic?: PlatformCommon.AccountingTransactionSearchRowBasic;
    accountJoin?: PlatformCommon.AccountSearchRowBasic;
    revRecScheduleJoin?: PlatformCommon.RevRecScheduleSearchRowBasic;
    transactionJoin?: PlatformCommon.TransactionSearchRowBasic;
    constructor(props: AccountingTransactionSearchRowProps);
}
export declare type InvoiceItemCostProps = {
    apply?: boolean;
    doc?: number;
    line?: number;
    taxDetailsReference?: string;
    billedDate?: string;
    itemDisp?: string;
    memo?: string;
    jobDisp?: string;
    department?: string;
    clazz?: string;
    location?: string;
    unitDisp?: string;
    options?: PlatformCore.CustomFieldList;
    itemCostCount?: string;
    quantity?: string;
    serialNumbers?: string;
    cost?: number;
    amount?: number;
    taxAmount?: number;
    revRecSchedule?: PlatformCore.RecordRef;
    revRecStartDate?: string;
    revRecEndDate?: string;
    grossAmt?: number;
    tax1Amt?: number;
    taxCode?: PlatformCore.RecordRef;
    taxRate1?: number;
    taxRate2?: number;
};
export declare class InvoiceItemCost extends SoapMappingBase {
    apply?: boolean;
    doc?: number;
    line?: number;
    taxDetailsReference?: string;
    billedDate?: string;
    itemDisp?: string;
    memo?: string;
    jobDisp?: string;
    department?: string;
    clazz?: string;
    location?: string;
    unitDisp?: string;
    options?: PlatformCore.CustomFieldList;
    itemCostCount?: string;
    quantity?: string;
    serialNumbers?: string;
    cost?: number;
    amount?: number;
    taxAmount?: number;
    revRecSchedule?: PlatformCore.RecordRef;
    revRecStartDate?: string;
    revRecEndDate?: string;
    grossAmt?: number;
    tax1Amt?: number;
    taxCode?: PlatformCore.RecordRef;
    taxRate1?: number;
    taxRate2?: number;
    constructor(props: InvoiceItemCostProps);
}
export declare type ItemFulfillmentPackageUpsProps = {
    packageWeightUps?: number;
    packageDescrUps?: string;
    packageTrackingNumberUps?: string;
    packagingUps?: TransactionsSalesTypes.ItemFulfillmentPackageUpsPackagingUps;
    useInsuredValueUps?: boolean;
    insuredValueUps?: number;
    reference1Ups?: string;
    reference2Ups?: string;
    packageLengthUps?: number;
    packageWidthUps?: number;
    packageHeightUps?: number;
    additionalHandlingUps?: boolean;
    useCodUps?: boolean;
    codAmountUps?: number;
    codMethodUps?: TransactionsSalesTypes.ItemFulfillmentPackageUpsCodMethodUps;
    deliveryConfUps?: TransactionsSalesTypes.ItemFulfillmentPackageUpsDeliveryConfUps;
};
export declare class ItemFulfillmentPackageUps extends SoapMappingBase {
    packageWeightUps?: number;
    packageDescrUps?: string;
    packageTrackingNumberUps?: string;
    packagingUps?: TransactionsSalesTypes.ItemFulfillmentPackageUpsPackagingUps;
    useInsuredValueUps?: boolean;
    insuredValueUps?: number;
    reference1Ups?: string;
    reference2Ups?: string;
    packageLengthUps?: number;
    packageWidthUps?: number;
    packageHeightUps?: number;
    additionalHandlingUps?: boolean;
    useCodUps?: boolean;
    codAmountUps?: number;
    codMethodUps?: TransactionsSalesTypes.ItemFulfillmentPackageUpsCodMethodUps;
    deliveryConfUps?: TransactionsSalesTypes.ItemFulfillmentPackageUpsDeliveryConfUps;
    constructor(props: ItemFulfillmentPackageUpsProps);
}
