"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
//# sourceMappingURL=data:application/json;base64,{"version":3,"file":"platform_core_types.js","sourceRoot":"","sources":["../../../src/netsuite_webservices/2019_2/platform_core_types.ts"],"names":[],"mappings":"","sourcesContent":["export type SearchDateFieldOperator =\n  | \"after\"\n  | \"before\"\n  | \"empty\"\n  | \"notAfter\"\n  | \"notBefore\"\n  | \"notEmpty\"\n  | \"notOn\"\n  | \"notOnOrAfter\"\n  | \"notOnOrBefore\"\n  | \"notWithin\"\n  | \"on\"\n  | \"onOrAfter\"\n  | \"onOrBefore\"\n  | \"within\";\n\nexport type SearchDate =\n  | \"fiscalHalfBeforeLast\"\n  | \"fiscalHalfBeforeLastToDate\"\n  | \"fiscalQuarterBeforeLast\"\n  | \"fiscalQuarterBeforeLastToDate\"\n  | \"fiscalYearBeforeLast\"\n  | \"fiscalYearBeforeLastToDate\"\n  | \"fiveDaysAgo\"\n  | \"fiveDaysFromNow\"\n  | \"fourDaysAgo\"\n  | \"fourDaysFromNow\"\n  | \"fourWeeksStartingThisWeek\"\n  | \"lastBusinessWeek\"\n  | \"lastFiscalHalf\"\n  | \"lastFiscalHalfOneFiscalYearAgo\"\n  | \"lastFiscalHalfToDate\"\n  | \"lastFiscalQuarter\"\n  | \"lastFiscalQuarterOneFiscalYearAgo\"\n  | \"lastFiscalQuarterToDate\"\n  | \"lastFiscalQuarterTwoFiscalYearsAgo\"\n  | \"lastFiscalYear\"\n  | \"lastFiscalYearToDate\"\n  | \"lastMonth\"\n  | \"lastMonthOneFiscalQuarterAgo\"\n  | \"lastMonthOneFiscalYearAgo\"\n  | \"lastMonthToDate\"\n  | \"lastMonthTwoFiscalQuartersAgo\"\n  | \"lastMonthTwoFiscalYearsAgo\"\n  | \"lastRollingHalf\"\n  | \"lastRollingQuarter\"\n  | \"lastRollingYear\"\n  | \"lastWeek\"\n  | \"lastWeekToDate\"\n  | \"monthAfterNext\"\n  | \"monthAfterNextToDate\"\n  | \"monthBeforeLast\"\n  | \"monthBeforeLastToDate\"\n  | \"nextBusinessWeek\"\n  | \"nextFiscalHalf\"\n  | \"nextFiscalQuarter\"\n  | \"nextFiscalYear\"\n  | \"nextFourWeeks\"\n  | \"nextMonth\"\n  | \"nextOneHalf\"\n  | \"nextOneMonth\"\n  | \"nextOneQuarter\"\n  | \"nextOneWeek\"\n  | \"nextOneYear\"\n  | \"nextWeek\"\n  | \"ninetyDaysAgo\"\n  | \"ninetyDaysFromNow\"\n  | \"oneYearBeforeLast\"\n  | \"previousFiscalQuartersLastFiscalYear\"\n  | \"previousFiscalQuartersThisFiscalYear\"\n  | \"previousMonthsLastFiscalHalf\"\n  | \"previousMonthsLastFiscalQuarter\"\n  | \"previousMonthsLastFiscalYear\"\n  | \"previousMonthsSameFiscalHalfLastFiscalYear\"\n  | \"previousMonthsSameFiscalQuarterLastFiscalYear\"\n  | \"previousMonthsThisFiscalHalf\"\n  | \"previousMonthsThisFiscalQuarter\"\n  | \"previousMonthsThisFiscalYear\"\n  | \"previousOneDay\"\n  | \"previousOneHalf\"\n  | \"previousOneMonth\"\n  | \"previousOneQuarter\"\n  | \"previousOneWeek\"\n  | \"previousOneYear\"\n  | \"previousRollingHalf\"\n  | \"previousRollingQuarter\"\n  | \"previousRollingYear\"\n  | \"sameDayFiscalQuarterBeforeLast\"\n  | \"sameDayFiscalYearBeforeLast\"\n  | \"sameDayLastFiscalQuarter\"\n  | \"sameDayLastFiscalYear\"\n  | \"sameDayLastMonth\"\n  | \"sameDayLastWeek\"\n  | \"sameDayMonthBeforeLast\"\n  | \"sameDayWeekBeforeLast\"\n  | \"sameFiscalHalfLastFiscalYear\"\n  | \"sameFiscalHalfLastFiscalYearToDate\"\n  | \"sameFiscalQuarterFiscalYearBeforeLast\"\n  | \"sameFiscalQuarterLastFiscalYear\"\n  | \"sameFiscalQuarterLastFiscalYearToDate\"\n  | \"sameMonthFiscalQuarterBeforeLast\"\n  | \"sameMonthFiscalYearBeforeLast\"\n  | \"sameMonthLastFiscalQuarter\"\n  | \"sameMonthLastFiscalQuarterToDate\"\n  | \"sameMonthLastFiscalYear\"\n  | \"sameMonthLastFiscalYearToDate\"\n  | \"sameWeekFiscalYearBeforeLast\"\n  | \"sameWeekLastFiscalYear\"\n  | \"sixtyDaysAgo\"\n  | \"sixtyDaysFromNow\"\n  | \"startOfFiscalHalfBeforeLast\"\n  | \"startOfFiscalQuarterBeforeLast\"\n  | \"startOfFiscalYearBeforeLast\"\n  | \"startOfLastBusinessWeek\"\n  | \"startOfLastFiscalHalf\"\n  | \"startOfLastFiscalHalfOneFiscalYearAgo\"\n  | \"startOfLastFiscalQuarter\"\n  | \"startOfLastFiscalQuarterOneFiscalYearAgo\"\n  | \"startOfLastFiscalYear\"\n  | \"startOfLastMonth\"\n  | \"startOfLastMonthOneFiscalQuarterAgo\"\n  | \"startOfLastMonthOneFiscalYearAgo\"\n  | \"startOfLastRollingHalf\"\n  | \"startOfLastRollingQuarter\"\n  | \"startOfLastRollingYear\"\n  | \"startOfLastWeek\"\n  | \"startOfMonthBeforeLast\"\n  | \"startOfNextBusinessWeek\"\n  | \"startOfNextFiscalHalf\"\n  | \"startOfNextFiscalQuarter\"\n  | \"startOfNextFiscalYear\"\n  | \"startOfNextMonth\"\n  | \"startOfNextWeek\"\n  | \"startOfPreviousRollingHalf\"\n  | \"startOfPreviousRollingQuarter\"\n  | \"startOfPreviousRollingYear\"\n  | \"startOfSameFiscalHalfLastFiscalYear\"\n  | \"startOfSameFiscalQuarterLastFiscalYear\"\n  | \"startOfSameMonthLastFiscalQuarter\"\n  | \"startOfSameMonthLastFiscalYear\"\n  | \"startOfThisBusinessWeek\"\n  | \"startOfThisFiscalHalf\"\n  | \"startOfThisFiscalQuarter\"\n  | \"startOfThisFiscalYear\"\n  | \"startOfThisMonth\"\n  | \"startOfThisWeek\"\n  | \"startOfThisYear\"\n  | \"startOfWeekBeforeLast\"\n  | \"tenDaysAgo\"\n  | \"tenDaysFromNow\"\n  | \"thirtyDaysAgo\"\n  | \"thirtyDaysFromNow\"\n  | \"thisBusinessWeek\"\n  | \"thisFiscalHalf\"\n  | \"thisFiscalHalfToDate\"\n  | \"thisFiscalQuarter\"\n  | \"thisFiscalQuarterToDate\"\n  | \"thisFiscalYear\"\n  | \"thisFiscalYearToDate\"\n  | \"thisMonth\"\n  | \"thisMonthToDate\"\n  | \"thisRollingHalf\"\n  | \"thisRollingQuarter\"\n  | \"thisRollingYear\"\n  | \"thisWeek\"\n  | \"thisWeekToDate\"\n  | \"thisYear\"\n  | \"threeDaysAgo\"\n  | \"threeDaysFromNow\"\n  | \"threeFiscalQuartersAgo\"\n  | \"threeFiscalQuartersAgoToDate\"\n  | \"threeFiscalYearsAgo\"\n  | \"threeFiscalYearsAgoToDate\"\n  | \"threeMonthsAgo\"\n  | \"threeMonthsAgoToDate\"\n  | \"today\"\n  | \"tomorrow\"\n  | \"twoDaysAgo\"\n  | \"twoDaysFromNow\"\n  | \"weekAfterNext\"\n  | \"weekAfterNextToDate\"\n  | \"weekBeforeLast\"\n  | \"weekBeforeLastToDate\"\n  | \"yesterday\";\n\nexport type DeletedRecordType =\n  | \"advInterCompanyJournalEntry\"\n  | \"assemblyBuild\"\n  | \"assemblyItem\"\n  | \"assemblyUnbuild\"\n  | \"billingSchedule\"\n  | \"bin\"\n  | \"binTransfer\"\n  | \"binWorksheet\"\n  | \"bom\"\n  | \"bomRevision\"\n  | \"calendarEvent\"\n  | \"campaign\"\n  | \"cashRefund\"\n  | \"cashSale\"\n  | \"charge\"\n  | \"check\"\n  | \"contact\"\n  | \"contactCategory\"\n  | \"costCategory\"\n  | \"couponCode\"\n  | \"creditMemo\"\n  | \"currencyRate\"\n  | \"customPurchase\"\n  | \"customRecord\"\n  | \"customSale\"\n  | \"customTransaction\"\n  | \"customer\"\n  | \"customerCategory\"\n  | \"customerMessage\"\n  | \"customerDeposit\"\n  | \"customerPayment\"\n  | \"customerRefund\"\n  | \"customerStatus\"\n  | \"customerSubsidiaryRelationship\"\n  | \"deposit\"\n  | \"depositApplication\"\n  | \"descriptionItem\"\n  | \"discountItem\"\n  | \"downloadItem\"\n  | \"employee\"\n  | \"estimate\"\n  | \"expenseReport\"\n  | \"file\"\n  | \"folder\"\n  | \"giftCertificateItem\"\n  | \"globalAccountMapping\"\n  | \"interCompanyJournalEntry\"\n  | \"interCompanyTransferOrder\"\n  | \"inventoryAdjustment\"\n  | \"inventoryCostRevaluation\"\n  | \"inventoryItem\"\n  | \"inventoryNumber\"\n  | \"inventoryTransfer\"\n  | \"invoice\"\n  | \"issue\"\n  | \"itemAccountMapping\"\n  | \"itemDemandPlan\"\n  | \"itemFulfillment\"\n  | \"itemSupplyPlan\"\n  | \"itemGroup\"\n  | \"itemReceipt\"\n  | \"itemRevision\"\n  | \"job\"\n  | \"jobStatus\"\n  | \"journalEntry\"\n  | \"kitItem\"\n  | \"lotNumberedAssemblyItem\"\n  | \"lotNumberedInventoryItem\"\n  | \"markupItem\"\n  | \"message\"\n  | \"manufacturingCostTemplate\"\n  | \"manufacturingOperationTask\"\n  | \"manufacturingRouting\"\n  | \"merchandiseHierarchyNode\"\n  | \"nexus\"\n  | \"nonInventoryPurchaseItem\"\n  | \"nonInventoryResaleItem\"\n  | \"nonInventorySaleItem\"\n  | \"note\"\n  | \"noteType\"\n  | \"opportunity\"\n  | \"otherChargePurchaseItem\"\n  | \"otherChargeResaleItem\"\n  | \"otherChargeSaleItem\"\n  | \"otherNameCategory\"\n  | \"partner\"\n  | \"paycheck\"\n  | \"paymentItem\"\n  | \"paymentMethod\"\n  | \"payrollItem\"\n  | \"periodEndJournal\"\n  | \"phoneCall\"\n  | \"priceLevel\"\n  | \"pricingGroup\"\n  | \"projectTask\"\n  | \"promotionCode\"\n  | \"purchaseOrder\"\n  | \"purchaseRequisition\"\n  | \"resourceAllocation\"\n  | \"returnAuthorization\"\n  | \"salesOrder\"\n  | \"salesTaxItem\"\n  | \"serializedAssemblyItem\"\n  | \"serializedInventoryItem\"\n  | \"servicePurchaseItem\"\n  | \"serviceResaleItem\"\n  | \"serviceSaleItem\"\n  | \"statisticalJournalEntry\"\n  | \"subtotalItem\"\n  | \"supportCase\"\n  | \"supportCaseIssue\"\n  | \"supportCaseOrigin\"\n  | \"supportCasePriority\"\n  | \"supportCaseStatus\"\n  | \"supportCaseType\"\n  | \"task\"\n  | \"term\"\n  | \"timeSheet\"\n  | \"transferOrder\"\n  | \"usage\"\n  | \"vendor\"\n  | \"vendorBill\"\n  | \"vendorCredit\"\n  | \"vendorPayment\"\n  | \"vendorReturnAuthorization\"\n  | \"vendorSubsidiaryRelationship\"\n  | \"winLossReason\"\n  | \"workOrder\"\n  | \"workOrderIssue\"\n  | \"workOrderCompletion\"\n  | \"workOrderClose\";\n\nexport type AsyncStatusType =\n  | \"failed\"\n  | \"finishedWithErrors\"\n  | \"pending\"\n  | \"processing\"\n  | \"finished\"\n  | \"retry\";\n\nexport type SearchRecordType =\n  | \"account\"\n  | \"accountingPeriod\"\n  | \"accountingTransaction\"\n  | \"billingAccount\"\n  | \"billingSchedule\"\n  | \"bin\"\n  | \"bom\"\n  | \"bomRevision\"\n  | \"budget\"\n  | \"calendarEvent\"\n  | \"campaign\"\n  | \"charge\"\n  | \"classification\"\n  | \"contact\"\n  | \"contactCategory\"\n  | \"contactRole\"\n  | \"costCategory\"\n  | \"consolidatedExchangeRate\"\n  | \"couponCode\"\n  | \"currencyRate\"\n  | \"customer\"\n  | \"customerCategory\"\n  | \"customerMessage\"\n  | \"customerStatus\"\n  | \"customerSubsidiaryRelationship\"\n  | \"customList\"\n  | \"customRecord\"\n  | \"department\"\n  | \"employee\"\n  | \"entityGroup\"\n  | \"expenseCategory\"\n  | \"fairValuePrice\"\n  | \"file\"\n  | \"folder\"\n  | \"giftCertificate\"\n  | \"globalAccountMapping\"\n  | \"hcmJob\"\n  | \"inboundShipment\"\n  | \"inventoryNumber\"\n  | \"item\"\n  | \"itemAccountMapping\"\n  | \"itemDemandPlan\"\n  | \"itemRevision\"\n  | \"itemSupplyPlan\"\n  | \"issue\"\n  | \"job\"\n  | \"jobStatus\"\n  | \"jobType\"\n  | \"location\"\n  | \"manufacturingCostTemplate\"\n  | \"manufacturingOperationTask\"\n  | \"manufacturingRouting\"\n  | \"merchandiseHierarchyNode\"\n  | \"message\"\n  | \"nexus\"\n  | \"note\"\n  | \"noteType\"\n  | \"opportunity\"\n  | \"otherNameCategory\"\n  | \"partner\"\n  | \"partnerCategory\"\n  | \"paycheck\"\n  | \"paymentMethod\"\n  | \"payrollItem\"\n  | \"phoneCall\"\n  | \"priceLevel\"\n  | \"pricingGroup\"\n  | \"projectTask\"\n  | \"promotionCode\"\n  | \"resourceAllocation\"\n  | \"revRecSchedule\"\n  | \"revRecTemplate\"\n  | \"salesRole\"\n  | \"salesTaxItem\"\n  | \"solution\"\n  | \"siteCategory\"\n  | \"subsidiary\"\n  | \"supportCase\"\n  | \"task\"\n  | \"taxGroup\"\n  | \"taxType\"\n  | \"term\"\n  | \"timeBill\"\n  | \"timeSheet\"\n  | \"topic\"\n  | \"transaction\"\n  | \"unitsType\"\n  | \"usage\"\n  | \"vendor\"\n  | \"vendorCategory\"\n  | \"vendorSubsidiaryRelationship\"\n  | \"winLossReason\";\n\nexport type SearchStringFieldOperator =\n  | \"contains\"\n  | \"doesNotContain\"\n  | \"doesNotStartWith\"\n  | \"empty\"\n  | \"hasKeywords\"\n  | \"is\"\n  | \"isNot\"\n  | \"notEmpty\"\n  | \"startsWith\";\n\nexport type SearchLongFieldOperator =\n  | \"between\"\n  | \"empty\"\n  | \"equalTo\"\n  | \"greaterThan\"\n  | \"greaterThanOrEqualTo\"\n  | \"lessThan\"\n  | \"lessThanOrEqualTo\"\n  | \"notBetween\"\n  | \"notEmpty\"\n  | \"notEqualTo\"\n  | \"notGreaterThan\"\n  | \"notGreaterThanOrEqualTo\"\n  | \"notLessThan\"\n  | \"notLessThanOrEqualTo\";\n\nexport type InitializeAuxRefType =\n  | \"shippingGroup\"\n  | \"arAccount\"\n  | \"apAccount\"\n  | \"itemFulfillment\"\n  | \"tranType\";\n\nexport type GetCustomizationType =\n  | \"crmCustomField\"\n  | \"customList\"\n  | \"customRecordType\"\n  | \"customSegment\"\n  | \"customTransactionType\"\n  | \"entityCustomField\"\n  | \"itemCustomField\"\n  | \"itemNumberCustomField\"\n  | \"itemOptionCustomField\"\n  | \"otherCustomField\"\n  | \"transactionBodyCustomField\"\n  | \"transactionColumnCustomField\";\n\nexport type SignatureAlgorithm = \"HMAC_SHA256\" | \"HMAC_SHA1\";\n\nexport type RecordType =\n  | \"account\"\n  | \"accountingPeriod\"\n  | \"advInterCompanyJournalEntry\"\n  | \"assemblyBuild\"\n  | \"assemblyUnbuild\"\n  | \"assemblyItem\"\n  | \"billingAccount\"\n  | \"billingSchedule\"\n  | \"bin\"\n  | \"binTransfer\"\n  | \"binWorksheet\"\n  | \"bom\"\n  | \"bomRevision\"\n  | \"budget\"\n  | \"budgetCategory\"\n  | \"calendarEvent\"\n  | \"campaign\"\n  | \"campaignAudience\"\n  | \"campaignCategory\"\n  | \"campaignChannel\"\n  | \"campaignFamily\"\n  | \"campaignOffer\"\n  | \"campaignResponse\"\n  | \"campaignSearchEngine\"\n  | \"campaignSubscription\"\n  | \"campaignVertical\"\n  | \"cashRefund\"\n  | \"cashSale\"\n  | \"check\"\n  | \"charge\"\n  | \"classification\"\n  | \"consolidatedExchangeRate\"\n  | \"contact\"\n  | \"contactCategory\"\n  | \"contactRole\"\n  | \"costCategory\"\n  | \"couponCode\"\n  | \"creditMemo\"\n  | \"crmCustomField\"\n  | \"currency\"\n  | \"currencyRate\"\n  | \"customList\"\n  | \"customPurchase\"\n  | \"customRecord\"\n  | \"customRecordCustomField\"\n  | \"customRecordType\"\n  | \"customSale\"\n  | \"customSegment\"\n  | \"customTransaction\"\n  | \"customTransactionType\"\n  | \"customer\"\n  | \"customerCategory\"\n  | \"customerDeposit\"\n  | \"customerMessage\"\n  | \"customerPayment\"\n  | \"customerRefund\"\n  | \"customerStatus\"\n  | \"customerSubsidiaryRelationship\"\n  | \"deposit\"\n  | \"depositApplication\"\n  | \"department\"\n  | \"descriptionItem\"\n  | \"discountItem\"\n  | \"downloadItem\"\n  | \"employee\"\n  | \"entityCustomField\"\n  | \"entityGroup\"\n  | \"estimate\"\n  | \"expenseCategory\"\n  | \"expenseReport\"\n  | \"fairValuePrice\"\n  | \"file\"\n  | \"folder\"\n  | \"generalToken\"\n  | \"giftCertificate\"\n  | \"giftCertificateItem\"\n  | \"globalAccountMapping\"\n  | \"hcmJob\"\n  | \"inboundShipment\"\n  | \"interCompanyJournalEntry\"\n  | \"interCompanyTransferOrder\"\n  | \"inventoryAdjustment\"\n  | \"inventoryCostRevaluation\"\n  | \"inventoryItem\"\n  | \"inventoryNumber\"\n  | \"inventoryTransfer\"\n  | \"invoice\"\n  | \"itemAccountMapping\"\n  | \"itemCustomField\"\n  | \"itemDemandPlan\"\n  | \"itemFulfillment\"\n  | \"itemGroup\"\n  | \"itemNumberCustomField\"\n  | \"itemOptionCustomField\"\n  | \"itemSupplyPlan\"\n  | \"itemRevision\"\n  | \"issue\"\n  | \"job\"\n  | \"jobStatus\"\n  | \"jobType\"\n  | \"itemReceipt\"\n  | \"journalEntry\"\n  | \"kitItem\"\n  | \"leadSource\"\n  | \"location\"\n  | \"lotNumberedInventoryItem\"\n  | \"lotNumberedAssemblyItem\"\n  | \"markupItem\"\n  | \"merchandiseHierarchyNode\"\n  | \"message\"\n  | \"manufacturingCostTemplate\"\n  | \"manufacturingOperationTask\"\n  | \"manufacturingRouting\"\n  | \"nexus\"\n  | \"nonInventoryPurchaseItem\"\n  | \"nonInventoryResaleItem\"\n  | \"nonInventorySaleItem\"\n  | \"note\"\n  | \"noteType\"\n  | \"opportunity\"\n  | \"otherChargePurchaseItem\"\n  | \"otherChargeResaleItem\"\n  | \"otherChargeSaleItem\"\n  | \"otherCustomField\"\n  | \"otherNameCategory\"\n  | \"partner\"\n  | \"partnerCategory\"\n  | \"paycheck\"\n  | \"paycheckJournal\"\n  | \"paymentCard\"\n  | \"paymentCardToken\"\n  | \"paymentItem\"\n  | \"paymentMethod\"\n  | \"payrollItem\"\n  | \"periodEndJournal\"\n  | \"phoneCall\"\n  | \"priceLevel\"\n  | \"pricingGroup\"\n  | \"projectTask\"\n  | \"promotionCode\"\n  | \"purchaseOrder\"\n  | \"purchaseRequisition\"\n  | \"resourceAllocation\"\n  | \"returnAuthorization\"\n  | \"revRecSchedule\"\n  | \"revRecTemplate\"\n  | \"salesOrder\"\n  | \"salesRole\"\n  | \"salesTaxItem\"\n  | \"serializedInventoryItem\"\n  | \"serializedAssemblyItem\"\n  | \"servicePurchaseItem\"\n  | \"serviceResaleItem\"\n  | \"serviceSaleItem\"\n  | \"solution\"\n  | \"siteCategory\"\n  | \"state\"\n  | \"statisticalJournalEntry\"\n  | \"subsidiary\"\n  | \"subtotalItem\"\n  | \"supportCase\"\n  | \"supportCaseIssue\"\n  | \"supportCaseOrigin\"\n  | \"supportCasePriority\"\n  | \"supportCaseStatus\"\n  | \"supportCaseType\"\n  | \"task\"\n  | \"taxAcct\"\n  | \"taxGroup\"\n  | \"taxType\"\n  | \"term\"\n  | \"timeBill\"\n  | \"timeSheet\"\n  | \"topic\"\n  | \"transferOrder\"\n  | \"transactionBodyCustomField\"\n  | \"transactionColumnCustomField\"\n  | \"unitsType\"\n  | \"usage\"\n  | \"vendor\"\n  | \"vendorCategory\"\n  | \"vendorBill\"\n  | \"vendorCredit\"\n  | \"vendorPayment\"\n  | \"vendorReturnAuthorization\"\n  | \"vendorSubsidiaryRelationship\"\n  | \"winLossReason\"\n  | \"workOrder\"\n  | \"workOrderIssue\"\n  | \"workOrderCompletion\"\n  | \"workOrderClose\";\n\nexport type SearchDoubleFieldOperator =\n  | \"between\"\n  | \"empty\"\n  | \"equalTo\"\n  | \"greaterThan\"\n  | \"greaterThanOrEqualTo\"\n  | \"lessThan\"\n  | \"lessThanOrEqualTo\"\n  | \"notBetween\"\n  | \"notEmpty\"\n  | \"notEqualTo\"\n  | \"notGreaterThan\"\n  | \"notGreaterThanOrEqualTo\"\n  | \"notLessThan\"\n  | \"notLessThanOrEqualTo\";\n\nexport type CalendarEventAttendeeResponse =\n  | \"_accepted\"\n  | \"_declined\"\n  | \"_noResponse\"\n  | \"_tentative\";\n\nexport type SearchEnumMultiSelectFieldOperator = \"anyOf\" | \"noneOf\";\n\nexport type GetSelectValueFilterOperator = \"contains\" | \"is\" | \"startsWith\";\n\nexport type GetAllRecordType =\n  | \"budgetCategory\"\n  | \"campaignAudience\"\n  | \"campaignCategory\"\n  | \"campaignChannel\"\n  | \"campaignFamily\"\n  | \"campaignOffer\"\n  | \"campaignSearchEngine\"\n  | \"campaignSubscription\"\n  | \"campaignVertical\"\n  | \"currency\"\n  | \"leadSource\"\n  | \"state\"\n  | \"supportCaseIssue\"\n  | \"supportCaseOrigin\"\n  | \"supportCasePriority\"\n  | \"supportCaseStatus\"\n  | \"supportCaseType\"\n  | \"taxAcct\";\n\nexport type InitializeRefType =\n  | \"assemblyItem\"\n  | \"assemblyBuild\"\n  | \"cashSale\"\n  | \"creditMemo\"\n  | \"customer\"\n  | \"customerDeposit\"\n  | \"customPurchase\"\n  | \"customSale\"\n  | \"employee\"\n  | \"estimate\"\n  | \"interCompanyTransferOrder\"\n  | \"invoice\"\n  | \"location\"\n  | \"lotNumberedAssemblyItem\"\n  | \"opportunity\"\n  | \"purchaseOrder\"\n  | \"purchaseRequisition\"\n  | \"returnAuthorization\"\n  | \"salesOrder\"\n  | \"serializedAssemblyItem\"\n  | \"transferOrder\"\n  | \"vendor\"\n  | \"vendorBill\"\n  | \"vendorReturnAuthorization\"\n  | \"workOrder\";\n\nexport type InitializeType =\n  | \"assemblyBuild\"\n  | \"assemblyUnbuild\"\n  | \"binWorksheet\"\n  | \"cashRefund\"\n  | \"cashSale\"\n  | \"creditMemo\"\n  | \"customerPayment\"\n  | \"customerRefund\"\n  | \"customPurchase\"\n  | \"customSale\"\n  | \"depositApplication\"\n  | \"estimate\"\n  | \"invoice\"\n  | \"itemFulfillment\"\n  | \"itemReceipt\"\n  | \"inventoryTransfer\"\n  | \"purchaseOrder\"\n  | \"returnAuthorization\"\n  | \"salesOrder\"\n  | \"vendorBill\"\n  | \"vendorCredit\"\n  | \"vendorReturnAuthorization\"\n  | \"vendorPayment\"\n  | \"workOrder\"\n  | \"workOrderIssue\"\n  | \"workOrderCompletion\"\n  | \"workOrderClose\";\n\nexport type SearchTextNumberFieldOperator =\n  | \"between\"\n  | \"empty\"\n  | \"equalTo\"\n  | \"greaterThan\"\n  | \"greaterThanOrEqualTo\"\n  | \"lessThan\"\n  | \"lessThanOrEqualTo\"\n  | \"notBetween\"\n  | \"notEmpty\"\n  | \"notEqualTo\"\n  | \"notGreaterThan\"\n  | \"notGreaterThanOrEqualTo\"\n  | \"notLessThan\"\n  | \"notLessThanOrEqualTo\";\n\nexport type SearchMultiSelectFieldOperator = \"anyOf\" | \"noneOf\";\n\nexport type DurationUnit = \"hour\";\n"]}