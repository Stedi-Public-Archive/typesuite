"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
//# sourceMappingURL=data:application/json;base64,{"version":3,"file":"platform_common_types.js","sourceRoot":"","sources":["../../../src/netsuite_webservices/2019_2/platform_common_types.ts"],"names":[],"mappings":"","sourcesContent":["export type VsoeDeferral =\n  | \"_deferBundleUntilDelivered\"\n  | \"_deferUntilItemDelivered\";\n\nexport type RevenueCommitStatus =\n  | \"_committed\"\n  | \"_partiallyCommitted\"\n  | \"_pendingCommitment\";\n\nexport type PostingPeriodDate =\n  | \"_firstFiscalQuarterOfLastFy\"\n  | \"_firstFiscalQuarterOfThisFy\"\n  | \"_fiscalQuarterBeforeLast\"\n  | \"_fiscalYearBeforeLast\"\n  | \"_fourthFiscalQuarterOfLastFy\"\n  | \"_fourthFiscalQuarterOfThisFy\"\n  | \"_lastFiscalQuarter\"\n  | \"_lastFiscalQuarterOneFiscalYearAgo\"\n  | \"_lastFiscalQuarterToPeriod\"\n  | \"_lastFiscalYear\"\n  | \"_lastFiscalYearToPeriod\"\n  | \"_lastPeriod\"\n  | \"_lastPeriodOneFiscalQuarterAgo\"\n  | \"_lastPeriodOneFiscalYearAgo\"\n  | \"_lastRolling18periods\"\n  | \"_lastRolling6fiscalQuarters\"\n  | \"_periodBeforeLast\"\n  | \"_sameFiscalQuarterOfLastFy\"\n  | \"_sameFiscalQuarterOfLastFyToPeriod\"\n  | \"_samePeriodOfLastFiscalQuarter\"\n  | \"_samePeriodOfLastFy\"\n  | \"_secondFiscalQuarterOfLastFy\"\n  | \"_secondFiscalQuarterOfThisFy\"\n  | \"_thirdFiscalQuarterOfLastFy\"\n  | \"_thirdFiscalQuarterOfThisFy\"\n  | \"_thisFiscalQuarter\"\n  | \"_thisFiscalQuarterToPeriod\"\n  | \"_thisFiscalYear\"\n  | \"_thisFiscalYearToPeriod\"\n  | \"_thisPeriod\";\n\nexport type VsoePermitDiscount = \"_asAllowed\" | \"_never\";\n\nexport type ShippingCarrier = \"_fedexUspsMore\" | \"_ups\";\n\nexport type GlobalSubscriptionStatus =\n  | \"_confirmedOptIn\"\n  | \"_confirmedOptOut\"\n  | \"_softOptIn\"\n  | \"_softOptOut\";\n\nexport type ItemSource =\n  | \"_stock\"\n  | \"_phantom\"\n  | \"_workOrder\"\n  | \"_purchaseOrder\";\n\nexport type TransactionBillVarianceStatus =\n  | \"_journalNotPosted\"\n  | \"_journalPosted\"\n  | \"_noVariances\";\n\nexport type PermissionCode =\n  | \"_accessPaymentAuditLog\"\n  | \"_accessTokenManagement\"\n  | \"_accountDetail\"\n  | \"_accounting\"\n  | \"_accountingBook\"\n  | \"_accountingLists\"\n  | \"_accounts\"\n  | \"_accountsPayable\"\n  | \"_accountsPayableGraphing\"\n  | \"_accountsPayableRegister\"\n  | \"_accountsReceivable\"\n  | \"_accountsReceivableGraphing\"\n  | \"_accountsReceivableRegister\"\n  | \"_accountsReceivableUnbilled\"\n  | \"_address\"\n  | \"_adjustInventory\"\n  | \"_adjustInventoryWorksheet\"\n  | \"_admindocs\"\n  | \"_admindocsEu\"\n  | \"_admindocsNa\"\n  | \"_admindocsOther\"\n  | \"_adpImportData\"\n  | \"_adpSetup\"\n  | \"_advancedAnalytics\"\n  | \"_advancedGovernmentIssuedIds\"\n  | \"_advancedOrderManagement\"\n  | \"_advancedPDFHTMLTemplates\"\n  | \"_allocationSchedules\"\n  | \"_allowJsHtmlUploads\"\n  | \"_allowNonGLChanges\"\n  | \"_allowPendingBookJournalEntry\"\n  | \"_amendW4\"\n  | \"_amortizationReports\"\n  | \"_amortizationSchedules\"\n  | \"_analyticsAdministrator\"\n  | \"_applicationPublishers\"\n  | \"_approveDirectDeposit\"\n  | \"_approveEFT\"\n  | \"_approveOnlineBillPayments\"\n  | \"_approveVendorPayments\"\n  | \"_auditTrail\"\n  | \"_automatedCashApplication\"\n  | \"_backupYourData\"\n  | \"_balanceLocationCostingGroupAccounts\"\n  | \"_balanceSheet\"\n  | \"_balanceTransactionsBySegments\"\n  | \"_balancingJournals\"\n  | \"_bankAccountRegisters\"\n  | \"_bankConnectivityPlugInConfiguration\"\n  | \"_basicGovernmentIssuedIds\"\n  | \"_billInboundShipment\"\n  | \"_billingInformation\"\n  | \"_billingSchedules\"\n  | \"_billOfDistribution\"\n  | \"_billOfMaterials\"\n  | \"_billOfMaterialsInquiry\"\n  | \"_billPurchaseOrders\"\n  | \"_bills\"\n  | \"_billSalesOrders\"\n  | \"_bins\"\n  | \"_binTransfer\"\n  | \"_binWorksheet\"\n  | \"_blanketPurchaseOrder\"\n  | \"_blanketPurchaseOrderApproval\"\n  | \"_budget\"\n  | \"_buildAssemblies\"\n  | \"_buildWorkOrders\"\n  | \"_calculateTime\"\n  | \"_calendar\"\n  | \"_campaignHistory\"\n  | \"_caseAlerts\"\n  | \"_cases\"\n  | \"_cashFlowStatement\"\n  | \"_cashSale\"\n  | \"_cashSaleRefund\"\n  | \"_certificateAccess\"\n  | \"_certificateManagement\"\n  | \"_changeEmailOrPassword\"\n  | \"_changeRole\"\n  | \"_chargeRule\"\n  | \"_chargeRunRules\"\n  | \"_check\"\n  | \"_checkItemAvailability\"\n  | \"_classes\"\n  | \"_classMapping\"\n  | \"_closeAccount\"\n  | \"_closeWorkOrders\"\n  | \"_colorThemes\"\n  | \"_commerceCategories\"\n  | \"_commissionFeatureSetup\"\n  | \"_commissionReports\"\n  | \"_commitOrders\"\n  | \"_commitPayroll\"\n  | \"_companies\"\n  | \"_companyInformation\"\n  | \"_competitors\"\n  | \"_componentWhereUsed\"\n  | \"_contactRoles\"\n  | \"_contacts\"\n  | \"_controlSuitescriptAndWorkflowTriggersInWebServicesRequest\"\n  | \"_controlSuitescriptAndWorkflowTriggersPerCsvImport\"\n  | \"_convertClassesToDepartments\"\n  | \"_convertClassesToLocations\"\n  | \"_copyBudgets\"\n  | \"_copyChartOfAccountsToNewCompany\"\n  | \"_copyProjectTasks\"\n  | \"_coreAdministrationPermissions\"\n  | \"_costedBillOfMaterialsInquiry\"\n  | \"_costOfGoodsSoldRegisters\"\n  | \"_countInventory\"\n  | \"_createAllocationSchedules\"\n  | \"_createConsolidationCompany\"\n  | \"_createFiscalCalendar\"\n  | \"_createInventoryCounts\"\n  | \"_createJobsFromSalesTransactions\"\n  | \"_creditCard\"\n  | \"_creditCardProcessing\"\n  | \"_creditCardRefund\"\n  | \"_creditCardRegisters\"\n  | \"_creditMemo\"\n  | \"_creditReturns\"\n  | \"_crmGroups\"\n  | \"_crmLists\"\n  | \"_cspSetup\"\n  | \"_currency\"\n  | \"_currencyAdjustmentJournal\"\n  | \"_currencyRevaluation\"\n  | \"_customAddressForm\"\n  | \"_customBodyFields\"\n  | \"_customCenterCategories\"\n  | \"_customCenterLinks\"\n  | \"_customCenters\"\n  | \"_customCenterTabs\"\n  | \"_customColumnFields\"\n  | \"_customEntityFields\"\n  | \"_customEntryForms\"\n  | \"_customerCharge\"\n  | \"_customerDeposit\"\n  | \"_customerPayment\"\n  | \"_customerPaymentAuthorization\"\n  | \"_customerProfile\"\n  | \"_customerRefund\"\n  | \"_customers\"\n  | \"_customerStatus\"\n  | \"_customEventFields\"\n  | \"_customFields\"\n  | \"_customGlLinesPlugInAuditLog\"\n  | \"_customGlLinesPlugInAuditLogSegments\"\n  | \"_customHTMLLayouts\"\n  | \"_customItemFields\"\n  | \"_customItemNumberFields\"\n  | \"_customizeFieldLevelHelp\"\n  | \"_customizePage\"\n  | \"_customLists\"\n  | \"_customPDFLayouts\"\n  | \"_customRecognitionEventType\"\n  | \"_customRecordEntries\"\n  | \"_customRecordTypes\"\n  | \"_customSegments\"\n  | \"_customSublist\"\n  | \"_customSublists\"\n  | \"_customSubtabs\"\n  | \"_customTransactionFields\"\n  | \"_customTransactionForms\"\n  | \"_customTransactionTypes\"\n  | \"_deferredExpenseRegisters\"\n  | \"_deferredExpenseReports\"\n  | \"_deferredRevenueRegisters\"\n  | \"_deleteAllData\"\n  | \"_deletedRecords\"\n  | \"_deleteEvent\"\n  | \"_departmentMapping\"\n  | \"_departments\"\n  | \"_deposit\"\n  | \"_depositApplication\"\n  | \"_deviceIdManagement\"\n  | \"_directDepositStatus\"\n  | \"_distributeInventory\"\n  | \"_distributionNetwork\"\n  | \"_documentsAndFiles\"\n  | \"_duplicateCaseManagement\"\n  | \"_duplicateDetectionSetup\"\n  | \"_duplicateRecordManagement\"\n  | \"_editBankingInformation\"\n  | \"_editForecast\"\n  | \"_editManagerForecast\"\n  | \"_editProfile\"\n  | \"_eftStatus\"\n  | \"_emailReports\"\n  | \"_emailTemplate\"\n  | \"_employeeAccessTab\"\n  | \"_employeeAdministration\"\n  | \"_employeeCenterPublishing\"\n  | \"_employeeChangeReason\"\n  | \"_employeeChangeRequest\"\n  | \"_employeeChangeType\"\n  | \"_employeeCommissionSchedulesPlans\"\n  | \"_employeeCommissionTransaction\"\n  | \"_employeeCommissionTransactionApproval\"\n  | \"_employeeConfidential\"\n  | \"_employeeEffectiveDating\"\n  | \"_employeePublic\"\n  | \"_employeeRecord\"\n  | \"_employeeReminders\"\n  | \"_employees\"\n  | \"_employeeSelf\"\n  | \"_employeeSocialSecurityNumbers\"\n  | \"_enableFeatures\"\n  | \"_enterCompletions\"\n  | \"_enterOpeningBalances\"\n  | \"_enterVendorCredits\"\n  | \"_enterYearToDatePayrollAdjustments\"\n  | \"_entityAccountMapping\"\n  | \"_equityRegisters\"\n  | \"_escalationAssignment\"\n  | \"_escalationAssignmentRule\"\n  | \"_establishQuotas\"\n  | \"_estimate\"\n  | \"_events\"\n  | \"_expenseAmortizationPlan\"\n  | \"_expenseAmortizationRule\"\n  | \"_expenseCategories\"\n  | \"_expenseRegisters\"\n  | \"_expenseReport\"\n  | \"_expenses\"\n  | \"_exportAsIIF\"\n  | \"_exportLists\"\n  | \"_fairValueDimension\"\n  | \"_fairValueFormula\"\n  | \"_fairValuePrice\"\n  | \"_faxMessages\"\n  | \"_faxTemplate\"\n  | \"_financeCharge\"\n  | \"_financeChargePreferences\"\n  | \"_financialHistory\"\n  | \"_financialInstitutionRecords\"\n  | \"_financialStatementLayouts\"\n  | \"_financialStatements\"\n  | \"_financialStatementSections\"\n  | \"_findTransaction\"\n  | \"_fiscalCalendars\"\n  | \"_fixedAssetRegisters\"\n  | \"_foreignCurrencyVarianceMapping\"\n  | \"_form1099FederalMiscellaneousIncome\"\n  | \"_form940EmployersAnnualFederalUnemploymentTaxReturn\"\n  | \"_form941EmployersQuarterlyFederalTaxReturn\"\n  | \"_formW2WageAndTaxStatement\"\n  | \"_formW4EmployeesWithholdingAllowanceCertificate\"\n  | \"_fulfillmentExceptionReason\"\n  | \"_fulfillmentRequest\"\n  | \"_fulfillOrders\"\n  | \"_generalLedger\"\n  | \"_generalToken\"\n  | \"_generatePriceLists\"\n  | \"_generateRevenueCommitment\"\n  | \"_generateRevenueCommitmentReversals\"\n  | \"_generateSingleOrderRevenueContracts\"\n  | \"_generateStatements\"\n  | \"_genericResources\"\n  | \"_globalAccountMapping\"\n  | \"_globalInventoryRelationship\"\n  | \"_governmentIssuedIdTypes\"\n  | \"_grantingAccessToReports\"\n  | \"_gstSummaryReport\"\n  | \"_hideEmployeeInformationOnFinancialReports\"\n  | \"_importCSVFile\"\n  | \"_importOnlineBankingFile\"\n  | \"_importStateSalesTax\"\n  | \"_inboundShipment\"\n  | \"_income\"\n  | \"_incomeRegisters\"\n  | \"_incomeStatement\"\n  | \"_individualPaycheck\"\n  | \"_integration\"\n  | \"_integrationApplication\"\n  | \"_integrationApplications\"\n  | \"_intercompanyAdjustments\"\n  | \"_internalPublisher\"\n  | \"_inventory\"\n  | \"_inventoryCostTemplate\"\n  | \"_inventoryStatus\"\n  | \"_inventoryStatusChange\"\n  | \"_invoice\"\n  | \"_invoiceApproval\"\n  | \"_issueComponents\"\n  | \"_issueReports\"\n  | \"_issues\"\n  | \"_issueSetup\"\n  | \"_itemAccountMapping\"\n  | \"_itemCategoryLayouts\"\n  | \"_itemDemandPlan\"\n  | \"_itemFulfillment\"\n  | \"_itemProcessFamily\"\n  | \"_itemProcessGroup\"\n  | \"_itemReceipt\"\n  | \"_itemRevenueCategory\"\n  | \"_itemRevisions\"\n  | \"_items\"\n  | \"_itemSupplyPlan\"\n  | \"_itemTemplates\"\n  | \"_jobManagement\"\n  | \"_jobRequisitions\"\n  | \"_jobs\"\n  | \"_journalApproval\"\n  | \"_knowledgeBase\"\n  | \"_kpiScorecards\"\n  | \"_kudos\"\n  | \"_leadConversion\"\n  | \"_leadConversionMapping\"\n  | \"_leadSnapshotReminders\"\n  | \"_letterMessages\"\n  | \"_letterTemplate\"\n  | \"_locationCostingGroup\"\n  | \"_locationMapping\"\n  | \"_locations\"\n  | \"_lockTransactions\"\n  | \"_logInUsingAccessTokens\"\n  | \"_longTermLiabilityRegisters\"\n  | \"_mailMerge\"\n  | \"_makeJournalEntry\"\n  | \"_manageAccountingPeriods\"\n  | \"_manageCustomPermissions\"\n  | \"_managePayroll\"\n  | \"_manageRoles\"\n  | \"_manageTaxReportingPeriods\"\n  | \"_manageTranslation\"\n  | \"_manageUsers\"\n  | \"_manufacturingCostTemplate\"\n  | \"_manufacturingRouting\"\n  | \"_marketingCampaignReports\"\n  | \"_marketingCampaigns\"\n  | \"_marketingTemplate\"\n  | \"_markIssueAsShowStopper\"\n  | \"_markWorkOrdersBuilt\"\n  | \"_markWorkOrdersFirmed\"\n  | \"_markWorkOrdersReleased\"\n  | \"_massUpdates\"\n  | \"_matchingRulesForOnlineBanking\"\n  | \"_mediaFolders\"\n  | \"_memorizedTransactions\"\n  | \"_merchandiseHierarchyLevel\"\n  | \"_merchandiseHierarchyNode\"\n  | \"_merchandiseHierarchyVersion\"\n  | \"_migrateRevenueArrangementsAndPlans\"\n  | \"_mobileDeviceAccess\"\n  | \"_netWorth\"\n  | \"_newsItems\"\n  | \"_nonPostingRegisters\"\n  | \"_noPermissionNecessary\"\n  | \"_notesTab\"\n  | \"_notifications\"\n  | \"_onlineCaseForm\"\n  | \"_onlineCustomerForm\"\n  | \"_onlineCustomRecordForm\"\n  | \"_openidSingleSignOn\"\n  | \"_opportunity\"\n  | \"_organizationalValue\"\n  | \"_otherAssetRegisters\"\n  | \"_otherCurrentAssetRegisters\"\n  | \"_otherCurrentLiabilityRegisters\"\n  | \"_otherCustomFields\"\n  | \"_otherExpenseRegisters\"\n  | \"_otherIncomeRegisters\"\n  | \"_otherLists\"\n  | \"_otherNames\"\n  | \"_outboundRequest\"\n  | \"_outlookIntegration\"\n  | \"_outlookIntegration3\"\n  | \"_overrideEstimatedCostOnTransactions\"\n  | \"_overridePaymentHold\"\n  | \"_overridePeriodRestrictions\"\n  | \"_ownershipTransfer\"\n  | \"_partnerAuthorizedCommissionReports\"\n  | \"_partnerCommissionReports\"\n  | \"_partnerCommissionSchedulesPlans\"\n  | \"_partnerCommissionTransaction\"\n  | \"_partnerCommissionTransactionApproval\"\n  | \"_partnerContribution\"\n  | \"_partners\"\n  | \"_payBills\"\n  | \"_paycheckJournal\"\n  | \"_paychecks\"\n  | \"_paymentCard\"\n  | \"_paymentCardToken\"\n  | \"_paymentInstruments\"\n  | \"_paymentMethods\"\n  | \"_payrollCheckRegister\"\n  | \"_payrollHoursAndEarnings\"\n  | \"_payrollItems\"\n  | \"_payrollJournalReport\"\n  | \"_payrollLiabilityPayments\"\n  | \"_payrollLiabilityReport\"\n  | \"_payrollStateWithholding\"\n  | \"_payrollSummaryAndDetailReports\"\n  | \"_paySalesTax\"\n  | \"_payTaxLiability\"\n  | \"_pdfMessages\"\n  | \"_pdfTemplate\"\n  | \"_performSearch\"\n  | \"_periodClosingManagement\"\n  | \"_periodEndFinancialStatements\"\n  | \"_periodEndJournals\"\n  | \"_persistSearch\"\n  | \"_phasedProcesses\"\n  | \"_phoneCalls\"\n  | \"_pickStrategy\"\n  | \"_pickTask\"\n  | \"_plannedRevenue\"\n  | \"_plannedStandardCost\"\n  | \"_positions\"\n  | \"_postingPeriodOnTransactions\"\n  | \"_postTime\"\n  | \"_postVendorBillVariances\"\n  | \"_presentationCategories\"\n  | \"_printChecksAndForms\"\n  | \"_printEmailFax\"\n  | \"_printShipmentDocuments\"\n  | \"_processGSTRefund\"\n  | \"_processPayroll\"\n  | \"_projectProfitability\"\n  | \"_projectProfitabilitySetup\"\n  | \"_projectProjectTemplateConversion\"\n  | \"_projectRevenueRules\"\n  | \"_projectTasks\"\n  | \"_projectTemplates\"\n  | \"_promotionCode\"\n  | \"_provisioning\"\n  | \"_provisioningForQa\"\n  | \"_provisionNewAccountOnTestdrive\"\n  | \"_provisionTestDrive\"\n  | \"_pstSummaryReport\"\n  | \"_publicTemplateCategories\"\n  | \"_publishDashboards\"\n  | \"_publishEmployeeList\"\n  | \"_publishForms\"\n  | \"_publishKnowledgeBase\"\n  | \"_publishRSSFeeds\"\n  | \"_publishSearch\"\n  | \"_purchaseContract\"\n  | \"_purchaseContractApproval\"\n  | \"_purchaseOrder\"\n  | \"_purchaseOrderReports\"\n  | \"_purchases\"\n  | \"_quantityPricingSchedules\"\n  | \"_quotaReports\"\n  | \"_receiveOrder\"\n  | \"_receiveReturns\"\n  | \"_recognizeGiftCertificateIncome\"\n  | \"_reconcile\"\n  | \"_reconcileReporting\"\n  | \"_recordCustomField\"\n  | \"_refundReturns\"\n  | \"_relatedItems\"\n  | \"_reportCustomization\"\n  | \"_reportScheduling\"\n  | \"_requestForQuote\"\n  | \"_requisition\"\n  | \"_requisitionApproval\"\n  | \"_resource\"\n  | \"_resourceAllocationApproval\"\n  | \"_resourceAllocationReports\"\n  | \"_resourceAllocations\"\n  | \"_resourceGroups\"\n  | \"_restWebServices\"\n  | \"_returnAuthApproval\"\n  | \"_returnAuthorization\"\n  | \"_returnAuthorizationReports\"\n  | \"_revalueInventoryCost\"\n  | \"_revenueArrangement\"\n  | \"_revenueArrangementApproval\"\n  | \"_revenueCommitment\"\n  | \"_revenueCommitmentReversal\"\n  | \"_revenueContracts\"\n  | \"_revenueElement\"\n  | \"_revenueManagementVSOE\"\n  | \"_revenueRecognitionFieldMapping\"\n  | \"_revenueRecognitionPlan\"\n  | \"_revenueRecognitionReports\"\n  | \"_revenueRecognitionRule\"\n  | \"_revenueRecognitionSchedules\"\n  | \"_reviewCustomGlPlugInExecutions\"\n  | \"_runPayroll\"\n  | \"_sales\"\n  | \"_salesByPartner\"\n  | \"_salesByPromotionCode\"\n  | \"_salesCampaigns\"\n  | \"_salesForceAutomation\"\n  | \"_salesForceAutomationSetup\"\n  | \"_salesOrder\"\n  | \"_salesOrderApproval\"\n  | \"_salesOrderFulfillmentReports\"\n  | \"_salesOrderReports\"\n  | \"_salesOrderTransactionReport\"\n  | \"_salesRoles\"\n  | \"_salesTerritory\"\n  | \"_salesTerritoryRule\"\n  | \"_samlSingleSignOn\"\n  | \"_scheduleMassUpdates\"\n  | \"_setUpAccounting\"\n  | \"_setUpAchProcessing\"\n  | \"_setUpAdpPayroll\"\n  | \"_setUpBillPay\"\n  | \"_setUpBudgets\"\n  | \"_setUpCampaignEmailAddresses\"\n  | \"_setupCampaigns\"\n  | \"_setUpCompany\"\n  | \"_setUpCsvPreferences\"\n  | \"_setUpDomains\"\n  | \"_setUpImageResizing\"\n  | \"_setUpOpenidSingleSignOn\"\n  | \"_setUpPayroll\"\n  | \"_setUpReminders\"\n  | \"_setUpSamlSingleSignOn\"\n  | \"_setUpSnapshots\"\n  | \"_setUpWebServices\"\n  | \"_setUpWebSite\"\n  | \"_setUpYearStatus\"\n  | \"_shippingItems\"\n  | \"_shippingPartnerPackage\"\n  | \"_shippingPartnerRegistration\"\n  | \"_shippingPartnerShipment\"\n  | \"_shortcuts\"\n  | \"_siteSearch\"\n  | \"_standardCostVersion\"\n  | \"_statementCharge\"\n  | \"_statisticalAccountRegisters\"\n  | \"_storeCategories\"\n  | \"_storeContentCategories\"\n  | \"_storeContentItems\"\n  | \"_storePickupFulfillment\"\n  | \"_storeTabs\"\n  | \"_subscriptionPlan\"\n  | \"_subscriptions\"\n  | \"_subsidiaries\"\n  | \"_subsidiaryTaxEngineSelection\"\n  | \"_suiteAnalyticsConnectReadAll\"\n  | \"_suiteAnalyticsWorkbook\"\n  | \"_suiteAppDeployment\"\n  | \"_suiteAppManagement\"\n  | \"_suiteAppMarketplace\"\n  | \"_suiteBundlerAuditTrail\"\n  | \"_suiteBundlerUpgrades\"\n  | \"_suiteScript\"\n  | \"_suiteScriptNlCorpManagement\"\n  | \"_suiteScriptScheduling\"\n  | \"_suiteSignon\"\n  | \"_suitetaxMigration\"\n  | \"_supplyChainSnapshotList\"\n  | \"_support\"\n  | \"_supportCaseIssue\"\n  | \"_supportCaseOrigin\"\n  | \"_supportCasePriority\"\n  | \"_supportCaseSnapshotReminders\"\n  | \"_supportCaseStatus\"\n  | \"_supportCaseTerritory\"\n  | \"_supportCaseTerritoryRule\"\n  | \"_supportCaseType\"\n  | \"_supportSetup\"\n  | \"_swapPricesBetweenPriceLevels\"\n  | \"_systemEmailTemplate\"\n  | \"_systemStatus\"\n  | \"_tableauWorkbookExport\"\n  | \"_talentAdministration\"\n  | \"_tasks\"\n  | \"_tax\"\n  | \"_taxDetailsTab\"\n  | \"_taxItems\"\n  | \"_taxReports\"\n  | \"_taxSchedules\"\n  | \"_teamSellingContribution\"\n  | \"_tegataAccounts\"\n  | \"_tegataPayable\"\n  | \"_tegataReceivable\"\n  | \"_telephonyIntegration\"\n  | \"_templateCategories\"\n  | \"_terminationReasons\"\n  | \"_testdriveMasters\"\n  | \"_timeOffAdministration\"\n  | \"_timer\"\n  | \"_timeTracking\"\n  | \"_trackMessages\"\n  | \"_trackTime\"\n  | \"_transactionDetail\"\n  | \"_transactionNumberingAuditLog\"\n  | \"_transactionReceiveInboundShipment\"\n  | \"_transferFunds\"\n  | \"_transferInventory\"\n  | \"_transferOrder\"\n  | \"_transferOrderApproval\"\n  | \"_translation\"\n  | \"_trialBalance\"\n  | \"_twoFactorAuthentication\"\n  | \"_twoFactorAuthenticationBase\"\n  | \"_unbilledReceivableRegisters\"\n  | \"_unbuildAssemblies\"\n  | \"_uncategorizedPresentationItems\"\n  | \"_undeliveredEmails\"\n  | \"_units\"\n  | \"_updatePrices\"\n  | \"_upsellAssistant\"\n  | \"_upsellSetup\"\n  | \"_upsellWizard\"\n  | \"_usage\"\n  | \"_userAccessTokens\"\n  | \"_userPreferences\"\n  | \"_usersAndPasswords\"\n  | \"_vendorBillApproval\"\n  | \"_vendorInTransitPaymentApproval\"\n  | \"_vendorPaymentStatus\"\n  | \"_vendorRequestForQuote\"\n  | \"_vendorReturnAuthApproval\"\n  | \"_vendorReturnAuthorization\"\n  | \"_vendorReturns\"\n  | \"_vendors\"\n  | \"_viewGatewayAsynchronousNotifications\"\n  | \"_viewLoginAuditTrail\"\n  | \"_viewOnlineBillPayStatus\"\n  | \"_viewPaymentEvents\"\n  | \"_viewUnencryptedCreditCards\"\n  | \"_viewWebServicesLogs\"\n  | \"_wave\"\n  | \"_webServices\"\n  | \"_webSiteExternalPublisher\"\n  | \"_webSiteManagement\"\n  | \"_webSiteReport\"\n  | \"_webStoreEmailTemplate\"\n  | \"_webStoreReport\"\n  | \"_workCalendar\"\n  | \"_workflow\"\n  | \"_workforceAnalytics\"\n  | \"_workOrder\"\n  | \"_workOrderClose\"\n  | \"_workOrderCompletion\"\n  | \"_workOrderIssue\"\n  | \"_workplaces\"\n  | \"_zone\";\n\nexport type RecurrenceDowim =\n  | \"_first\"\n  | \"_second\"\n  | \"_third\"\n  | \"_fourth\"\n  | \"_last\";\n\nexport type Language =\n  | \"_afrikaans\"\n  | \"_albanian\"\n  | \"_arabic\"\n  | \"_armenian\"\n  | \"_bengali\"\n  | \"_bosnian\"\n  | \"_bulgarian\"\n  | \"_catalan\"\n  | \"_chineseSimplified\"\n  | \"_chineseTraditional\"\n  | \"_croatian\"\n  | \"_czech\"\n  | \"_danish\"\n  | \"_dutch\"\n  | \"_englishAu\"\n  | \"_englishCa\"\n  | \"_englishInternational\"\n  | \"_englishUK\"\n  | \"_englishUS\"\n  | \"_estonian\"\n  | \"_filipino\"\n  | \"_finnish\"\n  | \"_frenchCanada\"\n  | \"_frenchFrance\"\n  | \"_german\"\n  | \"_greek\"\n  | \"_gujarati\"\n  | \"_haitian\"\n  | \"_hebrew\"\n  | \"_hindi\"\n  | \"_hungarian\"\n  | \"_icelandic\"\n  | \"_indonesian\"\n  | \"_italian\"\n  | \"_japanese\"\n  | \"_kannada\"\n  | \"_korean\"\n  | \"_latinAmericanSpanish\"\n  | \"_latvian\"\n  | \"_lithuanian\"\n  | \"_luxembourgish\"\n  | \"_malay\"\n  | \"_marathi\"\n  | \"_norwegian\"\n  | \"_persianIran\"\n  | \"_polish\"\n  | \"_portugueseBrazil\"\n  | \"_portuguesePortugal\"\n  | \"_punjabi\"\n  | \"_romanian\"\n  | \"_russian\"\n  | \"_serbianCyrillic\"\n  | \"_serbianLatin\"\n  | \"_slovak\"\n  | \"_slovenian\"\n  | \"_spanish\"\n  | \"_swedish\"\n  | \"_tamil\"\n  | \"_telugu\"\n  | \"_thai\"\n  | \"_turkish\"\n  | \"_ukrainian\"\n  | \"_vietnamese\";\n\nexport type CurrencySymbolPlacement = \"_afterNumber\" | \"_beforeNumber\";\n\nexport type LandedCostMethod = \"_quantity\" | \"_value\" | \"_weight\" | \"_line\";\n\nexport type RevenueStatus =\n  | \"_pending\"\n  | \"_inProgress\"\n  | \"_completed\"\n  | \"_onRevCommitment\";\n\nexport type RecurrenceDow =\n  | \"_sunday\"\n  | \"_monday\"\n  | \"_tuesday\"\n  | \"_wednesday\"\n  | \"_thursday\"\n  | \"_friday\"\n  | \"_saturday\";\n\nexport type CscMatchCode = \"_n\" | \"_x\" | \"_y\";\n\nexport type AvsMatchCode = \"_n\" | \"_x\" | \"_y\";\n\nexport type PresentationItemType =\n  | \"_fileCabinetItem\"\n  | \"_informationItem\"\n  | \"_item\"\n  | \"_presentationCategory\";\n\nexport type VsoeSopGroup = \"_exclude\" | \"_normal\" | \"_software\";\n\nexport type Country =\n  | \"_afghanistan\"\n  | \"_alandIslands\"\n  | \"_albania\"\n  | \"_algeria\"\n  | \"_americanSamoa\"\n  | \"_andorra\"\n  | \"_angola\"\n  | \"_anguilla\"\n  | \"_antarctica\"\n  | \"_antiguaAndBarbuda\"\n  | \"_argentina\"\n  | \"_armenia\"\n  | \"_aruba\"\n  | \"_australia\"\n  | \"_austria\"\n  | \"_azerbaijan\"\n  | \"_bahamas\"\n  | \"_bahrain\"\n  | \"_bangladesh\"\n  | \"_barbados\"\n  | \"_belarus\"\n  | \"_belgium\"\n  | \"_belize\"\n  | \"_benin\"\n  | \"_bermuda\"\n  | \"_bhutan\"\n  | \"_bolivia\"\n  | \"_bonaireSaintEustatiusAndSaba\"\n  | \"_bosniaAndHerzegovina\"\n  | \"_botswana\"\n  | \"_bouvetIsland\"\n  | \"_brazil\"\n  | \"_britishIndianOceanTerritory\"\n  | \"_bruneiDarussalam\"\n  | \"_bulgaria\"\n  | \"_burkinaFaso\"\n  | \"_burundi\"\n  | \"_cambodia\"\n  | \"_cameroon\"\n  | \"_canada\"\n  | \"_canaryIslands\"\n  | \"_capeVerde\"\n  | \"_caymanIslands\"\n  | \"_centralAfricanRepublic\"\n  | \"_ceutaAndMelilla\"\n  | \"_chad\"\n  | \"_chile\"\n  | \"_china\"\n  | \"_christmasIsland\"\n  | \"_cocosKeelingIslands\"\n  | \"_colombia\"\n  | \"_comoros\"\n  | \"_congoDemocraticPeoplesRepublic\"\n  | \"_congoRepublicOf\"\n  | \"_cookIslands\"\n  | \"_costaRica\"\n  | \"_coteDIvoire\"\n  | \"_croatiaHrvatska\"\n  | \"_cuba\"\n  | \"_curacao\"\n  | \"_cyprus\"\n  | \"_czechRepublic\"\n  | \"_denmark\"\n  | \"_djibouti\"\n  | \"_dominica\"\n  | \"_dominicanRepublic\"\n  | \"_eastTimor\"\n  | \"_ecuador\"\n  | \"_egypt\"\n  | \"_elSalvador\"\n  | \"_equatorialGuinea\"\n  | \"_eritrea\"\n  | \"_estonia\"\n  | \"_ethiopia\"\n  | \"_falklandIslands\"\n  | \"_faroeIslands\"\n  | \"_fiji\"\n  | \"_finland\"\n  | \"_france\"\n  | \"_frenchGuiana\"\n  | \"_frenchPolynesia\"\n  | \"_frenchSouthernTerritories\"\n  | \"_gabon\"\n  | \"_gambia\"\n  | \"_georgia\"\n  | \"_germany\"\n  | \"_ghana\"\n  | \"_gibraltar\"\n  | \"_greece\"\n  | \"_greenland\"\n  | \"_grenada\"\n  | \"_guadeloupe\"\n  | \"_guam\"\n  | \"_guatemala\"\n  | \"_guernsey\"\n  | \"_guinea\"\n  | \"_guineaBissau\"\n  | \"_guyana\"\n  | \"_haiti\"\n  | \"_heardAndMcDonaldIslands\"\n  | \"_holySeeCityVaticanState\"\n  | \"_honduras\"\n  | \"_hongKong\"\n  | \"_hungary\"\n  | \"_iceland\"\n  | \"_india\"\n  | \"_indonesia\"\n  | \"_iranIslamicRepublicOf\"\n  | \"_iraq\"\n  | \"_ireland\"\n  | \"_isleOfMan\"\n  | \"_israel\"\n  | \"_italy\"\n  | \"_jamaica\"\n  | \"_japan\"\n  | \"_jersey\"\n  | \"_jordan\"\n  | \"_kazakhstan\"\n  | \"_kenya\"\n  | \"_kiribati\"\n  | \"_koreaDemocraticPeoplesRepublic\"\n  | \"_koreaRepublicOf\"\n  | \"_kosovo\"\n  | \"_kuwait\"\n  | \"_kyrgyzstan\"\n  | \"_laoPeoplesDemocraticRepublic\"\n  | \"_latvia\"\n  | \"_lebanon\"\n  | \"_lesotho\"\n  | \"_liberia\"\n  | \"_libya\"\n  | \"_liechtenstein\"\n  | \"_lithuania\"\n  | \"_luxembourg\"\n  | \"_macau\"\n  | \"_macedonia\"\n  | \"_madagascar\"\n  | \"_malawi\"\n  | \"_malaysia\"\n  | \"_maldives\"\n  | \"_mali\"\n  | \"_malta\"\n  | \"_marshallIslands\"\n  | \"_martinique\"\n  | \"_mauritania\"\n  | \"_mauritius\"\n  | \"_mayotte\"\n  | \"_mexico\"\n  | \"_micronesiaFederalStateOf\"\n  | \"_moldovaRepublicOf\"\n  | \"_monaco\"\n  | \"_mongolia\"\n  | \"_montenegro\"\n  | \"_montserrat\"\n  | \"_morocco\"\n  | \"_mozambique\"\n  | \"_myanmar\"\n  | \"_namibia\"\n  | \"_nauru\"\n  | \"_nepal\"\n  | \"_netherlands\"\n  | \"_newCaledonia\"\n  | \"_newZealand\"\n  | \"_nicaragua\"\n  | \"_niger\"\n  | \"_nigeria\"\n  | \"_niue\"\n  | \"_norfolkIsland\"\n  | \"_northernMarianaIslands\"\n  | \"_norway\"\n  | \"_oman\"\n  | \"_pakistan\"\n  | \"_palau\"\n  | \"_panama\"\n  | \"_papuaNewGuinea\"\n  | \"_paraguay\"\n  | \"_peru\"\n  | \"_philippines\"\n  | \"_pitcairnIsland\"\n  | \"_poland\"\n  | \"_portugal\"\n  | \"_puertoRico\"\n  | \"_qatar\"\n  | \"_reunionIsland\"\n  | \"_romania\"\n  | \"_russianFederation\"\n  | \"_rwanda\"\n  | \"_saintBarthelemy\"\n  | \"_saintHelena\"\n  | \"_saintKittsAndNevis\"\n  | \"_saintLucia\"\n  | \"_saintMartin\"\n  | \"_saintVincentAndTheGrenadines\"\n  | \"_samoa\"\n  | \"_sanMarino\"\n  | \"_saoTomeAndPrincipe\"\n  | \"_saudiArabia\"\n  | \"_senegal\"\n  | \"_serbia\"\n  | \"_seychelles\"\n  | \"_sierraLeone\"\n  | \"_singapore\"\n  | \"_sintMaarten\"\n  | \"_slovakRepublic\"\n  | \"_slovenia\"\n  | \"_solomonIslands\"\n  | \"_somalia\"\n  | \"_southAfrica\"\n  | \"_southGeorgia\"\n  | \"_southSudan\"\n  | \"_spain\"\n  | \"_sriLanka\"\n  | \"_stateOfPalestine\"\n  | \"_stPierreAndMiquelon\"\n  | \"_sudan\"\n  | \"_suriname\"\n  | \"_svalbardAndJanMayenIslands\"\n  | \"_swaziland\"\n  | \"_sweden\"\n  | \"_switzerland\"\n  | \"_syrianArabRepublic\"\n  | \"_taiwan\"\n  | \"_tajikistan\"\n  | \"_tanzania\"\n  | \"_thailand\"\n  | \"_togo\"\n  | \"_tokelau\"\n  | \"_tonga\"\n  | \"_trinidadAndTobago\"\n  | \"_tunisia\"\n  | \"_turkey\"\n  | \"_turkmenistan\"\n  | \"_turksAndCaicosIslands\"\n  | \"_tuvalu\"\n  | \"_uganda\"\n  | \"_ukraine\"\n  | \"_unitedArabEmirates\"\n  | \"_unitedKingdom\"\n  | \"_unitedStates\"\n  | \"_uruguay\"\n  | \"_uSMinorOutlyingIslands\"\n  | \"_uzbekistan\"\n  | \"_vanuatu\"\n  | \"_venezuela\"\n  | \"_vietnam\"\n  | \"_virginIslandsBritish\"\n  | \"_virginIslandsUSA\"\n  | \"_wallisAndFutunaIslands\"\n  | \"_westernSahara\"\n  | \"_yemen\"\n  | \"_zambia\"\n  | \"_zimbabwe\";\n\nexport type ItemCostEstimateType =\n  | \"_averageCost\"\n  | \"_custom\"\n  | \"_derivedFromMemberItems\"\n  | \"_itemDefinedCost\"\n  | \"_lastPurchasePrice\"\n  | \"_preferredVendorRate\"\n  | \"_purchaseOrderRate\"\n  | \"_purchasePrice\";\n\nexport type IntercoStatus = \"_paired\" | \"_pending\" | \"_rejected\";\n\nexport type Source =\n  | \"_adp\"\n  | \"_automatedMemorizedTransaction\"\n  | \"_csv\"\n  | \"_customerCenter\"\n  | \"_ebay\"\n  | \"_mobile\"\n  | \"_offlineClient\"\n  | \"_perquest\"\n  | \"_qif\"\n  | \"_quickbooks\"\n  | \"_scis\"\n  | \"_smbxml\"\n  | \"_sync\"\n  | \"_web\"\n  | \"_webServices\"\n  | \"_yahoo\";\n\nexport type TermRecurrenceFrequency =\n  | \"_annually\"\n  | \"_daily\"\n  | \"_monthly\"\n  | \"_weekly\";\n\nexport type RecurrenceFrequency =\n  | \"_none\"\n  | \"_day\"\n  | \"_week\"\n  | \"_month\"\n  | \"_year\";\n\nexport type LandedCostSource =\n  | \"_manual\"\n  | \"_otherTransaction\"\n  | \"_otherTransactionExcludeTax\"\n  | \"_thisTransaction\";\n\nexport type TimeItemTimeType = \"_actualTime\" | \"_plannedTime\";\n\nexport type PermissionLevel = \"_create\" | \"_edit\" | \"_full\" | \"_none\" | \"_view\";\n\nexport type AlcoholRecipientType = \"_consumer\" | \"_licensee\";\n"]}