"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ItemSupplyPlanOrderList = exports.ItemSupplyPlanSearchAdvanced = exports.ItemSupplyPlan = exports.PeriodDemandPlanList = exports.DemandPlanMatrix = exports.ItemSupplyPlanSearch = exports.ItemDemandPlanSearch = exports.ItemDemandPlanSearchRow = exports.PeriodDemandPlan = exports.ItemSupplyPlanOrder = exports.ItemSupplyPlanSearchRow = exports.ItemDemandPlan = exports.ItemDemandPlanSearchAdvanced = exports.DemandPlan = void 0;
const PlatformCore = __importStar(require("./platform_core"));
const soap_types_1 = require("../../soap-types");
const MAPPINGS_NAME = "com_netsuite_webservices_transactions_demandplanning_2019_2";
class DemandPlan extends soap_types_1.SoapMappingBase {
    constructor(props) {
        super(soap_types_1.propsWithMappingsName(props, MAPPINGS_NAME));
        this.startDate = props.startDate;
        this.endDate = props.endDate;
        this.calculatedQuantity = props.calculatedQuantity;
        this.periodDemandPlanList = props.periodDemandPlanList;
    }
}
exports.DemandPlan = DemandPlan;
class ItemDemandPlanSearchAdvanced extends PlatformCore.SearchRecord {
    constructor(props) {
        super(soap_types_1.propsWithMappingsName(props, MAPPINGS_NAME));
        this.criteria = props.criteria;
        this.columns = props.columns;
        this.savedSearchId = props.savedSearchId;
        this.savedSearchScriptId = props.savedSearchScriptId;
    }
}
exports.ItemDemandPlanSearchAdvanced = ItemDemandPlanSearchAdvanced;
class ItemDemandPlan extends PlatformCore.Record {
    constructor(props) {
        super(soap_types_1.propsWithMappingsName(props, MAPPINGS_NAME));
        this.customForm = props.customForm;
        this.subsidiary = props.subsidiary;
        this.location = props.location;
        this.item = props.item;
        this.units = props.units;
        this.memo = props.memo;
        this.year = props.year;
        this.month = props.month;
        this.startDate = props.startDate;
        this.endDate = props.endDate;
        this.demandPlanCalendarType = props.demandPlanCalendarType;
        this.demandPlanMatrix = props.demandPlanMatrix;
        this.customFieldList = props.customFieldList;
        this.internalId = props.internalId;
        this.externalId = props.externalId;
    }
}
exports.ItemDemandPlan = ItemDemandPlan;
class ItemSupplyPlanSearchRow extends PlatformCore.SearchRow {
    constructor(props) {
        super(soap_types_1.propsWithMappingsName(props, MAPPINGS_NAME));
        this.basic = props.basic;
        this.itemJoin = props.itemJoin;
        this.locationJoin = props.locationJoin;
        this.userJoin = props.userJoin;
        this.customSearchJoin = props.customSearchJoin;
    }
}
exports.ItemSupplyPlanSearchRow = ItemSupplyPlanSearchRow;
class ItemSupplyPlanOrder extends soap_types_1.SoapMappingBase {
    constructor(props) {
        super(soap_types_1.propsWithMappingsName(props, MAPPINGS_NAME));
        this.orderLineId = props.orderLineId;
        this.orderDate = props.orderDate;
        this.receiptDate = props.receiptDate;
        this.sourceLocation = props.sourceLocation;
        this.quantity = props.quantity;
        this.orderCreated = props.orderCreated;
        this.orderType = props.orderType;
    }
}
exports.ItemSupplyPlanOrder = ItemSupplyPlanOrder;
class PeriodDemandPlan extends soap_types_1.SoapMappingBase {
    constructor(props) {
        super(soap_types_1.propsWithMappingsName(props, MAPPINGS_NAME));
        this.quantity = props.quantity;
        this.dayOfTheWeek = props.dayOfTheWeek;
    }
}
exports.PeriodDemandPlan = PeriodDemandPlan;
class ItemDemandPlanSearchRow extends PlatformCore.SearchRow {
    constructor(props) {
        super(soap_types_1.propsWithMappingsName(props, MAPPINGS_NAME));
        this.basic = props.basic;
        this.itemJoin = props.itemJoin;
        this.lastAlternateSourceItemJoin = props.lastAlternateSourceItemJoin;
        this.locationJoin = props.locationJoin;
        this.userJoin = props.userJoin;
        this.customSearchJoin = props.customSearchJoin;
    }
}
exports.ItemDemandPlanSearchRow = ItemDemandPlanSearchRow;
class ItemDemandPlanSearch extends PlatformCore.SearchRecord {
    constructor(props) {
        super(soap_types_1.propsWithMappingsName(props, MAPPINGS_NAME));
        this.basic = props.basic;
        this.itemJoin = props.itemJoin;
        this.lastAlternateSourceItemJoin = props.lastAlternateSourceItemJoin;
        this.locationJoin = props.locationJoin;
        this.userJoin = props.userJoin;
        this.customSearchJoin = props.customSearchJoin;
    }
}
exports.ItemDemandPlanSearch = ItemDemandPlanSearch;
class ItemSupplyPlanSearch extends PlatformCore.SearchRecord {
    constructor(props) {
        super(soap_types_1.propsWithMappingsName(props, MAPPINGS_NAME));
        this.basic = props.basic;
        this.itemJoin = props.itemJoin;
        this.locationJoin = props.locationJoin;
        this.userJoin = props.userJoin;
        this.customSearchJoin = props.customSearchJoin;
    }
}
exports.ItemSupplyPlanSearch = ItemSupplyPlanSearch;
class DemandPlanMatrix extends soap_types_1.SoapMappingBase {
    constructor(props) {
        super(soap_types_1.propsWithMappingsName(props, MAPPINGS_NAME));
        this.demandPlan = props.demandPlan;
        this.replaceAll = props.replaceAll;
    }
}
exports.DemandPlanMatrix = DemandPlanMatrix;
class PeriodDemandPlanList extends soap_types_1.SoapMappingBase {
    constructor(props) {
        super(soap_types_1.propsWithMappingsName(props, MAPPINGS_NAME));
        this.periodDemandPlan = props.periodDemandPlan;
    }
}
exports.PeriodDemandPlanList = PeriodDemandPlanList;
class ItemSupplyPlan extends PlatformCore.Record {
    constructor(props) {
        super(soap_types_1.propsWithMappingsName(props, MAPPINGS_NAME));
        this.customForm = props.customForm;
        this.subsidiary = props.subsidiary;
        this.location = props.location;
        this.item = props.item;
        this.units = props.units;
        this.memo = props.memo;
        this.orderList = props.orderList;
        this.customFieldList = props.customFieldList;
        this.internalId = props.internalId;
        this.externalId = props.externalId;
    }
}
exports.ItemSupplyPlan = ItemSupplyPlan;
class ItemSupplyPlanSearchAdvanced extends PlatformCore.SearchRecord {
    constructor(props) {
        super(soap_types_1.propsWithMappingsName(props, MAPPINGS_NAME));
        this.criteria = props.criteria;
        this.columns = props.columns;
        this.savedSearchId = props.savedSearchId;
        this.savedSearchScriptId = props.savedSearchScriptId;
    }
}
exports.ItemSupplyPlanSearchAdvanced = ItemSupplyPlanSearchAdvanced;
class ItemSupplyPlanOrderList extends soap_types_1.SoapMappingBase {
    constructor(props) {
        super(soap_types_1.propsWithMappingsName(props, MAPPINGS_NAME));
        this.itemSupplyPlanOrder = props.itemSupplyPlanOrder;
        this.replaceAll = props.replaceAll;
    }
}
exports.ItemSupplyPlanOrderList = ItemSupplyPlanOrderList;
//# sourceMappingURL=data:application/json;base64,