import * as TransactionsInventoryTypes from "./transactions_inventory_types";
import * as PlatformCore from "./platform_core";
import * as PlatformCommon from "./platform_common";
import * as PlatformCommonTypes from "./platform_common_types";
import { SoapMappingBase } from "../../soap-types";
export declare type WorkOrderItemProps = {
    line?: number;
    item?: PlatformCore.RecordRef;
    operationSequenceNumber?: number;
    componentYield?: number;
    bomQuantity?: number;
    quantityCommitted?: number;
    quantityBackOrdered?: number;
    quantityAvailable?: number;
    averageCost?: number;
    lastPurchasePrice?: number;
    quantityOnHand?: number;
    quantity?: number;
    units?: PlatformCore.RecordRef;
    inventoryDetail?: PlatformCommon.InventoryDetail;
    serialNumbers?: string;
    orderPriority?: number;
    options?: PlatformCore.CustomFieldList;
    itemSource?: PlatformCommonTypes.ItemSource;
    department?: PlatformCore.RecordRef;
    clazz?: PlatformCore.RecordRef;
    location?: PlatformCore.RecordRef;
    poVendor?: PlatformCore.RecordRef;
    poRate?: number;
    percentComplete?: number;
    contribution?: number;
    description?: string;
    commitInventory?: TransactionsInventoryTypes.WorkOrderItemItemCommitInventory;
    plannedIssueDate?: string;
    customFieldList?: PlatformCore.CustomFieldList;
};
export declare class WorkOrderItem extends SoapMappingBase {
    line?: number;
    item?: PlatformCore.RecordRef;
    operationSequenceNumber?: number;
    componentYield?: number;
    bomQuantity?: number;
    quantityCommitted?: number;
    quantityBackOrdered?: number;
    quantityAvailable?: number;
    averageCost?: number;
    lastPurchasePrice?: number;
    quantityOnHand?: number;
    quantity?: number;
    units?: PlatformCore.RecordRef;
    inventoryDetail?: PlatformCommon.InventoryDetail;
    serialNumbers?: string;
    orderPriority?: number;
    options?: PlatformCore.CustomFieldList;
    itemSource?: PlatformCommonTypes.ItemSource;
    department?: PlatformCore.RecordRef;
    clazz?: PlatformCore.RecordRef;
    location?: PlatformCore.RecordRef;
    poVendor?: PlatformCore.RecordRef;
    poRate?: number;
    percentComplete?: number;
    contribution?: number;
    description?: string;
    commitInventory?: TransactionsInventoryTypes.WorkOrderItemItemCommitInventory;
    plannedIssueDate?: string;
    customFieldList?: PlatformCore.CustomFieldList;
    constructor(props: WorkOrderItemProps);
}
export declare type TransferOrderItemListProps = {
    item?: TransferOrderItem[];
    replaceAll?: boolean;
};
export declare class TransferOrderItemList extends SoapMappingBase {
    item?: TransferOrderItem[];
    replaceAll?: boolean;
    constructor(props: TransferOrderItemListProps);
}
export declare type InventoryAdjustmentInventoryProps = {
    item?: PlatformCore.RecordRef;
    line?: number;
    inventoryDetail?: PlatformCommon.InventoryDetail;
    description?: string;
    department?: PlatformCore.RecordRef;
    clazz?: PlatformCore.RecordRef;
    location?: PlatformCore.RecordRef;
    units?: PlatformCore.RecordRef;
    quantityOnHand?: number;
    currentValue?: number;
    adjustQtyBy?: number;
    binNumbers?: string;
    serialNumbers?: string;
    newQuantity?: number;
    unitCost?: number;
    foreignCurrencyUnitCost?: number;
    memo?: string;
    currency?: string;
    expirationDate?: string;
    exchangeRate?: number;
};
export declare class InventoryAdjustmentInventory extends SoapMappingBase {
    item?: PlatformCore.RecordRef;
    line?: number;
    inventoryDetail?: PlatformCommon.InventoryDetail;
    description?: string;
    department?: PlatformCore.RecordRef;
    clazz?: PlatformCore.RecordRef;
    location?: PlatformCore.RecordRef;
    units?: PlatformCore.RecordRef;
    quantityOnHand?: number;
    currentValue?: number;
    adjustQtyBy?: number;
    binNumbers?: string;
    serialNumbers?: string;
    newQuantity?: number;
    unitCost?: number;
    foreignCurrencyUnitCost?: number;
    memo?: string;
    currency?: string;
    expirationDate?: string;
    exchangeRate?: number;
    constructor(props: InventoryAdjustmentInventoryProps);
}
export declare type BinTransferProps = {
    createdDate?: string;
    lastModifiedDate?: string;
    tranDate?: string;
    memo?: string;
    location?: PlatformCore.RecordRef;
    inventoryList?: BinTransferInventoryList;
    subsidiary?: PlatformCore.RecordRef;
    tranId?: string;
    customFieldList?: PlatformCore.CustomFieldList;
    internalId?: string;
    externalId?: string;
} & PlatformCore.RecordProps;
export declare class BinTransfer extends PlatformCore.Record {
    createdDate?: string;
    lastModifiedDate?: string;
    tranDate?: string;
    memo?: string;
    location?: PlatformCore.RecordRef;
    inventoryList?: BinTransferInventoryList;
    subsidiary?: PlatformCore.RecordRef;
    tranId?: string;
    customFieldList?: PlatformCore.CustomFieldList;
    internalId?: string;
    externalId?: string;
    constructor(props: BinTransferProps);
}
export declare type WorkOrderIssueComponentListProps = {
    workOrderIssueComponent?: WorkOrderIssueComponent[];
    replaceAll?: boolean;
};
export declare class WorkOrderIssueComponentList extends SoapMappingBase {
    workOrderIssueComponent?: WorkOrderIssueComponent[];
    replaceAll?: boolean;
    constructor(props: WorkOrderIssueComponentListProps);
}
export declare type WorkOrderIssueProps = {
    createdDate?: string;
    lastModifiedDate?: string;
    customForm?: PlatformCore.RecordRef;
    tranId?: string;
    item?: PlatformCore.RecordRef;
    createdFrom?: PlatformCore.RecordRef;
    tranDate?: string;
    postingPeriod?: PlatformCore.RecordRef;
    memo?: string;
    subsidiary?: PlatformCore.RecordRef;
    department?: PlatformCore.RecordRef;
    clazz?: PlatformCore.RecordRef;
    location?: PlatformCore.RecordRef;
    revision?: PlatformCore.RecordRef;
    manufacturingRouting?: PlatformCore.RecordRef;
    startOperation?: PlatformCore.RecordRef;
    endOperation?: PlatformCore.RecordRef;
    componentList?: WorkOrderIssueComponentList;
    customFieldList?: PlatformCore.CustomFieldList;
    internalId?: string;
    externalId?: string;
} & PlatformCore.RecordProps;
export declare class WorkOrderIssue extends PlatformCore.Record {
    createdDate?: string;
    lastModifiedDate?: string;
    customForm?: PlatformCore.RecordRef;
    tranId?: string;
    item?: PlatformCore.RecordRef;
    createdFrom?: PlatformCore.RecordRef;
    tranDate?: string;
    postingPeriod?: PlatformCore.RecordRef;
    memo?: string;
    subsidiary?: PlatformCore.RecordRef;
    department?: PlatformCore.RecordRef;
    clazz?: PlatformCore.RecordRef;
    location?: PlatformCore.RecordRef;
    revision?: PlatformCore.RecordRef;
    manufacturingRouting?: PlatformCore.RecordRef;
    startOperation?: PlatformCore.RecordRef;
    endOperation?: PlatformCore.RecordRef;
    componentList?: WorkOrderIssueComponentList;
    customFieldList?: PlatformCore.CustomFieldList;
    internalId?: string;
    externalId?: string;
    constructor(props: WorkOrderIssueProps);
}
export declare type BinWorksheetItemListProps = {
    item?: BinWorksheetItem[];
    replaceAll?: boolean;
};
export declare class BinWorksheetItemList extends SoapMappingBase {
    item?: BinWorksheetItem[];
    replaceAll?: boolean;
    constructor(props: BinWorksheetItemListProps);
}
export declare type WorkOrderCompletionOperationListProps = {
    workOrderCompletionOperation?: WorkOrderCompletionOperation[];
    replaceAll?: boolean;
};
export declare class WorkOrderCompletionOperationList extends SoapMappingBase {
    workOrderCompletionOperation?: WorkOrderCompletionOperation[];
    replaceAll?: boolean;
    constructor(props: WorkOrderCompletionOperationListProps);
}
export declare type InterCompanyTransferOrderItemListProps = {
    item?: InterCompanyTransferOrderItem[];
    replaceAll?: boolean;
};
export declare class InterCompanyTransferOrderItemList extends SoapMappingBase {
    item?: InterCompanyTransferOrderItem[];
    replaceAll?: boolean;
    constructor(props: InterCompanyTransferOrderItemListProps);
}
export declare type PartnersListProps = {
    partners?: PlatformCommon.Partners[];
    replaceAll?: boolean;
};
export declare class PartnersList extends SoapMappingBase {
    partners?: PlatformCommon.Partners[];
    replaceAll?: boolean;
    constructor(props: PartnersListProps);
}
export declare type WorkOrderItemListProps = {
    item?: WorkOrderItem[];
    replaceAll?: boolean;
};
export declare class WorkOrderItemList extends SoapMappingBase {
    item?: WorkOrderItem[];
    replaceAll?: boolean;
    constructor(props: WorkOrderItemListProps);
}
export declare type BinWorksheetItemProps = {
    item?: PlatformCore.RecordRef;
    itemName?: string;
    description?: string;
    quantity?: number;
    itemOnHand?: string;
    itemUnitsLabel?: string;
    inventoryDetail?: PlatformCommon.InventoryDetail;
    itemBins?: string;
    itemBinNumbers?: string;
    itemBinList?: string;
    itemPreferBin?: string;
    itemBlank?: string;
};
export declare class BinWorksheetItem extends SoapMappingBase {
    item?: PlatformCore.RecordRef;
    itemName?: string;
    description?: string;
    quantity?: number;
    itemOnHand?: string;
    itemUnitsLabel?: string;
    inventoryDetail?: PlatformCommon.InventoryDetail;
    itemBins?: string;
    itemBinNumbers?: string;
    itemBinList?: string;
    itemPreferBin?: string;
    itemBlank?: string;
    constructor(props: BinWorksheetItemProps);
}
export declare type WorkOrderCompletionComponentProps = {
    item?: PlatformCore.RecordRef;
    operationSequenceNumber?: number;
    quantityPer?: number;
    quantity?: number;
    componentInventoryDetail?: PlatformCommon.InventoryDetail;
    lineNumber?: number;
};
export declare class WorkOrderCompletionComponent extends SoapMappingBase {
    item?: PlatformCore.RecordRef;
    operationSequenceNumber?: number;
    quantityPer?: number;
    quantity?: number;
    componentInventoryDetail?: PlatformCommon.InventoryDetail;
    lineNumber?: number;
    constructor(props: WorkOrderCompletionComponentProps);
}
export declare type AssemblyBuildProps = {
    createdDate?: string;
    expirationDate?: string;
    lastModifiedDate?: string;
    customForm?: PlatformCore.RecordRef;
    createdFrom?: PlatformCore.RecordRef;
    tranDate?: string;
    postingPeriod?: PlatformCore.RecordRef;
    tranId?: string;
    item?: PlatformCore.RecordRef;
    buildable?: number;
    quantity?: number;
    units?: PlatformCore.RecordRef;
    total?: number;
    billOfMaterials?: PlatformCore.RecordRef;
    inventoryDetail?: PlatformCommon.InventoryDetail;
    serialNumbers?: string;
    binNumbers?: string;
    subsidiary?: PlatformCore.RecordRef;
    department?: PlatformCore.RecordRef;
    clazz?: PlatformCore.RecordRef;
    location?: PlatformCore.RecordRef;
    revision?: PlatformCore.RecordRef;
    billOfMaterialsRevision?: PlatformCore.RecordRef;
    memo?: string;
    componentList?: AssemblyComponentList;
    accountingBookDetailList?: PlatformCommon.AccountingBookDetailList;
    customFieldList?: PlatformCore.CustomFieldList;
    internalId?: string;
    externalId?: string;
} & PlatformCore.RecordProps;
export declare class AssemblyBuild extends PlatformCore.Record {
    createdDate?: string;
    expirationDate?: string;
    lastModifiedDate?: string;
    customForm?: PlatformCore.RecordRef;
    createdFrom?: PlatformCore.RecordRef;
    tranDate?: string;
    postingPeriod?: PlatformCore.RecordRef;
    tranId?: string;
    item?: PlatformCore.RecordRef;
    buildable?: number;
    quantity?: number;
    units?: PlatformCore.RecordRef;
    total?: number;
    billOfMaterials?: PlatformCore.RecordRef;
    inventoryDetail?: PlatformCommon.InventoryDetail;
    serialNumbers?: string;
    binNumbers?: string;
    subsidiary?: PlatformCore.RecordRef;
    department?: PlatformCore.RecordRef;
    clazz?: PlatformCore.RecordRef;
    location?: PlatformCore.RecordRef;
    revision?: PlatformCore.RecordRef;
    billOfMaterialsRevision?: PlatformCore.RecordRef;
    memo?: string;
    componentList?: AssemblyComponentList;
    accountingBookDetailList?: PlatformCommon.AccountingBookDetailList;
    customFieldList?: PlatformCore.CustomFieldList;
    internalId?: string;
    externalId?: string;
    constructor(props: AssemblyBuildProps);
}
export declare type TransferOrderProps = {
    createdDate?: string;
    lastModifiedDate?: string;
    customForm?: PlatformCore.RecordRef;
    shippingCost?: number;
    subTotal?: number;
    status?: string;
    shippingAddress?: PlatformCommon.Address;
    shipIsResidential?: boolean;
    shipAddressList?: PlatformCore.RecordRef;
    fob?: string;
    tranDate?: string;
    tranId?: string;
    source?: string;
    orderStatus?: TransactionsInventoryTypes.TransferOrderOrderStatus;
    subsidiary?: PlatformCore.RecordRef;
    employee?: PlatformCore.RecordRef;
    useItemCostAsTransferCost?: boolean;
    incoterm?: PlatformCore.RecordRef;
    firmed?: boolean;
    department?: PlatformCore.RecordRef;
    clazz?: PlatformCore.RecordRef;
    location?: PlatformCore.RecordRef;
    transferLocation?: PlatformCore.RecordRef;
    memo?: string;
    shipDate?: string;
    shipMethod?: PlatformCore.RecordRef;
    trackingNumbers?: string;
    linkedTrackingNumbers?: string;
    shipComplete?: boolean;
    altShippingCost?: number;
    shippingTax1Rate?: number;
    shippingTax2Rate?: number;
    handlingTax1Rate?: number;
    handlingTax2Rate?: number;
    shippingTaxCode?: PlatformCore.RecordRef;
    handlingTaxCode?: PlatformCore.RecordRef;
    total?: number;
    itemList?: TransferOrderItemList;
    accountingBookDetailList?: PlatformCommon.AccountingBookDetailList;
    customFieldList?: PlatformCore.CustomFieldList;
    internalId?: string;
    externalId?: string;
} & PlatformCore.RecordProps;
export declare class TransferOrder extends PlatformCore.Record {
    createdDate?: string;
    lastModifiedDate?: string;
    customForm?: PlatformCore.RecordRef;
    shippingCost?: number;
    subTotal?: number;
    status?: string;
    shippingAddress?: PlatformCommon.Address;
    shipIsResidential?: boolean;
    shipAddressList?: PlatformCore.RecordRef;
    fob?: string;
    tranDate?: string;
    tranId?: string;
    source?: string;
    orderStatus?: TransactionsInventoryTypes.TransferOrderOrderStatus;
    subsidiary?: PlatformCore.RecordRef;
    employee?: PlatformCore.RecordRef;
    useItemCostAsTransferCost?: boolean;
    incoterm?: PlatformCore.RecordRef;
    firmed?: boolean;
    department?: PlatformCore.RecordRef;
    clazz?: PlatformCore.RecordRef;
    location?: PlatformCore.RecordRef;
    transferLocation?: PlatformCore.RecordRef;
    memo?: string;
    shipDate?: string;
    shipMethod?: PlatformCore.RecordRef;
    trackingNumbers?: string;
    linkedTrackingNumbers?: string;
    shipComplete?: boolean;
    altShippingCost?: number;
    shippingTax1Rate?: number;
    shippingTax2Rate?: number;
    handlingTax1Rate?: number;
    handlingTax2Rate?: number;
    shippingTaxCode?: PlatformCore.RecordRef;
    handlingTaxCode?: PlatformCore.RecordRef;
    total?: number;
    itemList?: TransferOrderItemList;
    accountingBookDetailList?: PlatformCommon.AccountingBookDetailList;
    customFieldList?: PlatformCore.CustomFieldList;
    internalId?: string;
    externalId?: string;
    constructor(props: TransferOrderProps);
}
export declare type InventoryCostRevaluationCostComponentProps = {
    cost?: number;
    componentItem?: PlatformCore.RecordRef;
    quantity?: number;
    units?: PlatformCore.RecordRef;
    costCategory?: PlatformCore.RecordRef;
};
export declare class InventoryCostRevaluationCostComponent extends SoapMappingBase {
    cost?: number;
    componentItem?: PlatformCore.RecordRef;
    quantity?: number;
    units?: PlatformCore.RecordRef;
    costCategory?: PlatformCore.RecordRef;
    constructor(props: InventoryCostRevaluationCostComponentProps);
}
export declare type InventoryAdjustmentProps = {
    postingPeriod?: PlatformCore.RecordRef;
    tranDate?: string;
    createdDate?: string;
    tranId?: string;
    lastModifiedDate?: string;
    subsidiary?: PlatformCore.RecordRef;
    account?: PlatformCore.RecordRef;
    customForm?: PlatformCore.RecordRef;
    estimatedTotalValue?: number;
    customer?: PlatformCore.RecordRef;
    department?: PlatformCore.RecordRef;
    clazz?: PlatformCore.RecordRef;
    adjLocation?: PlatformCore.RecordRef;
    location?: PlatformCore.RecordRef;
    memo?: string;
    inventoryList?: InventoryAdjustmentInventoryList;
    accountingBookDetailList?: PlatformCommon.AccountingBookDetailList;
    customFieldList?: PlatformCore.CustomFieldList;
    internalId?: string;
    externalId?: string;
} & PlatformCore.RecordProps;
export declare class InventoryAdjustment extends PlatformCore.Record {
    postingPeriod?: PlatformCore.RecordRef;
    tranDate?: string;
    createdDate?: string;
    tranId?: string;
    lastModifiedDate?: string;
    subsidiary?: PlatformCore.RecordRef;
    account?: PlatformCore.RecordRef;
    customForm?: PlatformCore.RecordRef;
    estimatedTotalValue?: number;
    customer?: PlatformCore.RecordRef;
    department?: PlatformCore.RecordRef;
    clazz?: PlatformCore.RecordRef;
    adjLocation?: PlatformCore.RecordRef;
    location?: PlatformCore.RecordRef;
    memo?: string;
    inventoryList?: InventoryAdjustmentInventoryList;
    accountingBookDetailList?: PlatformCommon.AccountingBookDetailList;
    customFieldList?: PlatformCore.CustomFieldList;
    internalId?: string;
    externalId?: string;
    constructor(props: InventoryAdjustmentProps);
}
export declare type BinTransferInventoryListProps = {
    inventory?: BinTransferInventory[];
    replaceAll?: boolean;
};
export declare class BinTransferInventoryList extends SoapMappingBase {
    inventory?: BinTransferInventory[];
    replaceAll?: boolean;
    constructor(props: BinTransferInventoryListProps);
}
export declare type InterCompanyTransferOrderItemProps = {
    item?: PlatformCore.RecordRef;
    line?: number;
    quantityAvailable?: number;
    quantityOnHand?: number;
    quantityBackOrdered?: number;
    quantityCommitted?: number;
    quantityFulfilled?: number;
    quantityReceived?: number;
    quantity?: number;
    rate?: number;
    units?: PlatformCore.RecordRef;
    amount?: number;
    description?: string;
    inventoryDetail?: PlatformCommon.InventoryDetail;
    commitInventory?: TransactionsInventoryTypes.TransferOrderItemCommitInventory;
    options?: PlatformCore.CustomFieldList;
    department?: PlatformCore.RecordRef;
    clazz?: PlatformCore.RecordRef;
    lastPurchasePrice?: number;
    averageCost?: number;
    customFieldList?: PlatformCore.CustomFieldList;
};
export declare class InterCompanyTransferOrderItem extends SoapMappingBase {
    item?: PlatformCore.RecordRef;
    line?: number;
    quantityAvailable?: number;
    quantityOnHand?: number;
    quantityBackOrdered?: number;
    quantityCommitted?: number;
    quantityFulfilled?: number;
    quantityReceived?: number;
    quantity?: number;
    rate?: number;
    units?: PlatformCore.RecordRef;
    amount?: number;
    description?: string;
    inventoryDetail?: PlatformCommon.InventoryDetail;
    commitInventory?: TransactionsInventoryTypes.TransferOrderItemCommitInventory;
    options?: PlatformCore.CustomFieldList;
    department?: PlatformCore.RecordRef;
    clazz?: PlatformCore.RecordRef;
    lastPurchasePrice?: number;
    averageCost?: number;
    customFieldList?: PlatformCore.CustomFieldList;
    constructor(props: InterCompanyTransferOrderItemProps);
}
export declare type WorkOrderIssueComponentProps = {
    item?: PlatformCore.RecordRef;
    operationSequenceNumber?: number;
    quantity?: number;
    componentInventoryDetail?: PlatformCommon.InventoryDetail;
    lineNumber?: number;
};
export declare class WorkOrderIssueComponent extends SoapMappingBase {
    item?: PlatformCore.RecordRef;
    operationSequenceNumber?: number;
    quantity?: number;
    componentInventoryDetail?: PlatformCommon.InventoryDetail;
    lineNumber?: number;
    constructor(props: WorkOrderIssueComponentProps);
}
export declare type SalesTeamListProps = {
    salesTeam?: PlatformCommon.CustomerSalesTeam[];
    replaceAll?: boolean;
};
export declare class SalesTeamList extends SoapMappingBase {
    salesTeam?: PlatformCommon.CustomerSalesTeam[];
    replaceAll?: boolean;
    constructor(props: SalesTeamListProps);
}
export declare type AssemblyComponentListProps = {
    component?: AssemblyComponent[];
    replaceAll?: boolean;
};
export declare class AssemblyComponentList extends SoapMappingBase {
    component?: AssemblyComponent[];
    replaceAll?: boolean;
    constructor(props: AssemblyComponentListProps);
}
export declare type InventoryCostRevaluationProps = {
    createdDate?: string;
    lastModifiedDate?: string;
    customForm?: PlatformCore.RecordRef;
    subsidiary?: PlatformCore.RecordRef;
    tranDate?: string;
    postingPeriod?: PlatformCore.RecordRef;
    tranId?: string;
    account?: PlatformCore.RecordRef;
    item?: PlatformCore.RecordRef;
    department?: PlatformCore.RecordRef;
    clazz?: PlatformCore.RecordRef;
    location?: PlatformCore.RecordRef;
    memo?: string;
    total?: number;
    inventoryValue?: number;
    unitCost?: number;
    costComponentList?: InventoryCostRevaluationCostComponentList;
    accountingBookDetailList?: PlatformCommon.AccountingBookDetailList;
    customFieldList?: PlatformCore.CustomFieldList;
    internalId?: string;
    externalId?: string;
} & PlatformCore.RecordProps;
export declare class InventoryCostRevaluation extends PlatformCore.Record {
    createdDate?: string;
    lastModifiedDate?: string;
    customForm?: PlatformCore.RecordRef;
    subsidiary?: PlatformCore.RecordRef;
    tranDate?: string;
    postingPeriod?: PlatformCore.RecordRef;
    tranId?: string;
    account?: PlatformCore.RecordRef;
    item?: PlatformCore.RecordRef;
    department?: PlatformCore.RecordRef;
    clazz?: PlatformCore.RecordRef;
    location?: PlatformCore.RecordRef;
    memo?: string;
    total?: number;
    inventoryValue?: number;
    unitCost?: number;
    costComponentList?: InventoryCostRevaluationCostComponentList;
    accountingBookDetailList?: PlatformCommon.AccountingBookDetailList;
    customFieldList?: PlatformCore.CustomFieldList;
    internalId?: string;
    externalId?: string;
    constructor(props: InventoryCostRevaluationProps);
}
export declare type AssemblyUnbuildProps = {
    createdDate?: string;
    lastModifiedDate?: string;
    customForm?: PlatformCore.RecordRef;
    tranDate?: string;
    postingPeriod?: PlatformCore.RecordRef;
    tranId?: string;
    item?: PlatformCore.RecordRef;
    built?: number;
    quantity?: number;
    units?: PlatformCore.RecordRef;
    total?: number;
    billOfMaterials?: PlatformCore.RecordRef;
    billOfMaterialsRevision?: PlatformCore.RecordRef;
    serialNumbers?: string;
    inventoryDetail?: PlatformCommon.InventoryDetail;
    binNumbers?: string;
    subsidiary?: PlatformCore.RecordRef;
    department?: PlatformCore.RecordRef;
    clazz?: PlatformCore.RecordRef;
    location?: PlatformCore.RecordRef;
    memo?: string;
    componentList?: AssemblyComponentList;
    accountingBookDetailList?: PlatformCommon.AccountingBookDetailList;
    customFieldList?: PlatformCore.CustomFieldList;
    internalId?: string;
    externalId?: string;
} & PlatformCore.RecordProps;
export declare class AssemblyUnbuild extends PlatformCore.Record {
    createdDate?: string;
    lastModifiedDate?: string;
    customForm?: PlatformCore.RecordRef;
    tranDate?: string;
    postingPeriod?: PlatformCore.RecordRef;
    tranId?: string;
    item?: PlatformCore.RecordRef;
    built?: number;
    quantity?: number;
    units?: PlatformCore.RecordRef;
    total?: number;
    billOfMaterials?: PlatformCore.RecordRef;
    billOfMaterialsRevision?: PlatformCore.RecordRef;
    serialNumbers?: string;
    inventoryDetail?: PlatformCommon.InventoryDetail;
    binNumbers?: string;
    subsidiary?: PlatformCore.RecordRef;
    department?: PlatformCore.RecordRef;
    clazz?: PlatformCore.RecordRef;
    location?: PlatformCore.RecordRef;
    memo?: string;
    componentList?: AssemblyComponentList;
    accountingBookDetailList?: PlatformCommon.AccountingBookDetailList;
    customFieldList?: PlatformCore.CustomFieldList;
    internalId?: string;
    externalId?: string;
    constructor(props: AssemblyUnbuildProps);
}
export declare type AssemblyComponentProps = {
    item?: PlatformCore.RecordRef;
    quantity?: number;
    quantityOnHand?: number;
    componentInventoryDetail?: PlatformCommon.InventoryDetail;
    componentNumbers?: string;
    binNumbers?: string;
    lineNumber?: number;
};
export declare class AssemblyComponent extends SoapMappingBase {
    item?: PlatformCore.RecordRef;
    quantity?: number;
    quantityOnHand?: number;
    componentInventoryDetail?: PlatformCommon.InventoryDetail;
    componentNumbers?: string;
    binNumbers?: string;
    lineNumber?: number;
    constructor(props: AssemblyComponentProps);
}
export declare type InventoryAdjustmentInventoryListProps = {
    inventory?: InventoryAdjustmentInventory[];
    replaceAll?: boolean;
};
export declare class InventoryAdjustmentInventoryList extends SoapMappingBase {
    inventory?: InventoryAdjustmentInventory[];
    replaceAll?: boolean;
    constructor(props: InventoryAdjustmentInventoryListProps);
}
export declare type TransferOrderItemProps = {
    item?: PlatformCore.RecordRef;
    line?: number;
    quantityAvailable?: number;
    quantityOnHand?: number;
    quantityBackOrdered?: number;
    quantityCommitted?: number;
    quantityFulfilled?: number;
    quantityPacked?: number;
    quantityPicked?: number;
    quantityReceived?: number;
    quantity?: number;
    rate?: number;
    units?: PlatformCore.RecordRef;
    amount?: number;
    description?: string;
    inventoryDetail?: PlatformCommon.InventoryDetail;
    serialNumbers?: string;
    commitInventory?: TransactionsInventoryTypes.TransferOrderItemCommitInventory;
    orderPriority?: number;
    options?: PlatformCore.CustomFieldList;
    isClosed?: boolean;
    department?: PlatformCore.RecordRef;
    clazz?: PlatformCore.RecordRef;
    lastPurchasePrice?: number;
    averageCost?: number;
    expectedShipDate?: string;
    expectedReceiptDate?: string;
    customFieldList?: PlatformCore.CustomFieldList;
};
export declare class TransferOrderItem extends SoapMappingBase {
    item?: PlatformCore.RecordRef;
    line?: number;
    quantityAvailable?: number;
    quantityOnHand?: number;
    quantityBackOrdered?: number;
    quantityCommitted?: number;
    quantityFulfilled?: number;
    quantityPacked?: number;
    quantityPicked?: number;
    quantityReceived?: number;
    quantity?: number;
    rate?: number;
    units?: PlatformCore.RecordRef;
    amount?: number;
    description?: string;
    inventoryDetail?: PlatformCommon.InventoryDetail;
    serialNumbers?: string;
    commitInventory?: TransactionsInventoryTypes.TransferOrderItemCommitInventory;
    orderPriority?: number;
    options?: PlatformCore.CustomFieldList;
    isClosed?: boolean;
    department?: PlatformCore.RecordRef;
    clazz?: PlatformCore.RecordRef;
    lastPurchasePrice?: number;
    averageCost?: number;
    expectedShipDate?: string;
    expectedReceiptDate?: string;
    customFieldList?: PlatformCore.CustomFieldList;
    constructor(props: TransferOrderItemProps);
}
export declare type InventoryCostRevaluationCostComponentListProps = {
    costComponent?: InventoryCostRevaluationCostComponent[];
    replaceAll?: boolean;
};
export declare class InventoryCostRevaluationCostComponentList extends SoapMappingBase {
    costComponent?: InventoryCostRevaluationCostComponent[];
    replaceAll?: boolean;
    constructor(props: InventoryCostRevaluationCostComponentListProps);
}
export declare type WorkOrderProps = {
    createdDate?: string;
    lastModifiedDate?: string;
    customForm?: PlatformCore.RecordRef;
    manufacturingRouting?: PlatformCore.RecordRef;
    autoCalculateLag?: boolean;
    status?: string;
    tranId?: string;
    entity?: PlatformCore.RecordRef;
    job?: PlatformCore.RecordRef;
    assemblyItem?: PlatformCore.RecordRef;
    expandAssembly?: boolean;
    isWip?: boolean;
    quantity?: number;
    billOfMaterials?: PlatformCore.RecordRef;
    units?: PlatformCore.RecordRef;
    tranDate?: string;
    orderStatus?: TransactionsInventoryTypes.WorkOrderOrderStatus;
    firmed?: boolean;
    memo?: string;
    department?: PlatformCore.RecordRef;
    clazz?: PlatformCore.RecordRef;
    itemList?: WorkOrderItemList;
    location?: PlatformCore.RecordRef;
    schedulingMethod?: TransactionsInventoryTypes.WorkOrderSchedulingMethod;
    salesTeamList?: SalesTeamList;
    partnersList?: PartnersList;
    createdFrom?: PlatformCore.RecordRef;
    sourceTransactionId?: string;
    sourceTransactionLine?: number;
    specialOrder?: boolean;
    buildable?: number;
    options?: PlatformCore.CustomFieldList;
    built?: number;
    startDate?: string;
    endDate?: string;
    revision?: PlatformCore.RecordRef;
    billOfMaterialsRevision?: PlatformCore.RecordRef;
    subsidiary?: PlatformCore.RecordRef;
    accountingBookDetailList?: PlatformCommon.AccountingBookDetailList;
    customFieldList?: PlatformCore.CustomFieldList;
    internalId?: string;
    externalId?: string;
} & PlatformCore.RecordProps;
export declare class WorkOrder extends PlatformCore.Record {
    createdDate?: string;
    lastModifiedDate?: string;
    customForm?: PlatformCore.RecordRef;
    manufacturingRouting?: PlatformCore.RecordRef;
    autoCalculateLag?: boolean;
    status?: string;
    tranId?: string;
    entity?: PlatformCore.RecordRef;
    job?: PlatformCore.RecordRef;
    assemblyItem?: PlatformCore.RecordRef;
    expandAssembly?: boolean;
    isWip?: boolean;
    quantity?: number;
    billOfMaterials?: PlatformCore.RecordRef;
    units?: PlatformCore.RecordRef;
    tranDate?: string;
    orderStatus?: TransactionsInventoryTypes.WorkOrderOrderStatus;
    firmed?: boolean;
    memo?: string;
    department?: PlatformCore.RecordRef;
    clazz?: PlatformCore.RecordRef;
    itemList?: WorkOrderItemList;
    location?: PlatformCore.RecordRef;
    schedulingMethod?: TransactionsInventoryTypes.WorkOrderSchedulingMethod;
    salesTeamList?: SalesTeamList;
    partnersList?: PartnersList;
    createdFrom?: PlatformCore.RecordRef;
    sourceTransactionId?: string;
    sourceTransactionLine?: number;
    specialOrder?: boolean;
    buildable?: number;
    options?: PlatformCore.CustomFieldList;
    built?: number;
    startDate?: string;
    endDate?: string;
    revision?: PlatformCore.RecordRef;
    billOfMaterialsRevision?: PlatformCore.RecordRef;
    subsidiary?: PlatformCore.RecordRef;
    accountingBookDetailList?: PlatformCommon.AccountingBookDetailList;
    customFieldList?: PlatformCore.CustomFieldList;
    internalId?: string;
    externalId?: string;
    constructor(props: WorkOrderProps);
}
export declare type InventoryTransferInventoryListProps = {
    inventory?: InventoryTransferInventory[];
    replaceAll?: boolean;
};
export declare class InventoryTransferInventoryList extends SoapMappingBase {
    inventory?: InventoryTransferInventory[];
    replaceAll?: boolean;
    constructor(props: InventoryTransferInventoryListProps);
}
export declare type WorkOrderCompletionProps = {
    createdDate?: string;
    lastModifiedDate?: string;
    customForm?: PlatformCore.RecordRef;
    tranId?: string;
    item?: PlatformCore.RecordRef;
    quantity?: number;
    scrapQuantity?: number;
    units?: PlatformCore.RecordRef;
    isBackflush?: boolean;
    orderQuantity?: number;
    total?: number;
    createdFrom?: PlatformCore.RecordRef;
    inventoryDetail?: PlatformCommon.InventoryDetail;
    tranDate?: string;
    postingPeriod?: PlatformCore.RecordRef;
    memo?: string;
    subsidiary?: PlatformCore.RecordRef;
    department?: PlatformCore.RecordRef;
    clazz?: PlatformCore.RecordRef;
    location?: PlatformCore.RecordRef;
    revision?: PlatformCore.RecordRef;
    startOperation?: PlatformCore.RecordRef;
    endOperation?: PlatformCore.RecordRef;
    completedQuantity?: number;
    manufacturingRouting?: PlatformCore.RecordRef;
    componentList?: WorkOrderCompletionComponentList;
    operationList?: WorkOrderCompletionOperationList;
    customFieldList?: PlatformCore.CustomFieldList;
    internalId?: string;
    externalId?: string;
} & PlatformCore.RecordProps;
export declare class WorkOrderCompletion extends PlatformCore.Record {
    createdDate?: string;
    lastModifiedDate?: string;
    customForm?: PlatformCore.RecordRef;
    tranId?: string;
    item?: PlatformCore.RecordRef;
    quantity?: number;
    scrapQuantity?: number;
    units?: PlatformCore.RecordRef;
    isBackflush?: boolean;
    orderQuantity?: number;
    total?: number;
    createdFrom?: PlatformCore.RecordRef;
    inventoryDetail?: PlatformCommon.InventoryDetail;
    tranDate?: string;
    postingPeriod?: PlatformCore.RecordRef;
    memo?: string;
    subsidiary?: PlatformCore.RecordRef;
    department?: PlatformCore.RecordRef;
    clazz?: PlatformCore.RecordRef;
    location?: PlatformCore.RecordRef;
    revision?: PlatformCore.RecordRef;
    startOperation?: PlatformCore.RecordRef;
    endOperation?: PlatformCore.RecordRef;
    completedQuantity?: number;
    manufacturingRouting?: PlatformCore.RecordRef;
    componentList?: WorkOrderCompletionComponentList;
    operationList?: WorkOrderCompletionOperationList;
    customFieldList?: PlatformCore.CustomFieldList;
    internalId?: string;
    externalId?: string;
    constructor(props: WorkOrderCompletionProps);
}
export declare type InventoryTransferProps = {
    createdDate?: string;
    lastModifiedDate?: string;
    tranDate?: string;
    postingPeriod?: PlatformCore.RecordRef;
    tranId?: string;
    memo?: string;
    location?: PlatformCore.RecordRef;
    transferLocation?: PlatformCore.RecordRef;
    department?: PlatformCore.RecordRef;
    clazz?: PlatformCore.RecordRef;
    subsidiary?: PlatformCore.RecordRef;
    inventoryList?: InventoryTransferInventoryList;
    customFieldList?: PlatformCore.CustomFieldList;
    internalId?: string;
    externalId?: string;
} & PlatformCore.RecordProps;
export declare class InventoryTransfer extends PlatformCore.Record {
    createdDate?: string;
    lastModifiedDate?: string;
    tranDate?: string;
    postingPeriod?: PlatformCore.RecordRef;
    tranId?: string;
    memo?: string;
    location?: PlatformCore.RecordRef;
    transferLocation?: PlatformCore.RecordRef;
    department?: PlatformCore.RecordRef;
    clazz?: PlatformCore.RecordRef;
    subsidiary?: PlatformCore.RecordRef;
    inventoryList?: InventoryTransferInventoryList;
    customFieldList?: PlatformCore.CustomFieldList;
    internalId?: string;
    externalId?: string;
    constructor(props: InventoryTransferProps);
}
export declare type BinTransferInventoryProps = {
    line?: number;
    item?: PlatformCore.RecordRef;
    description?: string;
    preferredBin?: string;
    quantity?: number;
    itemUnitsLabel?: string;
    inventoryDetail?: PlatformCommon.InventoryDetail;
    fromBins?: string;
    toBins?: string;
};
export declare class BinTransferInventory extends SoapMappingBase {
    line?: number;
    item?: PlatformCore.RecordRef;
    description?: string;
    preferredBin?: string;
    quantity?: number;
    itemUnitsLabel?: string;
    inventoryDetail?: PlatformCommon.InventoryDetail;
    fromBins?: string;
    toBins?: string;
    constructor(props: BinTransferInventoryProps);
}
export declare type WorkOrderCompletionOperationProps = {
    operationSequence?: number;
    operationName?: string;
    workCenter?: string;
    machineResources?: number;
    laborResources?: number;
    inputQuantity?: number;
    quantityRemaining?: number;
    predecessorCompletedQuantity?: number;
    completedQuantity?: number;
    recordSetup?: boolean;
    machineSetupTime?: number;
    laborSetupTime?: number;
    machineRunTime?: number;
    laborRunTime?: number;
};
export declare class WorkOrderCompletionOperation extends SoapMappingBase {
    operationSequence?: number;
    operationName?: string;
    workCenter?: string;
    machineResources?: number;
    laborResources?: number;
    inputQuantity?: number;
    quantityRemaining?: number;
    predecessorCompletedQuantity?: number;
    completedQuantity?: number;
    recordSetup?: boolean;
    machineSetupTime?: number;
    laborSetupTime?: number;
    machineRunTime?: number;
    laborRunTime?: number;
    constructor(props: WorkOrderCompletionOperationProps);
}
export declare type WorkOrderCompletionComponentListProps = {
    workOrderCompletionComponent?: WorkOrderCompletionComponent[];
    replaceAll?: boolean;
};
export declare class WorkOrderCompletionComponentList extends SoapMappingBase {
    workOrderCompletionComponent?: WorkOrderCompletionComponent[];
    replaceAll?: boolean;
    constructor(props: WorkOrderCompletionComponentListProps);
}
export declare type BinWorksheetProps = {
    createdDate?: string;
    lastModifiedDate?: string;
    tranDate?: string;
    memo?: string;
    location?: PlatformCore.RecordRef;
    tranId?: string;
    itemList?: BinWorksheetItemList;
    customFieldList?: PlatformCore.CustomFieldList;
    internalId?: string;
    externalId?: string;
} & PlatformCore.RecordProps;
export declare class BinWorksheet extends PlatformCore.Record {
    createdDate?: string;
    lastModifiedDate?: string;
    tranDate?: string;
    memo?: string;
    location?: PlatformCore.RecordRef;
    tranId?: string;
    itemList?: BinWorksheetItemList;
    customFieldList?: PlatformCore.CustomFieldList;
    internalId?: string;
    externalId?: string;
    constructor(props: BinWorksheetProps);
}
export declare type WorkOrderCloseProps = {
    createdDate?: string;
    lastModifiedDate?: string;
    customForm?: PlatformCore.RecordRef;
    tranId?: string;
    item?: PlatformCore.RecordRef;
    quantity?: number;
    orderQuantity?: number;
    scrapQuantity?: number;
    createdFrom?: PlatformCore.RecordRef;
    tranDate?: string;
    postingPeriod?: PlatformCore.RecordRef;
    memo?: string;
    subsidiary?: PlatformCore.RecordRef;
    department?: PlatformCore.RecordRef;
    clazz?: PlatformCore.RecordRef;
    location?: PlatformCore.RecordRef;
    revision?: PlatformCore.RecordRef;
    customFieldList?: PlatformCore.CustomFieldList;
    internalId?: string;
    externalId?: string;
} & PlatformCore.RecordProps;
export declare class WorkOrderClose extends PlatformCore.Record {
    createdDate?: string;
    lastModifiedDate?: string;
    customForm?: PlatformCore.RecordRef;
    tranId?: string;
    item?: PlatformCore.RecordRef;
    quantity?: number;
    orderQuantity?: number;
    scrapQuantity?: number;
    createdFrom?: PlatformCore.RecordRef;
    tranDate?: string;
    postingPeriod?: PlatformCore.RecordRef;
    memo?: string;
    subsidiary?: PlatformCore.RecordRef;
    department?: PlatformCore.RecordRef;
    clazz?: PlatformCore.RecordRef;
    location?: PlatformCore.RecordRef;
    revision?: PlatformCore.RecordRef;
    customFieldList?: PlatformCore.CustomFieldList;
    internalId?: string;
    externalId?: string;
    constructor(props: WorkOrderCloseProps);
}
export declare type InterCompanyTransferOrderProps = {
    createdDate?: string;
    lastModifiedDate?: string;
    customForm?: PlatformCore.RecordRef;
    shippingCost?: number;
    subTotal?: number;
    status?: string;
    shippingAddress?: PlatformCommon.Address;
    shipIsResidential?: boolean;
    shipAddressList?: PlatformCore.RecordRef;
    fob?: string;
    tranDate?: string;
    tranId?: string;
    source?: string;
    orderStatus?: TransactionsInventoryTypes.TransferOrderOrderStatus;
    subsidiary?: PlatformCore.RecordRef;
    toSubsidiary?: PlatformCore.RecordRef;
    employee?: PlatformCore.RecordRef;
    useItemCostAsTransferCost?: boolean;
    incoterm?: PlatformCore.RecordRef;
    department?: PlatformCore.RecordRef;
    clazz?: PlatformCore.RecordRef;
    location?: PlatformCore.RecordRef;
    transferLocation?: PlatformCore.RecordRef;
    memo?: string;
    shipDate?: string;
    shipMethod?: PlatformCore.RecordRef;
    trackingNumbers?: string;
    linkedTrackingNumbers?: string;
    shipComplete?: boolean;
    altShippingCost?: number;
    shippingTax1Rate?: number;
    handlingTax1Rate?: number;
    shippingTax2Rate?: number;
    handlingTax2Rate?: number;
    shippingTaxCode?: PlatformCore.RecordRef;
    handlingTaxCode?: PlatformCore.RecordRef;
    total?: number;
    itemList?: InterCompanyTransferOrderItemList;
    accountingBookDetailList?: PlatformCommon.AccountingBookDetailList;
    customFieldList?: PlatformCore.CustomFieldList;
    internalId?: string;
    externalId?: string;
} & PlatformCore.RecordProps;
export declare class InterCompanyTransferOrder extends PlatformCore.Record {
    createdDate?: string;
    lastModifiedDate?: string;
    customForm?: PlatformCore.RecordRef;
    shippingCost?: number;
    subTotal?: number;
    status?: string;
    shippingAddress?: PlatformCommon.Address;
    shipIsResidential?: boolean;
    shipAddressList?: PlatformCore.RecordRef;
    fob?: string;
    tranDate?: string;
    tranId?: string;
    source?: string;
    orderStatus?: TransactionsInventoryTypes.TransferOrderOrderStatus;
    subsidiary?: PlatformCore.RecordRef;
    toSubsidiary?: PlatformCore.RecordRef;
    employee?: PlatformCore.RecordRef;
    useItemCostAsTransferCost?: boolean;
    incoterm?: PlatformCore.RecordRef;
    department?: PlatformCore.RecordRef;
    clazz?: PlatformCore.RecordRef;
    location?: PlatformCore.RecordRef;
    transferLocation?: PlatformCore.RecordRef;
    memo?: string;
    shipDate?: string;
    shipMethod?: PlatformCore.RecordRef;
    trackingNumbers?: string;
    linkedTrackingNumbers?: string;
    shipComplete?: boolean;
    altShippingCost?: number;
    shippingTax1Rate?: number;
    handlingTax1Rate?: number;
    shippingTax2Rate?: number;
    handlingTax2Rate?: number;
    shippingTaxCode?: PlatformCore.RecordRef;
    handlingTaxCode?: PlatformCore.RecordRef;
    total?: number;
    itemList?: InterCompanyTransferOrderItemList;
    accountingBookDetailList?: PlatformCommon.AccountingBookDetailList;
    customFieldList?: PlatformCore.CustomFieldList;
    internalId?: string;
    externalId?: string;
    constructor(props: InterCompanyTransferOrderProps);
}
export declare type InventoryTransferInventoryProps = {
    line?: number;
    item?: PlatformCore.RecordRef;
    description?: string;
    units?: PlatformCore.RecordRef;
    quantityOnHand?: number;
    adjustQtyBy?: number;
    serialNumbers?: string;
    fromBinNumbers?: string;
    toBinNumbers?: string;
    inventoryDetail?: PlatformCommon.InventoryDetail;
    customFieldList?: PlatformCore.CustomFieldList;
};
export declare class InventoryTransferInventory extends SoapMappingBase {
    line?: number;
    item?: PlatformCore.RecordRef;
    description?: string;
    units?: PlatformCore.RecordRef;
    quantityOnHand?: number;
    adjustQtyBy?: number;
    serialNumbers?: string;
    fromBinNumbers?: string;
    toBinNumbers?: string;
    inventoryDetail?: PlatformCommon.InventoryDetail;
    customFieldList?: PlatformCore.CustomFieldList;
    constructor(props: InventoryTransferInventoryProps);
}
