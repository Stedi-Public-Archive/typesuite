import * as PlatformCore from "./platform_core";
import * as PlatformCommon from "./platform_common";
import * as TransactionsCustomersTypes from "./transactions_customers_types";
import * as PlatformCommonTypes from "./platform_common_types";
import { SoapMappingBase } from "../../soap-types";
export declare type ReturnAuthorizationSalesTeamListProps = {
    salesTeam?: ReturnAuthorizationSalesTeam[];
    replaceAll?: boolean;
};
export declare class ReturnAuthorizationSalesTeamList extends SoapMappingBase {
    salesTeam?: ReturnAuthorizationSalesTeam[];
    replaceAll?: boolean;
    constructor(props: ReturnAuthorizationSalesTeamListProps);
}
export declare type CreditMemoApplyProps = {
    apply?: boolean;
    doc?: number;
    applyDate?: string;
    job?: string;
    type?: string;
    refNum?: string;
    total?: number;
    due?: number;
    currency?: string;
    amount?: number;
    line?: number;
};
export declare class CreditMemoApply extends SoapMappingBase {
    apply?: boolean;
    doc?: number;
    applyDate?: string;
    job?: string;
    type?: string;
    refNum?: string;
    total?: number;
    due?: number;
    currency?: string;
    amount?: number;
    line?: number;
    constructor(props: CreditMemoApplyProps);
}
export declare type CustomerPaymentDepositListProps = {
    deposit?: CustomerPaymentDeposit[];
    replaceAll?: boolean;
};
export declare class CustomerPaymentDepositList extends SoapMappingBase {
    deposit?: CustomerPaymentDeposit[];
    replaceAll?: boolean;
    constructor(props: CustomerPaymentDepositListProps);
}
export declare type CustomerRefundApplyProps = {
    apply?: boolean;
    doc?: number;
    line?: number;
    applyDate?: string;
    type?: string;
    refNum?: string;
    total?: number;
    due?: number;
    currency?: string;
    amount?: number;
};
export declare class CustomerRefundApply extends SoapMappingBase {
    apply?: boolean;
    doc?: number;
    line?: number;
    applyDate?: string;
    type?: string;
    refNum?: string;
    total?: number;
    due?: number;
    currency?: string;
    amount?: number;
    constructor(props: CustomerRefundApplyProps);
}
export declare type ReturnAuthorizationProps = {
    createdDate?: string;
    lastModifiedDate?: string;
    nexus?: PlatformCore.RecordRef;
    subsidiaryTaxRegNum?: PlatformCore.RecordRef;
    taxRegOverride?: boolean;
    taxDetailsOverride?: boolean;
    customForm?: PlatformCore.RecordRef;
    currency?: PlatformCore.RecordRef;
    entity?: PlatformCore.RecordRef;
    vatRegNum?: string;
    tranDate?: string;
    tranId?: string;
    entityTaxRegNum?: PlatformCore.RecordRef;
    taxPointDate?: string;
    source?: string;
    department?: PlatformCore.RecordRef;
    clazz?: PlatformCore.RecordRef;
    location?: PlatformCore.RecordRef;
    subsidiary?: PlatformCore.RecordRef;
    intercoTransaction?: PlatformCore.RecordRef;
    intercoStatus?: PlatformCommonTypes.IntercoStatus;
    job?: PlatformCore.RecordRef;
    partner?: PlatformCore.RecordRef;
    otherRefNum?: string;
    leadSource?: PlatformCore.RecordRef;
    memo?: string;
    drAccount?: PlatformCore.RecordRef;
    fxAccount?: PlatformCore.RecordRef;
    salesEffectiveDate?: string;
    createdFrom?: PlatformCore.RecordRef;
    revRecSchedule?: PlatformCore.RecordRef;
    totalCostEstimate?: number;
    estGrossProfit?: number;
    estGrossProfitPercent?: number;
    revRecStartDate?: string;
    revRecEndDate?: string;
    excludeCommission?: boolean;
    exchangeRate?: number;
    currencyName?: string;
    discountItem?: PlatformCore.RecordRef;
    discountRate?: string;
    taxItem?: PlatformCore.RecordRef;
    taxRate?: number;
    toBePrinted?: boolean;
    toBeEmailed?: boolean;
    toBeFaxed?: boolean;
    messageSel?: PlatformCore.RecordRef;
    message?: string;
    billingAddress?: PlatformCommon.Address;
    billAddressList?: PlatformCore.RecordRef;
    shipAddressList?: PlatformCore.RecordRef;
    shipAddress?: string;
    salesGroup?: PlatformCore.RecordRef;
    syncSalesTeams?: boolean;
    revenueStatus?: PlatformCommonTypes.RevenueStatus;
    recognizedRevenue?: number;
    deferredRevenue?: number;
    revRecOnRevCommitment?: boolean;
    revCommitStatus?: PlatformCommonTypes.RevenueCommitStatus;
    paymentMethod?: PlatformCore.RecordRef;
    creditCard?: PlatformCore.RecordRef;
    ccNumber?: string;
    altSalesTotal?: number;
    ccExpireDate?: string;
    ccName?: string;
    ccStreet?: string;
    ccZipCode?: string;
    ccApproved?: boolean;
    pnRefNum?: string;
    subTotal?: number;
    discountTotal?: number;
    total?: number;
    creditCardProcessor?: PlatformCore.RecordRef;
    payPalAuthId?: string;
    payPalProcess?: boolean;
    email?: string;
    fax?: string;
    debitCardIssueNo?: string;
    isTaxable?: boolean;
    promoCode?: PlatformCore.RecordRef;
    status?: string;
    taxTotal?: number;
    tax2Total?: number;
    validFrom?: string;
    orderStatus?: TransactionsCustomersTypes.ReturnAuthorizationOrderStatus;
    salesRep?: PlatformCore.RecordRef;
    giftCert?: PlatformCore.RecordRef;
    contribPct?: string;
    giftCertTotal?: number;
    giftCertApplied?: number;
    giftCertAvailable?: number;
    tranIsVsoeBundle?: boolean;
    vsoeAutoCalc?: boolean;
    syncPartnerTeams?: boolean;
    itemList?: ReturnAuthorizationItemList;
    accountingBookDetailList?: PlatformCommon.AccountingBookDetailList;
    salesTeamList?: ReturnAuthorizationSalesTeamList;
    partnersList?: ReturnAuthorizationPartnersList;
    taxDetailsList?: PlatformCommon.TaxDetailsList;
    customFieldList?: PlatformCore.CustomFieldList;
    internalId?: string;
    externalId?: string;
} & PlatformCore.RecordProps;
export declare class ReturnAuthorization extends PlatformCore.Record {
    createdDate?: string;
    lastModifiedDate?: string;
    nexus?: PlatformCore.RecordRef;
    subsidiaryTaxRegNum?: PlatformCore.RecordRef;
    taxRegOverride?: boolean;
    taxDetailsOverride?: boolean;
    customForm?: PlatformCore.RecordRef;
    currency?: PlatformCore.RecordRef;
    entity?: PlatformCore.RecordRef;
    vatRegNum?: string;
    tranDate?: string;
    tranId?: string;
    entityTaxRegNum?: PlatformCore.RecordRef;
    taxPointDate?: string;
    source?: string;
    department?: PlatformCore.RecordRef;
    clazz?: PlatformCore.RecordRef;
    location?: PlatformCore.RecordRef;
    subsidiary?: PlatformCore.RecordRef;
    intercoTransaction?: PlatformCore.RecordRef;
    intercoStatus?: PlatformCommonTypes.IntercoStatus;
    job?: PlatformCore.RecordRef;
    partner?: PlatformCore.RecordRef;
    otherRefNum?: string;
    leadSource?: PlatformCore.RecordRef;
    memo?: string;
    drAccount?: PlatformCore.RecordRef;
    fxAccount?: PlatformCore.RecordRef;
    salesEffectiveDate?: string;
    createdFrom?: PlatformCore.RecordRef;
    revRecSchedule?: PlatformCore.RecordRef;
    totalCostEstimate?: number;
    estGrossProfit?: number;
    estGrossProfitPercent?: number;
    revRecStartDate?: string;
    revRecEndDate?: string;
    excludeCommission?: boolean;
    exchangeRate?: number;
    currencyName?: string;
    discountItem?: PlatformCore.RecordRef;
    discountRate?: string;
    taxItem?: PlatformCore.RecordRef;
    taxRate?: number;
    toBePrinted?: boolean;
    toBeEmailed?: boolean;
    toBeFaxed?: boolean;
    messageSel?: PlatformCore.RecordRef;
    message?: string;
    billingAddress?: PlatformCommon.Address;
    billAddressList?: PlatformCore.RecordRef;
    shipAddressList?: PlatformCore.RecordRef;
    shipAddress?: string;
    salesGroup?: PlatformCore.RecordRef;
    syncSalesTeams?: boolean;
    revenueStatus?: PlatformCommonTypes.RevenueStatus;
    recognizedRevenue?: number;
    deferredRevenue?: number;
    revRecOnRevCommitment?: boolean;
    revCommitStatus?: PlatformCommonTypes.RevenueCommitStatus;
    paymentMethod?: PlatformCore.RecordRef;
    creditCard?: PlatformCore.RecordRef;
    ccNumber?: string;
    altSalesTotal?: number;
    ccExpireDate?: string;
    ccName?: string;
    ccStreet?: string;
    ccZipCode?: string;
    ccApproved?: boolean;
    pnRefNum?: string;
    subTotal?: number;
    discountTotal?: number;
    total?: number;
    creditCardProcessor?: PlatformCore.RecordRef;
    payPalAuthId?: string;
    payPalProcess?: boolean;
    email?: string;
    fax?: string;
    debitCardIssueNo?: string;
    isTaxable?: boolean;
    promoCode?: PlatformCore.RecordRef;
    status?: string;
    taxTotal?: number;
    tax2Total?: number;
    validFrom?: string;
    orderStatus?: TransactionsCustomersTypes.ReturnAuthorizationOrderStatus;
    salesRep?: PlatformCore.RecordRef;
    giftCert?: PlatformCore.RecordRef;
    contribPct?: string;
    giftCertTotal?: number;
    giftCertApplied?: number;
    giftCertAvailable?: number;
    tranIsVsoeBundle?: boolean;
    vsoeAutoCalc?: boolean;
    syncPartnerTeams?: boolean;
    itemList?: ReturnAuthorizationItemList;
    accountingBookDetailList?: PlatformCommon.AccountingBookDetailList;
    salesTeamList?: ReturnAuthorizationSalesTeamList;
    partnersList?: ReturnAuthorizationPartnersList;
    taxDetailsList?: PlatformCommon.TaxDetailsList;
    customFieldList?: PlatformCore.CustomFieldList;
    internalId?: string;
    externalId?: string;
    constructor(props: ReturnAuthorizationProps);
}
export declare type CustomerRefundApplyListProps = {
    apply?: CustomerRefundApply[];
    replaceAll?: boolean;
};
export declare class CustomerRefundApplyList extends SoapMappingBase {
    apply?: CustomerRefundApply[];
    replaceAll?: boolean;
    constructor(props: CustomerRefundApplyListProps);
}
export declare type DepositApplicationProps = {
    createdDate?: string;
    lastModifiedDate?: string;
    arAcct?: PlatformCore.RecordRef;
    status?: string;
    customer?: PlatformCore.RecordRef;
    tranDate?: string;
    postingPeriod?: PlatformCore.RecordRef;
    deposit?: PlatformCore.RecordRef;
    depDate?: string;
    currency?: PlatformCore.RecordRef;
    exchangeRate?: number;
    memo?: string;
    subsidiary?: PlatformCore.RecordRef;
    total?: number;
    department?: PlatformCore.RecordRef;
    applied?: number;
    clazz?: PlatformCore.RecordRef;
    unapplied?: number;
    location?: PlatformCore.RecordRef;
    tranId?: string;
    applyList?: DepositApplicationApplyList;
    accountingBookDetailList?: PlatformCommon.AccountingBookDetailList;
    customFieldList?: PlatformCore.CustomFieldList;
    internalId?: string;
    externalId?: string;
} & PlatformCore.RecordProps;
export declare class DepositApplication extends PlatformCore.Record {
    createdDate?: string;
    lastModifiedDate?: string;
    arAcct?: PlatformCore.RecordRef;
    status?: string;
    customer?: PlatformCore.RecordRef;
    tranDate?: string;
    postingPeriod?: PlatformCore.RecordRef;
    deposit?: PlatformCore.RecordRef;
    depDate?: string;
    currency?: PlatformCore.RecordRef;
    exchangeRate?: number;
    memo?: string;
    subsidiary?: PlatformCore.RecordRef;
    total?: number;
    department?: PlatformCore.RecordRef;
    applied?: number;
    clazz?: PlatformCore.RecordRef;
    unapplied?: number;
    location?: PlatformCore.RecordRef;
    tranId?: string;
    applyList?: DepositApplicationApplyList;
    accountingBookDetailList?: PlatformCommon.AccountingBookDetailList;
    customFieldList?: PlatformCore.CustomFieldList;
    internalId?: string;
    externalId?: string;
    constructor(props: DepositApplicationProps);
}
export declare type CustomerPaymentApplyListProps = {
    apply?: CustomerPaymentApply[];
    replaceAll?: boolean;
};
export declare class CustomerPaymentApplyList extends SoapMappingBase {
    apply?: CustomerPaymentApply[];
    replaceAll?: boolean;
    constructor(props: CustomerPaymentApplyListProps);
}
export declare type ChargeSearchProps = {
    basic?: PlatformCommon.ChargeSearchBasic;
    billingAccountJoin?: PlatformCommon.BillingAccountSearchBasic;
    billingScheduleJoin?: PlatformCommon.BillingScheduleSearchBasic;
    chargeEmployeeJoin?: PlatformCommon.EmployeeSearchBasic;
    customerJoin?: PlatformCommon.CustomerSearchBasic;
    invoiceJoin?: PlatformCommon.TransactionSearchBasic;
    itemJoin?: PlatformCommon.ItemSearchBasic;
    jobJoin?: PlatformCommon.JobSearchBasic;
    salesOrderJoin?: PlatformCommon.TransactionSearchBasic;
    timeJoin?: PlatformCommon.TimeBillSearchBasic;
    transactionJoin?: PlatformCommon.TransactionSearchBasic;
    usageJoin?: PlatformCommon.UsageSearchBasic;
    userJoin?: PlatformCommon.EmployeeSearchBasic;
    customSearchJoin?: PlatformCommon.CustomSearchJoin[];
};
export declare class ChargeSearch extends PlatformCore.SearchRecord {
    basic?: PlatformCommon.ChargeSearchBasic;
    billingAccountJoin?: PlatformCommon.BillingAccountSearchBasic;
    billingScheduleJoin?: PlatformCommon.BillingScheduleSearchBasic;
    chargeEmployeeJoin?: PlatformCommon.EmployeeSearchBasic;
    customerJoin?: PlatformCommon.CustomerSearchBasic;
    invoiceJoin?: PlatformCommon.TransactionSearchBasic;
    itemJoin?: PlatformCommon.ItemSearchBasic;
    jobJoin?: PlatformCommon.JobSearchBasic;
    salesOrderJoin?: PlatformCommon.TransactionSearchBasic;
    timeJoin?: PlatformCommon.TimeBillSearchBasic;
    transactionJoin?: PlatformCommon.TransactionSearchBasic;
    usageJoin?: PlatformCommon.UsageSearchBasic;
    userJoin?: PlatformCommon.EmployeeSearchBasic;
    customSearchJoin?: PlatformCommon.CustomSearchJoin[];
    constructor(props: ChargeSearchProps);
}
export declare type CreditMemoProps = {
    createdDate?: string;
    lastModifiedDate?: string;
    nexus?: PlatformCore.RecordRef;
    subsidiaryTaxRegNum?: PlatformCore.RecordRef;
    taxRegOverride?: boolean;
    taxDetailsOverride?: boolean;
    customForm?: PlatformCore.RecordRef;
    currency?: PlatformCore.RecordRef;
    entity?: PlatformCore.RecordRef;
    vatRegNum?: string;
    tranDate?: string;
    tranId?: string;
    entityTaxRegNum?: PlatformCore.RecordRef;
    taxPointDate?: string;
    createdFrom?: PlatformCore.RecordRef;
    postingPeriod?: PlatformCore.RecordRef;
    department?: PlatformCore.RecordRef;
    clazz?: PlatformCore.RecordRef;
    location?: PlatformCore.RecordRef;
    subsidiary?: PlatformCore.RecordRef;
    job?: PlatformCore.RecordRef;
    salesRep?: PlatformCore.RecordRef;
    partner?: PlatformCore.RecordRef;
    contribPct?: string;
    otherRefNum?: string;
    memo?: string;
    excludeCommission?: boolean;
    leadSource?: PlatformCore.RecordRef;
    balance?: number;
    account?: PlatformCore.RecordRef;
    exchangeRate?: number;
    onCreditHold?: string;
    amountPaid?: number;
    salesEffectiveDate?: string;
    totalCostEstimate?: number;
    estGrossProfit?: number;
    estGrossProfitPercent?: number;
    currencyName?: string;
    promoCode?: PlatformCore.RecordRef;
    amountRemaining?: number;
    discountItem?: PlatformCore.RecordRef;
    source?: string;
    discountRate?: string;
    isTaxable?: boolean;
    taxItem?: PlatformCore.RecordRef;
    taxRate?: number;
    unapplied?: number;
    autoApply?: boolean;
    applied?: number;
    toBePrinted?: boolean;
    toBeEmailed?: boolean;
    email?: string;
    toBeFaxed?: boolean;
    fax?: string;
    messageSel?: PlatformCore.RecordRef;
    message?: string;
    billingAddress?: PlatformCommon.Address;
    billAddressList?: PlatformCore.RecordRef;
    shipMethod?: PlatformCore.RecordRef;
    shippingCost?: number;
    shippingTax1Rate?: number;
    shippingTaxCode?: PlatformCore.RecordRef;
    handlingTaxCode?: PlatformCore.RecordRef;
    shippingTax2Rate?: string;
    handlingTax1Rate?: number;
    handlingTax2Rate?: string;
    handlingCost?: number;
    subTotal?: number;
    discountTotal?: number;
    revenueStatus?: PlatformCommonTypes.RevenueStatus;
    recognizedRevenue?: number;
    deferredRevenue?: number;
    revRecOnRevCommitment?: boolean;
    taxTotal?: number;
    tax2Total?: number;
    altShippingCost?: number;
    altHandlingCost?: number;
    isMultiShipTo?: boolean;
    total?: number;
    salesGroup?: PlatformCore.RecordRef;
    syncSalesTeams?: boolean;
    status?: string;
    giftCert?: PlatformCore.RecordRef;
    giftCertTotal?: number;
    giftCertApplied?: number;
    giftCertAvailable?: number;
    tranIsVsoeBundle?: boolean;
    vsoeAutoCalc?: boolean;
    syncPartnerTeams?: boolean;
    salesTeamList?: CreditMemoSalesTeamList;
    itemList?: CreditMemoItemList;
    accountingBookDetailList?: PlatformCommon.AccountingBookDetailList;
    partnersList?: CreditMemoPartnersList;
    applyList?: CreditMemoApplyList;
    taxDetailsList?: PlatformCommon.TaxDetailsList;
    customFieldList?: PlatformCore.CustomFieldList;
    internalId?: string;
    externalId?: string;
} & PlatformCore.RecordProps;
export declare class CreditMemo extends PlatformCore.Record {
    createdDate?: string;
    lastModifiedDate?: string;
    nexus?: PlatformCore.RecordRef;
    subsidiaryTaxRegNum?: PlatformCore.RecordRef;
    taxRegOverride?: boolean;
    taxDetailsOverride?: boolean;
    customForm?: PlatformCore.RecordRef;
    currency?: PlatformCore.RecordRef;
    entity?: PlatformCore.RecordRef;
    vatRegNum?: string;
    tranDate?: string;
    tranId?: string;
    entityTaxRegNum?: PlatformCore.RecordRef;
    taxPointDate?: string;
    createdFrom?: PlatformCore.RecordRef;
    postingPeriod?: PlatformCore.RecordRef;
    department?: PlatformCore.RecordRef;
    clazz?: PlatformCore.RecordRef;
    location?: PlatformCore.RecordRef;
    subsidiary?: PlatformCore.RecordRef;
    job?: PlatformCore.RecordRef;
    salesRep?: PlatformCore.RecordRef;
    partner?: PlatformCore.RecordRef;
    contribPct?: string;
    otherRefNum?: string;
    memo?: string;
    excludeCommission?: boolean;
    leadSource?: PlatformCore.RecordRef;
    balance?: number;
    account?: PlatformCore.RecordRef;
    exchangeRate?: number;
    onCreditHold?: string;
    amountPaid?: number;
    salesEffectiveDate?: string;
    totalCostEstimate?: number;
    estGrossProfit?: number;
    estGrossProfitPercent?: number;
    currencyName?: string;
    promoCode?: PlatformCore.RecordRef;
    amountRemaining?: number;
    discountItem?: PlatformCore.RecordRef;
    source?: string;
    discountRate?: string;
    isTaxable?: boolean;
    taxItem?: PlatformCore.RecordRef;
    taxRate?: number;
    unapplied?: number;
    autoApply?: boolean;
    applied?: number;
    toBePrinted?: boolean;
    toBeEmailed?: boolean;
    email?: string;
    toBeFaxed?: boolean;
    fax?: string;
    messageSel?: PlatformCore.RecordRef;
    message?: string;
    billingAddress?: PlatformCommon.Address;
    billAddressList?: PlatformCore.RecordRef;
    shipMethod?: PlatformCore.RecordRef;
    shippingCost?: number;
    shippingTax1Rate?: number;
    shippingTaxCode?: PlatformCore.RecordRef;
    handlingTaxCode?: PlatformCore.RecordRef;
    shippingTax2Rate?: string;
    handlingTax1Rate?: number;
    handlingTax2Rate?: string;
    handlingCost?: number;
    subTotal?: number;
    discountTotal?: number;
    revenueStatus?: PlatformCommonTypes.RevenueStatus;
    recognizedRevenue?: number;
    deferredRevenue?: number;
    revRecOnRevCommitment?: boolean;
    taxTotal?: number;
    tax2Total?: number;
    altShippingCost?: number;
    altHandlingCost?: number;
    isMultiShipTo?: boolean;
    total?: number;
    salesGroup?: PlatformCore.RecordRef;
    syncSalesTeams?: boolean;
    status?: string;
    giftCert?: PlatformCore.RecordRef;
    giftCertTotal?: number;
    giftCertApplied?: number;
    giftCertAvailable?: number;
    tranIsVsoeBundle?: boolean;
    vsoeAutoCalc?: boolean;
    syncPartnerTeams?: boolean;
    salesTeamList?: CreditMemoSalesTeamList;
    itemList?: CreditMemoItemList;
    accountingBookDetailList?: PlatformCommon.AccountingBookDetailList;
    partnersList?: CreditMemoPartnersList;
    applyList?: CreditMemoApplyList;
    taxDetailsList?: PlatformCommon.TaxDetailsList;
    customFieldList?: PlatformCore.CustomFieldList;
    internalId?: string;
    externalId?: string;
    constructor(props: CreditMemoProps);
}
export declare type ChargeSearchAdvancedProps = {
    criteria?: ChargeSearch;
    columns?: ChargeSearchRow;
    savedSearchId?: string;
    savedSearchScriptId?: string;
};
export declare class ChargeSearchAdvanced extends PlatformCore.SearchRecord {
    criteria?: ChargeSearch;
    columns?: ChargeSearchRow;
    savedSearchId?: string;
    savedSearchScriptId?: string;
    constructor(props: ChargeSearchAdvancedProps);
}
export declare type ReturnAuthorizationItemListProps = {
    item?: ReturnAuthorizationItem[];
    replaceAll?: boolean;
};
export declare class ReturnAuthorizationItemList extends SoapMappingBase {
    item?: ReturnAuthorizationItem[];
    replaceAll?: boolean;
    constructor(props: ReturnAuthorizationItemListProps);
}
export declare type CashRefundItemProps = {
    job?: PlatformCore.RecordRef;
    item?: PlatformCore.RecordRef;
    line?: number;
    orderLine?: number;
    quantity?: number;
    units?: PlatformCore.RecordRef;
    inventoryDetail?: PlatformCommon.InventoryDetail;
    binNumbers?: string;
    serialNumbers?: string;
    description?: string;
    price?: PlatformCore.RecordRef;
    rate?: string;
    amount?: number;
    taxCode?: PlatformCore.RecordRef;
    taxRate1?: string;
    taxRate2?: string;
    tax1Amt?: number;
    grossAmt?: number;
    isTaxable?: boolean;
    options?: PlatformCore.CustomFieldList;
    department?: PlatformCore.RecordRef;
    clazz?: PlatformCore.RecordRef;
    location?: PlatformCore.RecordRef;
    revRecSchedule?: PlatformCore.RecordRef;
    revRecStartDate?: string;
    revRecEndDate?: string;
    catchUpPeriod?: PlatformCore.RecordRef;
    deferRevRec?: boolean;
    giftCertFrom?: string;
    costEstimateType?: PlatformCommonTypes.ItemCostEstimateType;
    costEstimate?: number;
    taxDetailsReference?: string;
    giftCertRecipientName?: string;
    giftCertRecipientEmail?: string;
    giftCertMessage?: string;
    taxAmount?: number;
    giftCertNumber?: string;
    vsoeSopGroup?: PlatformCommonTypes.VsoeSopGroup;
    vsoeIsEstimate?: boolean;
    vsoePrice?: number;
    vsoeAmount?: number;
    vsoeAllocation?: number;
    vsoeDeferral?: PlatformCommonTypes.VsoeDeferral;
    vsoePermitDiscount?: PlatformCommonTypes.VsoePermitDiscount;
    vsoeDelivered?: boolean;
    chargeType?: PlatformCore.RecordRef;
    chargesList?: PlatformCore.RecordRefList;
    customFieldList?: PlatformCore.CustomFieldList;
};
export declare class CashRefundItem extends SoapMappingBase {
    job?: PlatformCore.RecordRef;
    item?: PlatformCore.RecordRef;
    line?: number;
    orderLine?: number;
    quantity?: number;
    units?: PlatformCore.RecordRef;
    inventoryDetail?: PlatformCommon.InventoryDetail;
    binNumbers?: string;
    serialNumbers?: string;
    description?: string;
    price?: PlatformCore.RecordRef;
    rate?: string;
    amount?: number;
    taxCode?: PlatformCore.RecordRef;
    taxRate1?: string;
    taxRate2?: string;
    tax1Amt?: number;
    grossAmt?: number;
    isTaxable?: boolean;
    options?: PlatformCore.CustomFieldList;
    department?: PlatformCore.RecordRef;
    clazz?: PlatformCore.RecordRef;
    location?: PlatformCore.RecordRef;
    revRecSchedule?: PlatformCore.RecordRef;
    revRecStartDate?: string;
    revRecEndDate?: string;
    catchUpPeriod?: PlatformCore.RecordRef;
    deferRevRec?: boolean;
    giftCertFrom?: string;
    costEstimateType?: PlatformCommonTypes.ItemCostEstimateType;
    costEstimate?: number;
    taxDetailsReference?: string;
    giftCertRecipientName?: string;
    giftCertRecipientEmail?: string;
    giftCertMessage?: string;
    taxAmount?: number;
    giftCertNumber?: string;
    vsoeSopGroup?: PlatformCommonTypes.VsoeSopGroup;
    vsoeIsEstimate?: boolean;
    vsoePrice?: number;
    vsoeAmount?: number;
    vsoeAllocation?: number;
    vsoeDeferral?: PlatformCommonTypes.VsoeDeferral;
    vsoePermitDiscount?: PlatformCommonTypes.VsoePermitDiscount;
    vsoeDelivered?: boolean;
    chargeType?: PlatformCore.RecordRef;
    chargesList?: PlatformCore.RecordRefList;
    customFieldList?: PlatformCore.CustomFieldList;
    constructor(props: CashRefundItemProps);
}
export declare type CustomerRefundProps = {
    createdDate?: string;
    lastModifiedDate?: string;
    status?: string;
    transactionNumber?: string;
    customer?: PlatformCore.RecordRef;
    customForm?: PlatformCore.RecordRef;
    balance?: number;
    arAcct?: PlatformCore.RecordRef;
    currencyName?: string;
    exchangeRate?: number;
    address?: string;
    total?: number;
    currency?: PlatformCore.RecordRef;
    tranDate?: string;
    voidJournal?: PlatformCore.RecordRef;
    postingPeriod?: PlatformCore.RecordRef;
    memo?: string;
    paymentMethod?: PlatformCore.RecordRef;
    account?: PlatformCore.RecordRef;
    toBePrinted?: boolean;
    tranId?: string;
    debitCardIssueNo?: string;
    creditCardProcessor?: PlatformCore.RecordRef;
    chargeIt?: boolean;
    pnRefNum?: string;
    validFrom?: string;
    subsidiary?: PlatformCore.RecordRef;
    department?: PlatformCore.RecordRef;
    clazz?: PlatformCore.RecordRef;
    location?: PlatformCore.RecordRef;
    paymentOption?: PlatformCore.RecordRef;
    inputAuthCode?: string;
    inputReferenceCode?: string;
    checkNumber?: string;
    paymentCardCsc?: string;
    paymentProcessingProfile?: PlatformCore.RecordRef;
    handlingMode?: TransactionsCustomersTypes.CustomerRefundHandlingMode;
    outputAuthCode?: string;
    outputReferenceCode?: string;
    paymentOperation?: TransactionsCustomersTypes.CustomerRefundPaymentOperation;
    dynamicDescriptor?: string;
    creditCard?: PlatformCore.RecordRef;
    ccIsPurchaseCardBin?: boolean;
    ccNumber?: string;
    ccProcessAsPurchaseCard?: boolean;
    ccExpireDate?: string;
    ccName?: string;
    ccStreet?: string;
    ccZipCode?: string;
    ccApproved?: boolean;
    applyList?: CustomerRefundApplyList;
    depositList?: CustomerRefundDepositList;
    accountingBookDetailList?: PlatformCommon.AccountingBookDetailList;
    customFieldList?: PlatformCore.CustomFieldList;
    internalId?: string;
    externalId?: string;
} & PlatformCore.RecordProps;
export declare class CustomerRefund extends PlatformCore.Record {
    createdDate?: string;
    lastModifiedDate?: string;
    status?: string;
    transactionNumber?: string;
    customer?: PlatformCore.RecordRef;
    customForm?: PlatformCore.RecordRef;
    balance?: number;
    arAcct?: PlatformCore.RecordRef;
    currencyName?: string;
    exchangeRate?: number;
    address?: string;
    total?: number;
    currency?: PlatformCore.RecordRef;
    tranDate?: string;
    voidJournal?: PlatformCore.RecordRef;
    postingPeriod?: PlatformCore.RecordRef;
    memo?: string;
    paymentMethod?: PlatformCore.RecordRef;
    account?: PlatformCore.RecordRef;
    toBePrinted?: boolean;
    tranId?: string;
    debitCardIssueNo?: string;
    creditCardProcessor?: PlatformCore.RecordRef;
    chargeIt?: boolean;
    pnRefNum?: string;
    validFrom?: string;
    subsidiary?: PlatformCore.RecordRef;
    department?: PlatformCore.RecordRef;
    clazz?: PlatformCore.RecordRef;
    location?: PlatformCore.RecordRef;
    paymentOption?: PlatformCore.RecordRef;
    inputAuthCode?: string;
    inputReferenceCode?: string;
    checkNumber?: string;
    paymentCardCsc?: string;
    paymentProcessingProfile?: PlatformCore.RecordRef;
    handlingMode?: TransactionsCustomersTypes.CustomerRefundHandlingMode;
    outputAuthCode?: string;
    outputReferenceCode?: string;
    paymentOperation?: TransactionsCustomersTypes.CustomerRefundPaymentOperation;
    dynamicDescriptor?: string;
    creditCard?: PlatformCore.RecordRef;
    ccIsPurchaseCardBin?: boolean;
    ccNumber?: string;
    ccProcessAsPurchaseCard?: boolean;
    ccExpireDate?: string;
    ccName?: string;
    ccStreet?: string;
    ccZipCode?: string;
    ccApproved?: boolean;
    applyList?: CustomerRefundApplyList;
    depositList?: CustomerRefundDepositList;
    accountingBookDetailList?: PlatformCommon.AccountingBookDetailList;
    customFieldList?: PlatformCore.CustomFieldList;
    internalId?: string;
    externalId?: string;
    constructor(props: CustomerRefundProps);
}
export declare type ReturnAuthorizationItemProps = {
    job?: PlatformCore.RecordRef;
    item?: PlatformCore.RecordRef;
    orderLine?: number;
    line?: number;
    quantity?: number;
    quantityReceived?: number;
    quantityBilled?: number;
    units?: PlatformCore.RecordRef;
    inventoryDetail?: PlatformCommon.InventoryDetail;
    description?: string;
    serialNumbers?: string;
    price?: PlatformCore.RecordRef;
    rate?: string;
    amount?: number;
    options?: PlatformCore.CustomFieldList;
    revRecTermInMonths?: number;
    deferRevRec?: boolean;
    isClosed?: boolean;
    isDropShipment?: boolean;
    inventoryLocation?: PlatformCore.RecordRef;
    inventorySubsidiary?: PlatformCore.RecordRef;
    catchUpPeriod?: PlatformCore.RecordRef;
    department?: PlatformCore.RecordRef;
    costEstimateType?: PlatformCommonTypes.ItemCostEstimateType;
    costEstimate?: number;
    taxDetailsReference?: string;
    clazz?: PlatformCore.RecordRef;
    location?: PlatformCore.RecordRef;
    revRecSchedule?: PlatformCore.RecordRef;
    revRecStartDate?: string;
    revRecEndDate?: string;
    taxCode?: PlatformCore.RecordRef;
    taxRate1?: number;
    taxRate2?: number;
    tax1Amt?: number;
    grossAmt?: number;
    isTaxable?: boolean;
    giftCertFrom?: string;
    giftCertRecipientName?: string;
    giftCertRecipientEmail?: string;
    giftCertMessage?: string;
    giftCertNumber?: string;
    vsoeSopGroup?: PlatformCommonTypes.VsoeSopGroup;
    vsoeIsEstimate?: boolean;
    vsoePrice?: number;
    vsoeAmount?: number;
    altSalesAmt?: number;
    taxAmount?: number;
    vsoeAllocation?: number;
    vsoeDeferral?: PlatformCommonTypes.VsoeDeferral;
    vsoePermitDiscount?: PlatformCommonTypes.VsoePermitDiscount;
    vsoeDelivered?: boolean;
    customFieldList?: PlatformCore.CustomFieldList;
};
export declare class ReturnAuthorizationItem extends SoapMappingBase {
    job?: PlatformCore.RecordRef;
    item?: PlatformCore.RecordRef;
    orderLine?: number;
    line?: number;
    quantity?: number;
    quantityReceived?: number;
    quantityBilled?: number;
    units?: PlatformCore.RecordRef;
    inventoryDetail?: PlatformCommon.InventoryDetail;
    description?: string;
    serialNumbers?: string;
    price?: PlatformCore.RecordRef;
    rate?: string;
    amount?: number;
    options?: PlatformCore.CustomFieldList;
    revRecTermInMonths?: number;
    deferRevRec?: boolean;
    isClosed?: boolean;
    isDropShipment?: boolean;
    inventoryLocation?: PlatformCore.RecordRef;
    inventorySubsidiary?: PlatformCore.RecordRef;
    catchUpPeriod?: PlatformCore.RecordRef;
    department?: PlatformCore.RecordRef;
    costEstimateType?: PlatformCommonTypes.ItemCostEstimateType;
    costEstimate?: number;
    taxDetailsReference?: string;
    clazz?: PlatformCore.RecordRef;
    location?: PlatformCore.RecordRef;
    revRecSchedule?: PlatformCore.RecordRef;
    revRecStartDate?: string;
    revRecEndDate?: string;
    taxCode?: PlatformCore.RecordRef;
    taxRate1?: number;
    taxRate2?: number;
    tax1Amt?: number;
    grossAmt?: number;
    isTaxable?: boolean;
    giftCertFrom?: string;
    giftCertRecipientName?: string;
    giftCertRecipientEmail?: string;
    giftCertMessage?: string;
    giftCertNumber?: string;
    vsoeSopGroup?: PlatformCommonTypes.VsoeSopGroup;
    vsoeIsEstimate?: boolean;
    vsoePrice?: number;
    vsoeAmount?: number;
    altSalesAmt?: number;
    taxAmount?: number;
    vsoeAllocation?: number;
    vsoeDeferral?: PlatformCommonTypes.VsoeDeferral;
    vsoePermitDiscount?: PlatformCommonTypes.VsoePermitDiscount;
    vsoeDelivered?: boolean;
    customFieldList?: PlatformCore.CustomFieldList;
    constructor(props: ReturnAuthorizationItemProps);
}
export declare type CustomerPaymentDepositProps = {
    apply?: boolean;
    doc?: number;
    line?: number;
    depositDate?: string;
    refNum?: string;
    total?: number;
    remaining?: number;
    currency?: string;
    amount?: number;
};
export declare class CustomerPaymentDeposit extends SoapMappingBase {
    apply?: boolean;
    doc?: number;
    line?: number;
    depositDate?: string;
    refNum?: string;
    total?: number;
    remaining?: number;
    currency?: string;
    amount?: number;
    constructor(props: CustomerPaymentDepositProps);
}
export declare type CustomerPaymentProps = {
    createdDate?: string;
    lastModifiedDate?: string;
    customForm?: PlatformCore.RecordRef;
    arAcct?: PlatformCore.RecordRef;
    customer?: PlatformCore.RecordRef;
    balance?: number;
    pending?: number;
    currency?: PlatformCore.RecordRef;
    payment?: number;
    autoApply?: boolean;
    tranDate?: string;
    tranId?: string;
    postingPeriod?: PlatformCore.RecordRef;
    paymentMethod?: PlatformCore.RecordRef;
    ccIsPurchaseCardBin?: boolean;
    memo?: string;
    ccProcessAsPurchaseCard?: boolean;
    checkNum?: string;
    currencyName?: string;
    exchangeRate?: number;
    creditCard?: PlatformCore.RecordRef;
    chargeIt?: boolean;
    ccNumber?: string;
    ccExpireDate?: string;
    ccName?: string;
    ccStreet?: string;
    ccZipCode?: string;
    ccApproved?: boolean;
    authCode?: string;
    ccAvsStreetMatch?: PlatformCommonTypes.AvsMatchCode;
    ccAvsZipMatch?: PlatformCommonTypes.AvsMatchCode;
    isRecurringPayment?: boolean;
    ccSecurityCode?: string;
    ignoreAvs?: boolean;
    ccSecurityCodeMatch?: PlatformCommonTypes.AvsMatchCode;
    threeDStatusCode?: string;
    pnRefNum?: string;
    creditCardProcessor?: PlatformCore.RecordRef;
    debitCardIssueNo?: string;
    validFrom?: string;
    undepFunds?: boolean;
    account?: PlatformCore.RecordRef;
    total?: number;
    subsidiary?: PlatformCore.RecordRef;
    applied?: number;
    unapplied?: number;
    clazz?: PlatformCore.RecordRef;
    department?: PlatformCore.RecordRef;
    location?: PlatformCore.RecordRef;
    paymentOption?: PlatformCore.RecordRef;
    inputAuthCode?: string;
    inputReferenceCode?: string;
    checkNumber?: string;
    paymentCardCsc?: string;
    paymentProcessingProfile?: PlatformCore.RecordRef;
    handlingMode?: TransactionsCustomersTypes.CustomerPaymentHandlingMode;
    outputAuthCode?: string;
    outputReferenceCode?: string;
    paymentOperation?: TransactionsCustomersTypes.CustomerPaymentPaymentOperation;
    dynamicDescriptor?: string;
    status?: string;
    applyList?: CustomerPaymentApplyList;
    creditList?: CustomerPaymentCreditList;
    depositList?: CustomerPaymentDepositList;
    accountingBookDetailList?: PlatformCommon.AccountingBookDetailList;
    customFieldList?: PlatformCore.CustomFieldList;
    internalId?: string;
    externalId?: string;
} & PlatformCore.RecordProps;
export declare class CustomerPayment extends PlatformCore.Record {
    createdDate?: string;
    lastModifiedDate?: string;
    customForm?: PlatformCore.RecordRef;
    arAcct?: PlatformCore.RecordRef;
    customer?: PlatformCore.RecordRef;
    balance?: number;
    pending?: number;
    currency?: PlatformCore.RecordRef;
    payment?: number;
    autoApply?: boolean;
    tranDate?: string;
    tranId?: string;
    postingPeriod?: PlatformCore.RecordRef;
    paymentMethod?: PlatformCore.RecordRef;
    ccIsPurchaseCardBin?: boolean;
    memo?: string;
    ccProcessAsPurchaseCard?: boolean;
    checkNum?: string;
    currencyName?: string;
    exchangeRate?: number;
    creditCard?: PlatformCore.RecordRef;
    chargeIt?: boolean;
    ccNumber?: string;
    ccExpireDate?: string;
    ccName?: string;
    ccStreet?: string;
    ccZipCode?: string;
    ccApproved?: boolean;
    authCode?: string;
    ccAvsStreetMatch?: PlatformCommonTypes.AvsMatchCode;
    ccAvsZipMatch?: PlatformCommonTypes.AvsMatchCode;
    isRecurringPayment?: boolean;
    ccSecurityCode?: string;
    ignoreAvs?: boolean;
    ccSecurityCodeMatch?: PlatformCommonTypes.AvsMatchCode;
    threeDStatusCode?: string;
    pnRefNum?: string;
    creditCardProcessor?: PlatformCore.RecordRef;
    debitCardIssueNo?: string;
    validFrom?: string;
    undepFunds?: boolean;
    account?: PlatformCore.RecordRef;
    total?: number;
    subsidiary?: PlatformCore.RecordRef;
    applied?: number;
    unapplied?: number;
    clazz?: PlatformCore.RecordRef;
    department?: PlatformCore.RecordRef;
    location?: PlatformCore.RecordRef;
    paymentOption?: PlatformCore.RecordRef;
    inputAuthCode?: string;
    inputReferenceCode?: string;
    checkNumber?: string;
    paymentCardCsc?: string;
    paymentProcessingProfile?: PlatformCore.RecordRef;
    handlingMode?: TransactionsCustomersTypes.CustomerPaymentHandlingMode;
    outputAuthCode?: string;
    outputReferenceCode?: string;
    paymentOperation?: TransactionsCustomersTypes.CustomerPaymentPaymentOperation;
    dynamicDescriptor?: string;
    status?: string;
    applyList?: CustomerPaymentApplyList;
    creditList?: CustomerPaymentCreditList;
    depositList?: CustomerPaymentDepositList;
    accountingBookDetailList?: PlatformCommon.AccountingBookDetailList;
    customFieldList?: PlatformCore.CustomFieldList;
    internalId?: string;
    externalId?: string;
    constructor(props: CustomerPaymentProps);
}
export declare type CreditMemoApplyListProps = {
    apply?: CreditMemoApply[];
    replaceAll?: boolean;
};
export declare class CreditMemoApplyList extends SoapMappingBase {
    apply?: CreditMemoApply[];
    replaceAll?: boolean;
    constructor(props: CreditMemoApplyListProps);
}
export declare type CashRefundSalesTeamProps = {
    employee?: PlatformCore.RecordRef;
    salesRole?: PlatformCore.RecordRef;
    isPrimary?: boolean;
    contribution?: number;
};
export declare class CashRefundSalesTeam extends SoapMappingBase {
    employee?: PlatformCore.RecordRef;
    salesRole?: PlatformCore.RecordRef;
    isPrimary?: boolean;
    contribution?: number;
    constructor(props: CashRefundSalesTeamProps);
}
export declare type CustomerPaymentCreditProps = {
    apply?: boolean;
    doc?: number;
    line?: number;
    creditDate?: string;
    type?: string;
    refNum?: string;
    appliedTo?: string;
    total?: number;
    due?: number;
    currency?: string;
    amount?: number;
};
export declare class CustomerPaymentCredit extends SoapMappingBase {
    apply?: boolean;
    doc?: number;
    line?: number;
    creditDate?: string;
    type?: string;
    refNum?: string;
    appliedTo?: string;
    total?: number;
    due?: number;
    currency?: string;
    amount?: number;
    constructor(props: CustomerPaymentCreditProps);
}
export declare type CustomerDepositProps = {
    createdDate?: string;
    lastModifiedDate?: string;
    status?: string;
    customer?: PlatformCore.RecordRef;
    salesOrder?: PlatformCore.RecordRef;
    customForm?: PlatformCore.RecordRef;
    payment?: number;
    currency?: PlatformCore.RecordRef;
    tranDate?: string;
    postingPeriod?: PlatformCore.RecordRef;
    paymentMethod?: PlatformCore.RecordRef;
    ccIsPurchaseCardBin?: boolean;
    memo?: string;
    ccProcessAsPurchaseCard?: boolean;
    currencyName?: string;
    exchangeRate?: number;
    checkNum?: string;
    creditCardProcessor?: PlatformCore.RecordRef;
    creditCard?: PlatformCore.RecordRef;
    ccSecurityCode?: string;
    ccNumber?: string;
    subsidiary?: PlatformCore.RecordRef;
    department?: PlatformCore.RecordRef;
    clazz?: PlatformCore.RecordRef;
    location?: PlatformCore.RecordRef;
    paymentOption?: PlatformCore.RecordRef;
    inputAuthCode?: string;
    inputReferenceCode?: string;
    checkNumber?: string;
    paymentCardCsc?: string;
    paymentProcessingProfile?: PlatformCore.RecordRef;
    handlingMode?: TransactionsCustomersTypes.CustomerDepositHandlingMode;
    outputAuthCode?: string;
    outputReferenceCode?: string;
    paymentOperation?: TransactionsCustomersTypes.CustomerDepositPaymentOperation;
    dynamicDescriptor?: string;
    ccExpireDate?: string;
    debitCardIssueNo?: string;
    validFrom?: string;
    ccName?: string;
    ccStreet?: string;
    ccZipCode?: string;
    chargeIt?: boolean;
    ccApproved?: boolean;
    pnRefNum?: string;
    authCode?: string;
    ccAvsStreetMatch?: PlatformCommonTypes.AvsMatchCode;
    softDescriptor?: string;
    ccAvsZipMatch?: PlatformCommonTypes.AvsMatchCode;
    isRecurringPayment?: boolean;
    ccSecurityCodeMatch?: PlatformCommonTypes.AvsMatchCode;
    threeDStatusCode?: string;
    ignoreAvs?: boolean;
    account?: PlatformCore.RecordRef;
    undepFunds?: boolean;
    tranId?: string;
    applyList?: CustomerDepositApplyList;
    accountingBookDetailList?: PlatformCommon.AccountingBookDetailList;
    customFieldList?: PlatformCore.CustomFieldList;
    internalId?: string;
    externalId?: string;
} & PlatformCore.RecordProps;
export declare class CustomerDeposit extends PlatformCore.Record {
    createdDate?: string;
    lastModifiedDate?: string;
    status?: string;
    customer?: PlatformCore.RecordRef;
    salesOrder?: PlatformCore.RecordRef;
    customForm?: PlatformCore.RecordRef;
    payment?: number;
    currency?: PlatformCore.RecordRef;
    tranDate?: string;
    postingPeriod?: PlatformCore.RecordRef;
    paymentMethod?: PlatformCore.RecordRef;
    ccIsPurchaseCardBin?: boolean;
    memo?: string;
    ccProcessAsPurchaseCard?: boolean;
    currencyName?: string;
    exchangeRate?: number;
    checkNum?: string;
    creditCardProcessor?: PlatformCore.RecordRef;
    creditCard?: PlatformCore.RecordRef;
    ccSecurityCode?: string;
    ccNumber?: string;
    subsidiary?: PlatformCore.RecordRef;
    department?: PlatformCore.RecordRef;
    clazz?: PlatformCore.RecordRef;
    location?: PlatformCore.RecordRef;
    paymentOption?: PlatformCore.RecordRef;
    inputAuthCode?: string;
    inputReferenceCode?: string;
    checkNumber?: string;
    paymentCardCsc?: string;
    paymentProcessingProfile?: PlatformCore.RecordRef;
    handlingMode?: TransactionsCustomersTypes.CustomerDepositHandlingMode;
    outputAuthCode?: string;
    outputReferenceCode?: string;
    paymentOperation?: TransactionsCustomersTypes.CustomerDepositPaymentOperation;
    dynamicDescriptor?: string;
    ccExpireDate?: string;
    debitCardIssueNo?: string;
    validFrom?: string;
    ccName?: string;
    ccStreet?: string;
    ccZipCode?: string;
    chargeIt?: boolean;
    ccApproved?: boolean;
    pnRefNum?: string;
    authCode?: string;
    ccAvsStreetMatch?: PlatformCommonTypes.AvsMatchCode;
    softDescriptor?: string;
    ccAvsZipMatch?: PlatformCommonTypes.AvsMatchCode;
    isRecurringPayment?: boolean;
    ccSecurityCodeMatch?: PlatformCommonTypes.AvsMatchCode;
    threeDStatusCode?: string;
    ignoreAvs?: boolean;
    account?: PlatformCore.RecordRef;
    undepFunds?: boolean;
    tranId?: string;
    applyList?: CustomerDepositApplyList;
    accountingBookDetailList?: PlatformCommon.AccountingBookDetailList;
    customFieldList?: PlatformCore.CustomFieldList;
    internalId?: string;
    externalId?: string;
    constructor(props: CustomerDepositProps);
}
export declare type CustomerDepositApplyListProps = {
    customerDepositApply?: CustomerDepositApply[];
    replaceAll?: boolean;
};
export declare class CustomerDepositApplyList extends SoapMappingBase {
    customerDepositApply?: CustomerDepositApply[];
    replaceAll?: boolean;
    constructor(props: CustomerDepositApplyListProps);
}
export declare type DepositApplicationApplyListProps = {
    apply?: DepositApplicationApply[];
    replaceAll?: boolean;
};
export declare class DepositApplicationApplyList extends SoapMappingBase {
    apply?: DepositApplicationApply[];
    replaceAll?: boolean;
    constructor(props: DepositApplicationApplyListProps);
}
export declare type CustomerPaymentApplyProps = {
    apply?: boolean;
    doc?: number;
    line?: number;
    applyDate?: string;
    job?: string;
    type?: string;
    refNum?: string;
    total?: number;
    due?: number;
    currency?: string;
    discDate?: string;
    discAmt?: number;
    disc?: number;
    amount?: number;
};
export declare class CustomerPaymentApply extends SoapMappingBase {
    apply?: boolean;
    doc?: number;
    line?: number;
    applyDate?: string;
    job?: string;
    type?: string;
    refNum?: string;
    total?: number;
    due?: number;
    currency?: string;
    discDate?: string;
    discAmt?: number;
    disc?: number;
    amount?: number;
    constructor(props: CustomerPaymentApplyProps);
}
export declare type ReturnAuthorizationPartnersListProps = {
    partners?: PlatformCommon.Partners[];
    replaceAll?: boolean;
};
export declare class ReturnAuthorizationPartnersList extends SoapMappingBase {
    partners?: PlatformCommon.Partners[];
    replaceAll?: boolean;
    constructor(props: ReturnAuthorizationPartnersListProps);
}
export declare type CashRefundSalesTeamListProps = {
    salesTeam?: CashRefundSalesTeam[];
    replaceAll?: boolean;
};
export declare class CashRefundSalesTeamList extends SoapMappingBase {
    salesTeam?: CashRefundSalesTeam[];
    replaceAll?: boolean;
    constructor(props: CashRefundSalesTeamListProps);
}
export declare type CreditMemoItemProps = {
    job?: PlatformCore.RecordRef;
    item?: PlatformCore.RecordRef;
    orderLine?: number;
    line?: number;
    quantity?: number;
    description?: string;
    binNumbers?: string;
    price?: PlatformCore.RecordRef;
    rate?: string;
    amount?: number;
    isTaxable?: boolean;
    options?: PlatformCore.CustomFieldList;
    shipAddress?: PlatformCore.RecordRef;
    shipCarrier?: PlatformCommonTypes.ShippingCarrier;
    shipMethod?: PlatformCore.RecordRef;
    taxCode?: PlatformCore.RecordRef;
    taxRate1?: number;
    taxRate2?: number;
    tax1Amt?: number;
    grossAmt?: number;
    department?: PlatformCore.RecordRef;
    clazz?: PlatformCore.RecordRef;
    location?: PlatformCore.RecordRef;
    costEstimateType?: PlatformCommonTypes.ItemCostEstimateType;
    costEstimate?: number;
    taxDetailsReference?: string;
    revRecSchedule?: PlatformCore.RecordRef;
    revRecStartDate?: string;
    revRecTermInMonths?: number;
    revRecEndDate?: string;
    units?: PlatformCore.RecordRef;
    inventoryDetail?: PlatformCommon.InventoryDetail;
    serialNumbers?: string;
    deferRevRec?: boolean;
    giftCertFrom?: string;
    giftCertRecipientName?: string;
    giftCertRecipientEmail?: string;
    giftCertMessage?: string;
    taxAmount?: number;
    giftCertNumber?: string;
    vsoeSopGroup?: PlatformCommonTypes.VsoeSopGroup;
    vsoeIsEstimate?: boolean;
    vsoePrice?: number;
    vsoeAmount?: number;
    vsoeAllocation?: number;
    vsoeDeferral?: PlatformCommonTypes.VsoeDeferral;
    vsoePermitDiscount?: PlatformCommonTypes.VsoePermitDiscount;
    vsoeDelivered?: boolean;
    catchUpPeriod?: PlatformCore.RecordRef;
    chargeType?: PlatformCore.RecordRef;
    subscriptionLine?: PlatformCore.RecordRef;
    chargesList?: PlatformCore.RecordRefList;
    customFieldList?: PlatformCore.CustomFieldList;
};
export declare class CreditMemoItem extends SoapMappingBase {
    job?: PlatformCore.RecordRef;
    item?: PlatformCore.RecordRef;
    orderLine?: number;
    line?: number;
    quantity?: number;
    description?: string;
    binNumbers?: string;
    price?: PlatformCore.RecordRef;
    rate?: string;
    amount?: number;
    isTaxable?: boolean;
    options?: PlatformCore.CustomFieldList;
    shipAddress?: PlatformCore.RecordRef;
    shipCarrier?: PlatformCommonTypes.ShippingCarrier;
    shipMethod?: PlatformCore.RecordRef;
    taxCode?: PlatformCore.RecordRef;
    taxRate1?: number;
    taxRate2?: number;
    tax1Amt?: number;
    grossAmt?: number;
    department?: PlatformCore.RecordRef;
    clazz?: PlatformCore.RecordRef;
    location?: PlatformCore.RecordRef;
    costEstimateType?: PlatformCommonTypes.ItemCostEstimateType;
    costEstimate?: number;
    taxDetailsReference?: string;
    revRecSchedule?: PlatformCore.RecordRef;
    revRecStartDate?: string;
    revRecTermInMonths?: number;
    revRecEndDate?: string;
    units?: PlatformCore.RecordRef;
    inventoryDetail?: PlatformCommon.InventoryDetail;
    serialNumbers?: string;
    deferRevRec?: boolean;
    giftCertFrom?: string;
    giftCertRecipientName?: string;
    giftCertRecipientEmail?: string;
    giftCertMessage?: string;
    taxAmount?: number;
    giftCertNumber?: string;
    vsoeSopGroup?: PlatformCommonTypes.VsoeSopGroup;
    vsoeIsEstimate?: boolean;
    vsoePrice?: number;
    vsoeAmount?: number;
    vsoeAllocation?: number;
    vsoeDeferral?: PlatformCommonTypes.VsoeDeferral;
    vsoePermitDiscount?: PlatformCommonTypes.VsoePermitDiscount;
    vsoeDelivered?: boolean;
    catchUpPeriod?: PlatformCore.RecordRef;
    chargeType?: PlatformCore.RecordRef;
    subscriptionLine?: PlatformCore.RecordRef;
    chargesList?: PlatformCore.RecordRefList;
    customFieldList?: PlatformCore.CustomFieldList;
    constructor(props: CreditMemoItemProps);
}
export declare type CashRefundItemListProps = {
    item?: CashRefundItem[];
    replaceAll?: boolean;
};
export declare class CashRefundItemList extends SoapMappingBase {
    item?: CashRefundItem[];
    replaceAll?: boolean;
    constructor(props: CashRefundItemListProps);
}
export declare type CashRefundPartnersListProps = {
    partners?: PlatformCommon.Partners[];
    replaceAll?: boolean;
};
export declare class CashRefundPartnersList extends SoapMappingBase {
    partners?: PlatformCommon.Partners[];
    replaceAll?: boolean;
    constructor(props: CashRefundPartnersListProps);
}
export declare type CreditMemoSalesTeamProps = {
    employee?: PlatformCore.RecordRef;
    salesRole?: PlatformCore.RecordRef;
    isPrimary?: boolean;
    contribution?: number;
};
export declare class CreditMemoSalesTeam extends SoapMappingBase {
    employee?: PlatformCore.RecordRef;
    salesRole?: PlatformCore.RecordRef;
    isPrimary?: boolean;
    contribution?: number;
    constructor(props: CreditMemoSalesTeamProps);
}
export declare type CashRefundProps = {
    createdDate?: string;
    lastModifiedDate?: string;
    nexus?: PlatformCore.RecordRef;
    subsidiaryTaxRegNum?: PlatformCore.RecordRef;
    taxRegOverride?: boolean;
    taxDetailsOverride?: boolean;
    customForm?: PlatformCore.RecordRef;
    entity?: PlatformCore.RecordRef;
    vatRegNum?: string;
    tranDate?: string;
    tranId?: string;
    entityTaxRegNum?: PlatformCore.RecordRef;
    taxPointDate?: string;
    source?: string;
    createdFrom?: PlatformCore.RecordRef;
    postingPeriod?: PlatformCore.RecordRef;
    department?: PlatformCore.RecordRef;
    clazz?: PlatformCore.RecordRef;
    location?: PlatformCore.RecordRef;
    leadSource?: PlatformCore.RecordRef;
    subsidiary?: PlatformCore.RecordRef;
    salesRep?: PlatformCore.RecordRef;
    partner?: PlatformCore.RecordRef;
    contribPct?: string;
    otherRefNum?: string;
    memo?: string;
    salesEffectiveDate?: string;
    refundCheck?: boolean;
    toPrint2?: boolean;
    excludeCommission?: boolean;
    totalCostEstimate?: number;
    estGrossProfit?: number;
    estGrossProfitPercent?: number;
    account?: PlatformCore.RecordRef;
    currency?: PlatformCore.RecordRef;
    exchangeRate?: number;
    currencyName?: string;
    promoCode?: PlatformCore.RecordRef;
    discountItem?: PlatformCore.RecordRef;
    discountRate?: string;
    isTaxable?: boolean;
    taxItem?: PlatformCore.RecordRef;
    taxRate?: number;
    toBePrinted?: boolean;
    toBeEmailed?: boolean;
    email?: string;
    toBeFaxed?: boolean;
    fax?: string;
    messageSel?: PlatformCore.RecordRef;
    message?: string;
    paymentOption?: PlatformCore.RecordRef;
    inputAuthCode?: string;
    inputReferenceCode?: string;
    checkNumber?: string;
    paymentCardCsc?: string;
    paymentProcessingProfile?: PlatformCore.RecordRef;
    handlingMode?: TransactionsCustomersTypes.CashRefundHandlingMode;
    outputAuthCode?: string;
    outputReferenceCode?: string;
    paymentOperation?: TransactionsCustomersTypes.CashRefundPaymentOperation;
    dynamicDescriptor?: string;
    billingAddress?: PlatformCommon.Address;
    billAddressList?: PlatformCore.RecordRef;
    shipMethod?: PlatformCore.RecordRef;
    shippingTaxCode?: PlatformCore.RecordRef;
    shippingTax1Rate?: number;
    shippingTax2Rate?: string;
    shippingCost?: number;
    handlingTaxCode?: PlatformCore.RecordRef;
    handlingTax1Rate?: number;
    handlingTax2Rate?: string;
    handlingCost?: number;
    salesGroup?: PlatformCore.RecordRef;
    syncSalesTeams?: boolean;
    paymentMethod?: PlatformCore.RecordRef;
    revenueStatus?: PlatformCommonTypes.RevenueStatus;
    recognizedRevenue?: number;
    deferredRevenue?: number;
    revRecOnRevCommitment?: boolean;
    creditCard?: PlatformCore.RecordRef;
    chargeIt?: boolean;
    ccNumber?: string;
    ccExpireDate?: string;
    ccName?: string;
    ccStreet?: string;
    ccZipCode?: string;
    ccApproved?: boolean;
    creditCardProcessor?: PlatformCore.RecordRef;
    debitCardIssueNo?: string;
    pnRefNum?: string;
    validFrom?: string;
    payPalTranId?: string;
    subTotal?: number;
    ccIsPurchaseCardBin?: boolean;
    discountTotal?: number;
    ccProcessAsPurchaseCard?: boolean;
    taxTotal?: number;
    tax2Total?: number;
    altShippingCost?: number;
    payPalStatus?: string;
    altHandlingCost?: number;
    total?: number;
    payPalAuthId?: string;
    status?: string;
    job?: PlatformCore.RecordRef;
    giftCert?: PlatformCore.RecordRef;
    giftCertTotal?: number;
    giftCertApplied?: number;
    giftCertAvailable?: number;
    tranIsVsoeBundle?: boolean;
    payPalProcess?: boolean;
    vsoeAutoCalc?: boolean;
    syncPartnerTeams?: boolean;
    itemList?: CashRefundItemList;
    accountingBookDetailList?: PlatformCommon.AccountingBookDetailList;
    salesTeamList?: CashRefundSalesTeamList;
    partnersList?: CashRefundPartnersList;
    taxDetailsList?: PlatformCommon.TaxDetailsList;
    customFieldList?: PlatformCore.CustomFieldList;
    internalId?: string;
    externalId?: string;
} & PlatformCore.RecordProps;
export declare class CashRefund extends PlatformCore.Record {
    createdDate?: string;
    lastModifiedDate?: string;
    nexus?: PlatformCore.RecordRef;
    subsidiaryTaxRegNum?: PlatformCore.RecordRef;
    taxRegOverride?: boolean;
    taxDetailsOverride?: boolean;
    customForm?: PlatformCore.RecordRef;
    entity?: PlatformCore.RecordRef;
    vatRegNum?: string;
    tranDate?: string;
    tranId?: string;
    entityTaxRegNum?: PlatformCore.RecordRef;
    taxPointDate?: string;
    source?: string;
    createdFrom?: PlatformCore.RecordRef;
    postingPeriod?: PlatformCore.RecordRef;
    department?: PlatformCore.RecordRef;
    clazz?: PlatformCore.RecordRef;
    location?: PlatformCore.RecordRef;
    leadSource?: PlatformCore.RecordRef;
    subsidiary?: PlatformCore.RecordRef;
    salesRep?: PlatformCore.RecordRef;
    partner?: PlatformCore.RecordRef;
    contribPct?: string;
    otherRefNum?: string;
    memo?: string;
    salesEffectiveDate?: string;
    refundCheck?: boolean;
    toPrint2?: boolean;
    excludeCommission?: boolean;
    totalCostEstimate?: number;
    estGrossProfit?: number;
    estGrossProfitPercent?: number;
    account?: PlatformCore.RecordRef;
    currency?: PlatformCore.RecordRef;
    exchangeRate?: number;
    currencyName?: string;
    promoCode?: PlatformCore.RecordRef;
    discountItem?: PlatformCore.RecordRef;
    discountRate?: string;
    isTaxable?: boolean;
    taxItem?: PlatformCore.RecordRef;
    taxRate?: number;
    toBePrinted?: boolean;
    toBeEmailed?: boolean;
    email?: string;
    toBeFaxed?: boolean;
    fax?: string;
    messageSel?: PlatformCore.RecordRef;
    message?: string;
    paymentOption?: PlatformCore.RecordRef;
    inputAuthCode?: string;
    inputReferenceCode?: string;
    checkNumber?: string;
    paymentCardCsc?: string;
    paymentProcessingProfile?: PlatformCore.RecordRef;
    handlingMode?: TransactionsCustomersTypes.CashRefundHandlingMode;
    outputAuthCode?: string;
    outputReferenceCode?: string;
    paymentOperation?: TransactionsCustomersTypes.CashRefundPaymentOperation;
    dynamicDescriptor?: string;
    billingAddress?: PlatformCommon.Address;
    billAddressList?: PlatformCore.RecordRef;
    shipMethod?: PlatformCore.RecordRef;
    shippingTaxCode?: PlatformCore.RecordRef;
    shippingTax1Rate?: number;
    shippingTax2Rate?: string;
    shippingCost?: number;
    handlingTaxCode?: PlatformCore.RecordRef;
    handlingTax1Rate?: number;
    handlingTax2Rate?: string;
    handlingCost?: number;
    salesGroup?: PlatformCore.RecordRef;
    syncSalesTeams?: boolean;
    paymentMethod?: PlatformCore.RecordRef;
    revenueStatus?: PlatformCommonTypes.RevenueStatus;
    recognizedRevenue?: number;
    deferredRevenue?: number;
    revRecOnRevCommitment?: boolean;
    creditCard?: PlatformCore.RecordRef;
    chargeIt?: boolean;
    ccNumber?: string;
    ccExpireDate?: string;
    ccName?: string;
    ccStreet?: string;
    ccZipCode?: string;
    ccApproved?: boolean;
    creditCardProcessor?: PlatformCore.RecordRef;
    debitCardIssueNo?: string;
    pnRefNum?: string;
    validFrom?: string;
    payPalTranId?: string;
    subTotal?: number;
    ccIsPurchaseCardBin?: boolean;
    discountTotal?: number;
    ccProcessAsPurchaseCard?: boolean;
    taxTotal?: number;
    tax2Total?: number;
    altShippingCost?: number;
    payPalStatus?: string;
    altHandlingCost?: number;
    total?: number;
    payPalAuthId?: string;
    status?: string;
    job?: PlatformCore.RecordRef;
    giftCert?: PlatformCore.RecordRef;
    giftCertTotal?: number;
    giftCertApplied?: number;
    giftCertAvailable?: number;
    tranIsVsoeBundle?: boolean;
    payPalProcess?: boolean;
    vsoeAutoCalc?: boolean;
    syncPartnerTeams?: boolean;
    itemList?: CashRefundItemList;
    accountingBookDetailList?: PlatformCommon.AccountingBookDetailList;
    salesTeamList?: CashRefundSalesTeamList;
    partnersList?: CashRefundPartnersList;
    taxDetailsList?: PlatformCommon.TaxDetailsList;
    customFieldList?: PlatformCore.CustomFieldList;
    internalId?: string;
    externalId?: string;
    constructor(props: CashRefundProps);
}
export declare type CustomerDepositApplyProps = {
    doc?: number;
    line?: number;
    apply?: boolean;
    applyDate?: string;
    type?: string;
    refNum?: string;
    total?: number;
    amount?: number;
    job?: string;
};
export declare class CustomerDepositApply extends SoapMappingBase {
    doc?: number;
    line?: number;
    apply?: boolean;
    applyDate?: string;
    type?: string;
    refNum?: string;
    total?: number;
    amount?: number;
    job?: string;
    constructor(props: CustomerDepositApplyProps);
}
export declare type ChargeSearchRowProps = {
    basic?: PlatformCommon.ChargeSearchRowBasic;
    billingAccountJoin?: PlatformCommon.BillingAccountSearchRowBasic;
    billingScheduleJoin?: PlatformCommon.BillingScheduleSearchRowBasic;
    chargeEmployeeJoin?: PlatformCommon.EmployeeSearchRowBasic;
    customerJoin?: PlatformCommon.CustomerSearchRowBasic;
    invoiceJoin?: PlatformCommon.TransactionSearchRowBasic;
    itemJoin?: PlatformCommon.ItemSearchRowBasic;
    jobJoin?: PlatformCommon.JobSearchRowBasic;
    salesOrderJoin?: PlatformCommon.TransactionSearchRowBasic;
    timeJoin?: PlatformCommon.TimeBillSearchRowBasic;
    transactionJoin?: PlatformCommon.TransactionSearchRowBasic;
    usageJoin?: PlatformCommon.UsageSearchRowBasic;
    userJoin?: PlatformCommon.EmployeeSearchRowBasic;
    customSearchJoin?: PlatformCommon.CustomSearchRowBasic[];
};
export declare class ChargeSearchRow extends PlatformCore.SearchRow {
    basic?: PlatformCommon.ChargeSearchRowBasic;
    billingAccountJoin?: PlatformCommon.BillingAccountSearchRowBasic;
    billingScheduleJoin?: PlatformCommon.BillingScheduleSearchRowBasic;
    chargeEmployeeJoin?: PlatformCommon.EmployeeSearchRowBasic;
    customerJoin?: PlatformCommon.CustomerSearchRowBasic;
    invoiceJoin?: PlatformCommon.TransactionSearchRowBasic;
    itemJoin?: PlatformCommon.ItemSearchRowBasic;
    jobJoin?: PlatformCommon.JobSearchRowBasic;
    salesOrderJoin?: PlatformCommon.TransactionSearchRowBasic;
    timeJoin?: PlatformCommon.TimeBillSearchRowBasic;
    transactionJoin?: PlatformCommon.TransactionSearchRowBasic;
    usageJoin?: PlatformCommon.UsageSearchRowBasic;
    userJoin?: PlatformCommon.EmployeeSearchRowBasic;
    customSearchJoin?: PlatformCommon.CustomSearchRowBasic[];
    constructor(props: ChargeSearchRowProps);
}
export declare type CreditMemoSalesTeamListProps = {
    salesTeam?: CreditMemoSalesTeam[];
    replaceAll?: boolean;
};
export declare class CreditMemoSalesTeamList extends SoapMappingBase {
    salesTeam?: CreditMemoSalesTeam[];
    replaceAll?: boolean;
    constructor(props: CreditMemoSalesTeamListProps);
}
export declare type CustomerPaymentCreditListProps = {
    credit?: CustomerPaymentCredit[];
    replaceAll?: boolean;
};
export declare class CustomerPaymentCreditList extends SoapMappingBase {
    credit?: CustomerPaymentCredit[];
    replaceAll?: boolean;
    constructor(props: CustomerPaymentCreditListProps);
}
export declare type ReturnAuthorizationSalesTeamProps = {
    employee?: PlatformCore.RecordRef;
    salesRole?: PlatformCore.RecordRef;
    isPrimary?: boolean;
    contribution?: number;
};
export declare class ReturnAuthorizationSalesTeam extends SoapMappingBase {
    employee?: PlatformCore.RecordRef;
    salesRole?: PlatformCore.RecordRef;
    isPrimary?: boolean;
    contribution?: number;
    constructor(props: ReturnAuthorizationSalesTeamProps);
}
export declare type CreditMemoPartnersListProps = {
    partners?: PlatformCommon.Partners[];
    replaceAll?: boolean;
};
export declare class CreditMemoPartnersList extends SoapMappingBase {
    partners?: PlatformCommon.Partners[];
    replaceAll?: boolean;
    constructor(props: CreditMemoPartnersListProps);
}
export declare type CreditMemoItemListProps = {
    item?: CreditMemoItem[];
    replaceAll?: boolean;
};
export declare class CreditMemoItemList extends SoapMappingBase {
    item?: CreditMemoItem[];
    replaceAll?: boolean;
    constructor(props: CreditMemoItemListProps);
}
export declare type CustomerRefundDepositProps = {
    apply?: boolean;
    doc?: number;
    line?: number;
    depositDate?: string;
    refNum?: string;
    total?: number;
    remaining?: number;
    currency?: string;
    amount?: number;
};
export declare class CustomerRefundDeposit extends SoapMappingBase {
    apply?: boolean;
    doc?: number;
    line?: number;
    depositDate?: string;
    refNum?: string;
    total?: number;
    remaining?: number;
    currency?: string;
    amount?: number;
    constructor(props: CustomerRefundDepositProps);
}
export declare type CustomerRefundDepositListProps = {
    customerRefundDeposit?: CustomerRefundDeposit[];
    replaceAll?: boolean;
};
export declare class CustomerRefundDepositList extends SoapMappingBase {
    customerRefundDeposit?: CustomerRefundDeposit[];
    replaceAll?: boolean;
    constructor(props: CustomerRefundDepositListProps);
}
export declare type ChargeProps = {
    customForm?: PlatformCore.RecordRef;
    salesOrder?: PlatformCore.RecordRef;
    billTo?: PlatformCore.RecordRef;
    billingAccount?: PlatformCore.RecordRef;
    stage?: TransactionsCustomersTypes.ChargeStage;
    chargeDate?: string;
    use?: TransactionsCustomersTypes.ChargeUse;
    chargeType?: PlatformCore.RecordRef;
    projectTask?: PlatformCore.RecordRef;
    description?: string;
    createdDate?: string;
    timeRecord?: PlatformCore.RecordRef;
    rate?: string;
    quantity?: number;
    amount?: number;
    billingItem?: PlatformCore.RecordRef;
    currency?: PlatformCore.RecordRef;
    transaction?: PlatformCore.RecordRef;
    transactionLine?: PlatformCore.RecordRef;
    clazz?: PlatformCore.RecordRef;
    department?: PlatformCore.RecordRef;
    location?: PlatformCore.RecordRef;
    salesOrderLine?: PlatformCore.RecordRef;
    subscriptionLine?: PlatformCore.RecordRef;
    invoice?: PlatformCore.RecordRef;
    invoiceLine?: PlatformCore.RecordRef;
    rule?: PlatformCore.RecordRef;
    runId?: string;
    internalId?: string;
    externalId?: string;
} & PlatformCore.RecordProps;
export declare class Charge extends PlatformCore.Record {
    customForm?: PlatformCore.RecordRef;
    salesOrder?: PlatformCore.RecordRef;
    billTo?: PlatformCore.RecordRef;
    billingAccount?: PlatformCore.RecordRef;
    stage?: TransactionsCustomersTypes.ChargeStage;
    chargeDate?: string;
    use?: TransactionsCustomersTypes.ChargeUse;
    chargeType?: PlatformCore.RecordRef;
    projectTask?: PlatformCore.RecordRef;
    description?: string;
    createdDate?: string;
    timeRecord?: PlatformCore.RecordRef;
    rate?: string;
    quantity?: number;
    amount?: number;
    billingItem?: PlatformCore.RecordRef;
    currency?: PlatformCore.RecordRef;
    transaction?: PlatformCore.RecordRef;
    transactionLine?: PlatformCore.RecordRef;
    clazz?: PlatformCore.RecordRef;
    department?: PlatformCore.RecordRef;
    location?: PlatformCore.RecordRef;
    salesOrderLine?: PlatformCore.RecordRef;
    subscriptionLine?: PlatformCore.RecordRef;
    invoice?: PlatformCore.RecordRef;
    invoiceLine?: PlatformCore.RecordRef;
    rule?: PlatformCore.RecordRef;
    runId?: string;
    internalId?: string;
    externalId?: string;
    constructor(props: ChargeProps);
}
export declare type DepositApplicationApplyProps = {
    doc?: number;
    line?: number;
    apply?: boolean;
    applyDate?: string;
    job?: string;
    type?: string;
    refNum?: string;
    total?: number;
    due?: number;
    currency?: string;
    amount?: number;
};
export declare class DepositApplicationApply extends SoapMappingBase {
    doc?: number;
    line?: number;
    apply?: boolean;
    applyDate?: string;
    job?: string;
    type?: string;
    refNum?: string;
    total?: number;
    due?: number;
    currency?: string;
    amount?: number;
    constructor(props: DepositApplicationApplyProps);
}
