import * as PlatformCore from "./platform_core";
import * as PlatformCommon from "./platform_common";
import * as TransactionsPurchasesTypes from "./transactions_purchases_types";
import * as PlatformCommonTypes from "./platform_common_types";
import { SoapMappingBase } from "../../soap-types";
export declare type VendorBillItemProps = {
    item?: PlatformCore.RecordRef;
    vendorName?: string;
    line?: number;
    orderDoc?: number;
    orderLine?: number;
    quantity?: number;
    units?: PlatformCore.RecordRef;
    inventoryDetail?: PlatformCommon.InventoryDetail;
    description?: string;
    serialNumbers?: string;
    binNumbers?: string;
    expirationDate?: string;
    taxCode?: PlatformCore.RecordRef;
    taxRate1?: number;
    taxRate2?: number;
    grossAmt?: number;
    tax1Amt?: number;
    rate?: string;
    amount?: number;
    options?: PlatformCore.CustomFieldList;
    department?: PlatformCore.RecordRef;
    clazz?: PlatformCore.RecordRef;
    location?: PlatformCore.RecordRef;
    customer?: PlatformCore.RecordRef;
    landedCostCategory?: PlatformCore.RecordRef;
    isBillable?: boolean;
    billVarianceStatus?: PlatformCommonTypes.TransactionBillVarianceStatus;
    billreceiptsList?: PlatformCore.RecordRefList;
    amortizationSched?: PlatformCore.RecordRef;
    amortizStartDate?: string;
    amortizationEndDate?: string;
    amortizationResidual?: string;
    taxAmount?: number;
    taxDetailsReference?: string;
    landedCost?: PlatformCommon.LandedCost;
    customFieldList?: PlatformCore.CustomFieldList;
};
export declare class VendorBillItem extends SoapMappingBase {
    item?: PlatformCore.RecordRef;
    vendorName?: string;
    line?: number;
    orderDoc?: number;
    orderLine?: number;
    quantity?: number;
    units?: PlatformCore.RecordRef;
    inventoryDetail?: PlatformCommon.InventoryDetail;
    description?: string;
    serialNumbers?: string;
    binNumbers?: string;
    expirationDate?: string;
    taxCode?: PlatformCore.RecordRef;
    taxRate1?: number;
    taxRate2?: number;
    grossAmt?: number;
    tax1Amt?: number;
    rate?: string;
    amount?: number;
    options?: PlatformCore.CustomFieldList;
    department?: PlatformCore.RecordRef;
    clazz?: PlatformCore.RecordRef;
    location?: PlatformCore.RecordRef;
    customer?: PlatformCore.RecordRef;
    landedCostCategory?: PlatformCore.RecordRef;
    isBillable?: boolean;
    billVarianceStatus?: PlatformCommonTypes.TransactionBillVarianceStatus;
    billreceiptsList?: PlatformCore.RecordRefList;
    amortizationSched?: PlatformCore.RecordRef;
    amortizStartDate?: string;
    amortizationEndDate?: string;
    amortizationResidual?: string;
    taxAmount?: number;
    taxDetailsReference?: string;
    landedCost?: PlatformCommon.LandedCost;
    customFieldList?: PlatformCore.CustomFieldList;
    constructor(props: VendorBillItemProps);
}
export declare type InboundShipmentSearchRowProps = {
    basic?: PlatformCommon.InboundShipmentSearchRowBasic;
    itemJoin?: PlatformCommon.ItemSearchRowBasic;
    itemReceiptJoin?: PlatformCommon.TransactionSearchRowBasic;
    purchaseOrderJoin?: PlatformCommon.TransactionSearchRowBasic;
    vendorJoin?: PlatformCommon.VendorSearchRowBasic;
    customSearchJoin?: PlatformCommon.CustomSearchRowBasic[];
};
export declare class InboundShipmentSearchRow extends PlatformCore.SearchRow {
    basic?: PlatformCommon.InboundShipmentSearchRowBasic;
    itemJoin?: PlatformCommon.ItemSearchRowBasic;
    itemReceiptJoin?: PlatformCommon.TransactionSearchRowBasic;
    purchaseOrderJoin?: PlatformCommon.TransactionSearchRowBasic;
    vendorJoin?: PlatformCommon.VendorSearchRowBasic;
    customSearchJoin?: PlatformCommon.CustomSearchRowBasic[];
    constructor(props: InboundShipmentSearchRowProps);
}
export declare type VendorBillInstallmentProps = {
    amount?: number;
    dueDate?: string;
    amountDue?: number;
    seqNum?: number;
    status?: string;
};
export declare class VendorBillInstallment extends SoapMappingBase {
    amount?: number;
    dueDate?: string;
    amountDue?: number;
    seqNum?: number;
    status?: string;
    constructor(props: VendorBillInstallmentProps);
}
export declare type VendorPaymentCreditProps = {
    apply?: boolean;
    doc?: number;
    line?: number;
    creditDate?: string;
    type?: string;
    refNum?: string;
    appliedTo?: string;
    total?: number;
    due?: number;
    currency?: string;
    amount?: number;
};
export declare class VendorPaymentCredit extends SoapMappingBase {
    apply?: boolean;
    doc?: number;
    line?: number;
    creditDate?: string;
    type?: string;
    refNum?: string;
    appliedTo?: string;
    total?: number;
    due?: number;
    currency?: string;
    amount?: number;
    constructor(props: VendorPaymentCreditProps);
}
export declare type PurchaseRequisitionItemListProps = {
    purchaseRequisitionItem?: PurchaseRequisitionItem[];
    replaceAll?: boolean;
};
export declare class PurchaseRequisitionItemList extends SoapMappingBase {
    purchaseRequisitionItem?: PurchaseRequisitionItem[];
    replaceAll?: boolean;
    constructor(props: PurchaseRequisitionItemListProps);
}
export declare type ItemReceiptExpenseListProps = {
    expense?: ItemReceiptExpense[];
    replaceAll?: boolean;
};
export declare class ItemReceiptExpenseList extends SoapMappingBase {
    expense?: ItemReceiptExpense[];
    replaceAll?: boolean;
    constructor(props: ItemReceiptExpenseListProps);
}
export declare type VendorCreditApplyProps = {
    apply?: boolean;
    applyDate?: string;
    doc?: number;
    line?: number;
    type?: string;
    refNum?: string;
    total?: number;
    due?: number;
    currency?: string;
    amount?: number;
};
export declare class VendorCreditApply extends SoapMappingBase {
    apply?: boolean;
    applyDate?: string;
    doc?: number;
    line?: number;
    type?: string;
    refNum?: string;
    total?: number;
    due?: number;
    currency?: string;
    amount?: number;
    constructor(props: VendorCreditApplyProps);
}
export declare type PurchaseOrderItemListProps = {
    item?: PurchaseOrderItem[];
    replaceAll?: boolean;
};
export declare class PurchaseOrderItemList extends SoapMappingBase {
    item?: PurchaseOrderItem[];
    replaceAll?: boolean;
    constructor(props: PurchaseOrderItemListProps);
}
export declare type ItemReceiptItemListProps = {
    item?: ItemReceiptItem[];
    replaceAll?: boolean;
};
export declare class ItemReceiptItemList extends SoapMappingBase {
    item?: ItemReceiptItem[];
    replaceAll?: boolean;
    constructor(props: ItemReceiptItemListProps);
}
export declare type VendorBillInstallmentListProps = {
    vendorBillInstallment?: VendorBillInstallment[];
    replaceAll?: boolean;
};
export declare class VendorBillInstallmentList extends SoapMappingBase {
    vendorBillInstallment?: VendorBillInstallment[];
    replaceAll?: boolean;
    constructor(props: VendorBillInstallmentListProps);
}
export declare type VendorPaymentApplyProps = {
    apply?: boolean;
    doc?: number;
    line?: number;
    job?: string;
    applyDate?: string;
    type?: string;
    refNum?: string;
    total?: number;
    due?: number;
    currency?: string;
    discDate?: string;
    discAmt?: number;
    disc?: number;
    amount?: number;
};
export declare class VendorPaymentApply extends SoapMappingBase {
    apply?: boolean;
    doc?: number;
    line?: number;
    job?: string;
    applyDate?: string;
    type?: string;
    refNum?: string;
    total?: number;
    due?: number;
    currency?: string;
    discDate?: string;
    discAmt?: number;
    disc?: number;
    amount?: number;
    constructor(props: VendorPaymentApplyProps);
}
export declare type VendorPaymentProps = {
    createdDate?: string;
    lastModifiedDate?: string;
    customForm?: PlatformCore.RecordRef;
    account?: PlatformCore.RecordRef;
    balance?: number;
    apAcct?: PlatformCore.RecordRef;
    entity?: PlatformCore.RecordRef;
    address?: string;
    tranDate?: string;
    voidJournal?: PlatformCore.RecordRef;
    postingPeriod?: PlatformCore.RecordRef;
    currencyName?: string;
    exchangeRate?: number;
    toAch?: boolean;
    toBePrinted?: boolean;
    printVoucher?: boolean;
    tranId?: string;
    total?: number;
    currency?: PlatformCore.RecordRef;
    department?: PlatformCore.RecordRef;
    memo?: string;
    subsidiary?: PlatformCore.RecordRef;
    clazz?: PlatformCore.RecordRef;
    location?: PlatformCore.RecordRef;
    status?: string;
    transactionNumber?: string;
    applyList?: VendorPaymentApplyList;
    creditList?: VendorPaymentCreditList;
    billPay?: boolean;
    accountingBookDetailList?: PlatformCommon.AccountingBookDetailList;
    availableBalance?: number;
    isInTransitPayment?: boolean;
    approvalStatus?: PlatformCore.RecordRef;
    nextApprover?: PlatformCore.RecordRef;
    customFieldList?: PlatformCore.CustomFieldList;
    internalId?: string;
    externalId?: string;
} & PlatformCore.RecordProps;
export declare class VendorPayment extends PlatformCore.Record {
    createdDate?: string;
    lastModifiedDate?: string;
    customForm?: PlatformCore.RecordRef;
    account?: PlatformCore.RecordRef;
    balance?: number;
    apAcct?: PlatformCore.RecordRef;
    entity?: PlatformCore.RecordRef;
    address?: string;
    tranDate?: string;
    voidJournal?: PlatformCore.RecordRef;
    postingPeriod?: PlatformCore.RecordRef;
    currencyName?: string;
    exchangeRate?: number;
    toAch?: boolean;
    toBePrinted?: boolean;
    printVoucher?: boolean;
    tranId?: string;
    total?: number;
    currency?: PlatformCore.RecordRef;
    department?: PlatformCore.RecordRef;
    memo?: string;
    subsidiary?: PlatformCore.RecordRef;
    clazz?: PlatformCore.RecordRef;
    location?: PlatformCore.RecordRef;
    status?: string;
    transactionNumber?: string;
    applyList?: VendorPaymentApplyList;
    creditList?: VendorPaymentCreditList;
    billPay?: boolean;
    accountingBookDetailList?: PlatformCommon.AccountingBookDetailList;
    availableBalance?: number;
    isInTransitPayment?: boolean;
    approvalStatus?: PlatformCore.RecordRef;
    nextApprover?: PlatformCore.RecordRef;
    customFieldList?: PlatformCore.CustomFieldList;
    internalId?: string;
    externalId?: string;
    constructor(props: VendorPaymentProps);
}
export declare type VendorCreditExpenseListProps = {
    expense?: VendorCreditExpense[];
    replaceAll?: boolean;
};
export declare class VendorCreditExpenseList extends SoapMappingBase {
    expense?: VendorCreditExpense[];
    replaceAll?: boolean;
    constructor(props: VendorCreditExpenseListProps);
}
export declare type VendorReturnAuthorizationExpenseProps = {
    orderLine?: number;
    line?: number;
    category?: PlatformCore.RecordRef;
    account?: PlatformCore.RecordRef;
    amount?: number;
    taxAmount?: number;
    taxCode?: PlatformCore.RecordRef;
    taxRate1?: number;
    taxRate2?: number;
    tax1Amt?: number;
    grossAmt?: number;
    taxDetailsReference?: string;
    memo?: string;
    department?: PlatformCore.RecordRef;
    clazz?: PlatformCore.RecordRef;
    location?: PlatformCore.RecordRef;
    customer?: PlatformCore.RecordRef;
    isBillable?: boolean;
    amortizationSched?: PlatformCore.RecordRef;
    amortizStartDate?: string;
    amortizationEndDate?: string;
    amortizationResidual?: string;
    customFieldList?: PlatformCore.CustomFieldList;
};
export declare class VendorReturnAuthorizationExpense extends SoapMappingBase {
    orderLine?: number;
    line?: number;
    category?: PlatformCore.RecordRef;
    account?: PlatformCore.RecordRef;
    amount?: number;
    taxAmount?: number;
    taxCode?: PlatformCore.RecordRef;
    taxRate1?: number;
    taxRate2?: number;
    tax1Amt?: number;
    grossAmt?: number;
    taxDetailsReference?: string;
    memo?: string;
    department?: PlatformCore.RecordRef;
    clazz?: PlatformCore.RecordRef;
    location?: PlatformCore.RecordRef;
    customer?: PlatformCore.RecordRef;
    isBillable?: boolean;
    amortizationSched?: PlatformCore.RecordRef;
    amortizStartDate?: string;
    amortizationEndDate?: string;
    amortizationResidual?: string;
    customFieldList?: PlatformCore.CustomFieldList;
    constructor(props: VendorReturnAuthorizationExpenseProps);
}
export declare type VendorReturnAuthorizationItemProps = {
    item?: PlatformCore.RecordRef;
    vendorName?: string;
    line?: number;
    orderLine?: number;
    quantity?: number;
    units?: PlatformCore.RecordRef;
    inventoryDetail?: PlatformCommon.InventoryDetail;
    serialNumbersList?: PlatformCore.RecordRefList;
    description?: string;
    binNumbers?: string;
    rate?: string;
    amount?: number;
    taxCode?: PlatformCore.RecordRef;
    taxRate1?: number;
    taxRate2?: number;
    grossAmt?: number;
    tax1Amt?: number;
    options?: PlatformCore.CustomFieldList;
    department?: PlatformCore.RecordRef;
    clazz?: PlatformCore.RecordRef;
    location?: PlatformCore.RecordRef;
    customer?: PlatformCore.RecordRef;
    isBillable?: boolean;
    isClosed?: boolean;
    amortizationSched?: PlatformCore.RecordRef;
    isDropShipment?: boolean;
    taxAmount?: number;
    taxDetailsReference?: string;
    amortizStartDate?: string;
    amortizationEndDate?: string;
    amortizationResidual?: string;
    customFieldList?: PlatformCore.CustomFieldList;
};
export declare class VendorReturnAuthorizationItem extends SoapMappingBase {
    item?: PlatformCore.RecordRef;
    vendorName?: string;
    line?: number;
    orderLine?: number;
    quantity?: number;
    units?: PlatformCore.RecordRef;
    inventoryDetail?: PlatformCommon.InventoryDetail;
    serialNumbersList?: PlatformCore.RecordRefList;
    description?: string;
    binNumbers?: string;
    rate?: string;
    amount?: number;
    taxCode?: PlatformCore.RecordRef;
    taxRate1?: number;
    taxRate2?: number;
    grossAmt?: number;
    tax1Amt?: number;
    options?: PlatformCore.CustomFieldList;
    department?: PlatformCore.RecordRef;
    clazz?: PlatformCore.RecordRef;
    location?: PlatformCore.RecordRef;
    customer?: PlatformCore.RecordRef;
    isBillable?: boolean;
    isClosed?: boolean;
    amortizationSched?: PlatformCore.RecordRef;
    isDropShipment?: boolean;
    taxAmount?: number;
    taxDetailsReference?: string;
    amortizStartDate?: string;
    amortizationEndDate?: string;
    amortizationResidual?: string;
    customFieldList?: PlatformCore.CustomFieldList;
    constructor(props: VendorReturnAuthorizationItemProps);
}
export declare type InboundShipmentLandedCostProps = {
    landedCostCostCategory?: PlatformCore.RecordRef;
    landedCostAmount?: number;
    landedCostCurrency?: PlatformCore.RecordRef;
    landedCostExchangeRate?: number;
    landedCostEffectiveDate?: string;
    landedCostAllocationMethod?: TransactionsPurchasesTypes.InboundShipmentLandedCostAllocationMethod;
    landedCostShipmentItemsList?: PlatformCore.RecordRefList;
};
export declare class InboundShipmentLandedCost extends SoapMappingBase {
    landedCostCostCategory?: PlatformCore.RecordRef;
    landedCostAmount?: number;
    landedCostCurrency?: PlatformCore.RecordRef;
    landedCostExchangeRate?: number;
    landedCostEffectiveDate?: string;
    landedCostAllocationMethod?: TransactionsPurchasesTypes.InboundShipmentLandedCostAllocationMethod;
    landedCostShipmentItemsList?: PlatformCore.RecordRefList;
    constructor(props: InboundShipmentLandedCostProps);
}
export declare type ItemReceiptItemProps = {
    itemReceive?: boolean;
    jobName?: string;
    item?: PlatformCore.RecordRef;
    orderLine?: number;
    line?: number;
    itemName?: string;
    description?: string;
    location?: PlatformCore.RecordRef;
    onHand?: number;
    quantityRemaining?: number;
    quantity?: number;
    unitsDisplay?: string;
    unitCostOverride?: number;
    inventoryDetail?: PlatformCommon.InventoryDetail;
    serialNumbers?: string;
    binNumbers?: string;
    expirationDate?: string;
    rate?: string;
    currency?: string;
    restock?: boolean;
    billVarianceStatus?: PlatformCommonTypes.TransactionBillVarianceStatus;
    isDropShipment?: boolean;
    options?: PlatformCore.CustomFieldList;
    landedCost?: PlatformCommon.LandedCost;
    customFieldList?: PlatformCore.CustomFieldList;
};
export declare class ItemReceiptItem extends SoapMappingBase {
    itemReceive?: boolean;
    jobName?: string;
    item?: PlatformCore.RecordRef;
    orderLine?: number;
    line?: number;
    itemName?: string;
    description?: string;
    location?: PlatformCore.RecordRef;
    onHand?: number;
    quantityRemaining?: number;
    quantity?: number;
    unitsDisplay?: string;
    unitCostOverride?: number;
    inventoryDetail?: PlatformCommon.InventoryDetail;
    serialNumbers?: string;
    binNumbers?: string;
    expirationDate?: string;
    rate?: string;
    currency?: string;
    restock?: boolean;
    billVarianceStatus?: PlatformCommonTypes.TransactionBillVarianceStatus;
    isDropShipment?: boolean;
    options?: PlatformCore.CustomFieldList;
    landedCost?: PlatformCommon.LandedCost;
    customFieldList?: PlatformCore.CustomFieldList;
    constructor(props: ItemReceiptItemProps);
}
export declare type InboundShipmentLandedCostListProps = {
    inboundShipmentLandedCost?: InboundShipmentLandedCost[];
    replaceAll?: boolean;
};
export declare class InboundShipmentLandedCostList extends SoapMappingBase {
    inboundShipmentLandedCost?: InboundShipmentLandedCost[];
    replaceAll?: boolean;
    constructor(props: InboundShipmentLandedCostListProps);
}
export declare type PurchaseOrderExpenseListProps = {
    expense?: PurchaseOrderExpense[];
    replaceAll?: boolean;
};
export declare class PurchaseOrderExpenseList extends SoapMappingBase {
    expense?: PurchaseOrderExpense[];
    replaceAll?: boolean;
    constructor(props: PurchaseOrderExpenseListProps);
}
export declare type InboundShipmentSearchAdvancedProps = {
    criteria?: InboundShipmentSearch;
    columns?: InboundShipmentSearchRow;
    savedSearchId?: string;
    savedSearchScriptId?: string;
};
export declare class InboundShipmentSearchAdvanced extends PlatformCore.SearchRecord {
    criteria?: InboundShipmentSearch;
    columns?: InboundShipmentSearchRow;
    savedSearchId?: string;
    savedSearchScriptId?: string;
    constructor(props: InboundShipmentSearchAdvancedProps);
}
export declare type InboundShipmentSearchProps = {
    basic?: PlatformCommon.InboundShipmentSearchBasic;
    itemJoin?: PlatformCommon.ItemSearchBasic;
    itemReceiptJoin?: PlatformCommon.TransactionSearchBasic;
    purchaseOrderJoin?: PlatformCommon.TransactionSearchBasic;
    vendorJoin?: PlatformCommon.VendorSearchBasic;
    customSearchJoin?: PlatformCommon.CustomSearchJoin[];
};
export declare class InboundShipmentSearch extends PlatformCore.SearchRecord {
    basic?: PlatformCommon.InboundShipmentSearchBasic;
    itemJoin?: PlatformCommon.ItemSearchBasic;
    itemReceiptJoin?: PlatformCommon.TransactionSearchBasic;
    purchaseOrderJoin?: PlatformCommon.TransactionSearchBasic;
    vendorJoin?: PlatformCommon.VendorSearchBasic;
    customSearchJoin?: PlatformCommon.CustomSearchJoin[];
    constructor(props: InboundShipmentSearchProps);
}
export declare type InboundShipmentItemsProps = {
    id?: number;
    purchaseOrder?: PlatformCore.RecordRef;
    shipmentItem?: PlatformCore.RecordRef;
    shipmentItemDescription?: string;
    poVendor?: string;
    receivingLocation?: PlatformCore.RecordRef;
    quantityReceived?: number;
    quantityExpected?: number;
    quantityRemaining?: number;
    unit?: PlatformCore.RecordRef;
    poRate?: number;
    expectedRate?: number;
    shipmentItemExchangeRate?: number;
    shipmentItemEffectiveDate?: string;
    unitLandedCost?: number;
    totalUnitCost?: number;
    shipmentItemAmount?: number;
    poCurrency?: PlatformCore.RecordRef;
    incoterm?: PlatformCore.RecordRef;
};
export declare class InboundShipmentItems extends SoapMappingBase {
    id?: number;
    purchaseOrder?: PlatformCore.RecordRef;
    shipmentItem?: PlatformCore.RecordRef;
    shipmentItemDescription?: string;
    poVendor?: string;
    receivingLocation?: PlatformCore.RecordRef;
    quantityReceived?: number;
    quantityExpected?: number;
    quantityRemaining?: number;
    unit?: PlatformCore.RecordRef;
    poRate?: number;
    expectedRate?: number;
    shipmentItemExchangeRate?: number;
    shipmentItemEffectiveDate?: string;
    unitLandedCost?: number;
    totalUnitCost?: number;
    shipmentItemAmount?: number;
    poCurrency?: PlatformCore.RecordRef;
    incoterm?: PlatformCore.RecordRef;
    constructor(props: InboundShipmentItemsProps);
}
export declare type ItemReceiptProps = {
    createdDate?: string;
    lastModifiedDate?: string;
    customForm?: PlatformCore.RecordRef;
    exchangeRate?: number;
    entity?: PlatformCore.RecordRef;
    currencyName?: string;
    subsidiary?: PlatformCore.RecordRef;
    createdFrom?: PlatformCore.RecordRef;
    tranDate?: string;
    partner?: PlatformCore.RecordRef;
    postingPeriod?: PlatformCore.RecordRef;
    tranId?: string;
    inboundShipment?: PlatformCore.RecordRef;
    memo?: string;
    itemFulfillment?: PlatformCore.RecordRef;
    currency?: PlatformCore.RecordRef;
    landedCostMethod?: PlatformCommonTypes.LandedCostMethod;
    landedCostPerLine?: boolean;
    itemList?: ItemReceiptItemList;
    expenseList?: ItemReceiptExpenseList;
    landedCostsList?: PurchLandedCostList;
    accountingBookDetailList?: PlatformCommon.AccountingBookDetailList;
    customFieldList?: PlatformCore.CustomFieldList;
    internalId?: string;
    externalId?: string;
} & PlatformCore.RecordProps;
export declare class ItemReceipt extends PlatformCore.Record {
    createdDate?: string;
    lastModifiedDate?: string;
    customForm?: PlatformCore.RecordRef;
    exchangeRate?: number;
    entity?: PlatformCore.RecordRef;
    currencyName?: string;
    subsidiary?: PlatformCore.RecordRef;
    createdFrom?: PlatformCore.RecordRef;
    tranDate?: string;
    partner?: PlatformCore.RecordRef;
    postingPeriod?: PlatformCore.RecordRef;
    tranId?: string;
    inboundShipment?: PlatformCore.RecordRef;
    memo?: string;
    itemFulfillment?: PlatformCore.RecordRef;
    currency?: PlatformCore.RecordRef;
    landedCostMethod?: PlatformCommonTypes.LandedCostMethod;
    landedCostPerLine?: boolean;
    itemList?: ItemReceiptItemList;
    expenseList?: ItemReceiptExpenseList;
    landedCostsList?: PurchLandedCostList;
    accountingBookDetailList?: PlatformCommon.AccountingBookDetailList;
    customFieldList?: PlatformCore.CustomFieldList;
    internalId?: string;
    externalId?: string;
    constructor(props: ItemReceiptProps);
}
export declare type VendorPaymentCreditListProps = {
    credit?: VendorPaymentCredit[];
    replaceAll?: boolean;
};
export declare class VendorPaymentCreditList extends SoapMappingBase {
    credit?: VendorPaymentCredit[];
    replaceAll?: boolean;
    constructor(props: VendorPaymentCreditListProps);
}
export declare type PurchaseOrderItemProps = {
    item?: PlatformCore.RecordRef;
    line?: number;
    quantityOnShipments?: number;
    vendorName?: string;
    quantityReceived?: number;
    quantityBilled?: number;
    quantityAvailable?: number;
    quantityOnHand?: number;
    taxCode?: PlatformCore.RecordRef;
    taxRate1?: number;
    taxRate2?: number;
    quantity?: number;
    tax1Amt?: number;
    grossAmt?: number;
    units?: PlatformCore.RecordRef;
    inventoryDetail?: PlatformCommon.InventoryDetail;
    serialNumbers?: string;
    description?: string;
    purchaseContract?: PlatformCore.RecordRef;
    rate?: string;
    amount?: number;
    options?: PlatformCore.CustomFieldList;
    taxAmount?: number;
    department?: PlatformCore.RecordRef;
    clazz?: PlatformCore.RecordRef;
    location?: PlatformCore.RecordRef;
    landedCostCategory?: PlatformCore.RecordRef;
    customer?: PlatformCore.RecordRef;
    isBillable?: boolean;
    billVarianceStatus?: PlatformCommonTypes.TransactionBillVarianceStatus;
    matchBillToReceipt?: boolean;
    expectedReceiptDate?: string;
    isClosed?: boolean;
    taxDetailsReference?: string;
    createdFrom?: PlatformCore.RecordRef;
    linkedOrderList?: PlatformCore.RecordRefList;
    customFieldList?: PlatformCore.CustomFieldList;
};
export declare class PurchaseOrderItem extends SoapMappingBase {
    item?: PlatformCore.RecordRef;
    line?: number;
    quantityOnShipments?: number;
    vendorName?: string;
    quantityReceived?: number;
    quantityBilled?: number;
    quantityAvailable?: number;
    quantityOnHand?: number;
    taxCode?: PlatformCore.RecordRef;
    taxRate1?: number;
    taxRate2?: number;
    quantity?: number;
    tax1Amt?: number;
    grossAmt?: number;
    units?: PlatformCore.RecordRef;
    inventoryDetail?: PlatformCommon.InventoryDetail;
    serialNumbers?: string;
    description?: string;
    purchaseContract?: PlatformCore.RecordRef;
    rate?: string;
    amount?: number;
    options?: PlatformCore.CustomFieldList;
    taxAmount?: number;
    department?: PlatformCore.RecordRef;
    clazz?: PlatformCore.RecordRef;
    location?: PlatformCore.RecordRef;
    landedCostCategory?: PlatformCore.RecordRef;
    customer?: PlatformCore.RecordRef;
    isBillable?: boolean;
    billVarianceStatus?: PlatformCommonTypes.TransactionBillVarianceStatus;
    matchBillToReceipt?: boolean;
    expectedReceiptDate?: string;
    isClosed?: boolean;
    taxDetailsReference?: string;
    createdFrom?: PlatformCore.RecordRef;
    linkedOrderList?: PlatformCore.RecordRefList;
    customFieldList?: PlatformCore.CustomFieldList;
    constructor(props: PurchaseOrderItemProps);
}
export declare type InboundShipmentItemsListProps = {
    inboundShipmentItems?: InboundShipmentItems[];
    replaceAll?: boolean;
};
export declare class InboundShipmentItemsList extends SoapMappingBase {
    inboundShipmentItems?: InboundShipmentItems[];
    replaceAll?: boolean;
    constructor(props: InboundShipmentItemsListProps);
}
export declare type VendorReturnAuthorizationExpenseListProps = {
    expense?: VendorReturnAuthorizationExpense[];
    replaceAll?: boolean;
};
export declare class VendorReturnAuthorizationExpenseList extends SoapMappingBase {
    expense?: VendorReturnAuthorizationExpense[];
    replaceAll?: boolean;
    constructor(props: VendorReturnAuthorizationExpenseListProps);
}
export declare type PurchaseRequisitionExpenseProps = {
    line?: number;
    category?: PlatformCore.RecordRef;
    location?: PlatformCore.RecordRef;
    isClosed?: boolean;
    account?: PlatformCore.RecordRef;
    poVendor?: PlatformCore.RecordRef;
    estimatedAmount?: number;
    amount?: number;
    memo?: string;
    department?: PlatformCore.RecordRef;
    clazz?: PlatformCore.RecordRef;
    customer?: PlatformCore.RecordRef;
    linkedOrderList?: PlatformCore.RecordRefList;
    linkedOrderStatus?: string;
    isBillable?: boolean;
};
export declare class PurchaseRequisitionExpense extends SoapMappingBase {
    line?: number;
    category?: PlatformCore.RecordRef;
    location?: PlatformCore.RecordRef;
    isClosed?: boolean;
    account?: PlatformCore.RecordRef;
    poVendor?: PlatformCore.RecordRef;
    estimatedAmount?: number;
    amount?: number;
    memo?: string;
    department?: PlatformCore.RecordRef;
    clazz?: PlatformCore.RecordRef;
    customer?: PlatformCore.RecordRef;
    linkedOrderList?: PlatformCore.RecordRefList;
    linkedOrderStatus?: string;
    isBillable?: boolean;
    constructor(props: PurchaseRequisitionExpenseProps);
}
export declare type VendorCreditApplyListProps = {
    apply?: VendorCreditApply[];
    replaceAll?: boolean;
};
export declare class VendorCreditApplyList extends SoapMappingBase {
    apply?: VendorCreditApply[];
    replaceAll?: boolean;
    constructor(props: VendorCreditApplyListProps);
}
export declare type VendorBillExpenseProps = {
    orderDoc?: number;
    orderLine?: number;
    line?: number;
    category?: PlatformCore.RecordRef;
    account?: PlatformCore.RecordRef;
    amount?: number;
    taxAmount?: number;
    tax1Amt?: number;
    memo?: string;
    grossAmt?: number;
    taxDetailsReference?: string;
    department?: PlatformCore.RecordRef;
    clazz?: PlatformCore.RecordRef;
    location?: PlatformCore.RecordRef;
    customer?: PlatformCore.RecordRef;
    isBillable?: boolean;
    projectTask?: PlatformCore.RecordRef;
    taxCode?: PlatformCore.RecordRef;
    taxRate1?: number;
    taxRate2?: number;
    amortizationSched?: PlatformCore.RecordRef;
    amortizStartDate?: string;
    amortizationEndDate?: string;
    amortizationResidual?: string;
    customFieldList?: PlatformCore.CustomFieldList;
};
export declare class VendorBillExpense extends SoapMappingBase {
    orderDoc?: number;
    orderLine?: number;
    line?: number;
    category?: PlatformCore.RecordRef;
    account?: PlatformCore.RecordRef;
    amount?: number;
    taxAmount?: number;
    tax1Amt?: number;
    memo?: string;
    grossAmt?: number;
    taxDetailsReference?: string;
    department?: PlatformCore.RecordRef;
    clazz?: PlatformCore.RecordRef;
    location?: PlatformCore.RecordRef;
    customer?: PlatformCore.RecordRef;
    isBillable?: boolean;
    projectTask?: PlatformCore.RecordRef;
    taxCode?: PlatformCore.RecordRef;
    taxRate1?: number;
    taxRate2?: number;
    amortizationSched?: PlatformCore.RecordRef;
    amortizStartDate?: string;
    amortizationEndDate?: string;
    amortizationResidual?: string;
    customFieldList?: PlatformCore.CustomFieldList;
    constructor(props: VendorBillExpenseProps);
}
export declare type VendorBillExpenseListProps = {
    expense?: VendorBillExpense[];
    replaceAll?: boolean;
};
export declare class VendorBillExpenseList extends SoapMappingBase {
    expense?: VendorBillExpense[];
    replaceAll?: boolean;
    constructor(props: VendorBillExpenseListProps);
}
export declare type PurchaseRequisitionProps = {
    createdDate?: string;
    lastModifiedDate?: string;
    customForm?: PlatformCore.RecordRef;
    source?: string;
    subTotal?: number;
    currencyName?: string;
    exchangeRate?: number;
    vatRegNum?: string;
    nexus?: PlatformCore.RecordRef;
    taxRegNum?: PlatformCore.RecordRef;
    taxRegOverride?: boolean;
    estimatedTotal?: number;
    status?: string;
    currency?: PlatformCore.RecordRef;
    entity?: PlatformCore.RecordRef;
    dueDate?: string;
    tranDate?: string;
    tranId?: string;
    memo?: string;
    approvalStatus?: PlatformCore.RecordRef;
    nextApprover?: PlatformCore.RecordRef;
    taxTotal?: number;
    tax2Total?: number;
    subsidiary?: PlatformCore.RecordRef;
    department?: PlatformCore.RecordRef;
    clazz?: PlatformCore.RecordRef;
    location?: PlatformCore.RecordRef;
    total?: number;
    itemList?: PurchaseRequisitionItemList;
    expenseList?: PurchaseRequisitionExpenseList;
    accountingBookDetailList?: PlatformCommon.AccountingBookDetailList;
    customFieldList?: PlatformCore.CustomFieldList;
    internalId?: string;
    externalId?: string;
} & PlatformCore.RecordProps;
export declare class PurchaseRequisition extends PlatformCore.Record {
    createdDate?: string;
    lastModifiedDate?: string;
    customForm?: PlatformCore.RecordRef;
    source?: string;
    subTotal?: number;
    currencyName?: string;
    exchangeRate?: number;
    vatRegNum?: string;
    nexus?: PlatformCore.RecordRef;
    taxRegNum?: PlatformCore.RecordRef;
    taxRegOverride?: boolean;
    estimatedTotal?: number;
    status?: string;
    currency?: PlatformCore.RecordRef;
    entity?: PlatformCore.RecordRef;
    dueDate?: string;
    tranDate?: string;
    tranId?: string;
    memo?: string;
    approvalStatus?: PlatformCore.RecordRef;
    nextApprover?: PlatformCore.RecordRef;
    taxTotal?: number;
    tax2Total?: number;
    subsidiary?: PlatformCore.RecordRef;
    department?: PlatformCore.RecordRef;
    clazz?: PlatformCore.RecordRef;
    location?: PlatformCore.RecordRef;
    total?: number;
    itemList?: PurchaseRequisitionItemList;
    expenseList?: PurchaseRequisitionExpenseList;
    accountingBookDetailList?: PlatformCommon.AccountingBookDetailList;
    customFieldList?: PlatformCore.CustomFieldList;
    internalId?: string;
    externalId?: string;
    constructor(props: PurchaseRequisitionProps);
}
export declare type InboundShipmentProps = {
    customForm?: PlatformCore.RecordRef;
    shipmentNumber?: string;
    externalDocumentNumber?: string;
    shipmentStatus?: TransactionsPurchasesTypes.InboundShipmentShipmentStatus;
    expectedShippingDate?: string;
    actualShippingDate?: string;
    expectedDeliveryDate?: string;
    actualDeliveryDate?: string;
    shipmentMemo?: string;
    vesselNumber?: string;
    billOfLading?: string;
    landedCostList?: InboundShipmentLandedCostList;
    itemsList?: InboundShipmentItemsList;
    shipmentBaseCurrency?: PlatformCore.RecordRef;
    customFieldList?: PlatformCore.CustomFieldList;
    internalId?: string;
    externalId?: string;
} & PlatformCore.RecordProps;
export declare class InboundShipment extends PlatformCore.Record {
    customForm?: PlatformCore.RecordRef;
    shipmentNumber?: string;
    externalDocumentNumber?: string;
    shipmentStatus?: TransactionsPurchasesTypes.InboundShipmentShipmentStatus;
    expectedShippingDate?: string;
    actualShippingDate?: string;
    expectedDeliveryDate?: string;
    actualDeliveryDate?: string;
    shipmentMemo?: string;
    vesselNumber?: string;
    billOfLading?: string;
    landedCostList?: InboundShipmentLandedCostList;
    itemsList?: InboundShipmentItemsList;
    shipmentBaseCurrency?: PlatformCore.RecordRef;
    customFieldList?: PlatformCore.CustomFieldList;
    internalId?: string;
    externalId?: string;
    constructor(props: InboundShipmentProps);
}
export declare type VendorBillProps = {
    createdDate?: string;
    lastModifiedDate?: string;
    nexus?: PlatformCore.RecordRef;
    subsidiaryTaxRegNum?: PlatformCore.RecordRef;
    taxRegOverride?: boolean;
    taxDetailsOverride?: boolean;
    customForm?: PlatformCore.RecordRef;
    billAddressList?: PlatformCore.RecordRef;
    account?: PlatformCore.RecordRef;
    entity?: PlatformCore.RecordRef;
    subsidiary?: PlatformCore.RecordRef;
    approvalStatus?: PlatformCore.RecordRef;
    nextApprover?: PlatformCore.RecordRef;
    vatRegNum?: string;
    postingPeriod?: PlatformCore.RecordRef;
    tranDate?: string;
    currencyName?: string;
    billingAddress?: PlatformCommon.Address;
    exchangeRate?: number;
    entityTaxRegNum?: PlatformCore.RecordRef;
    taxPointDate?: string;
    terms?: PlatformCore.RecordRef;
    dueDate?: string;
    discountDate?: string;
    tranId?: string;
    userTotal?: number;
    discountAmount?: number;
    taxTotal?: number;
    paymentHold?: boolean;
    memo?: string;
    tax2Total?: number;
    creditLimit?: number;
    availableVendorCredit?: number;
    currency?: PlatformCore.RecordRef;
    clazz?: PlatformCore.RecordRef;
    department?: PlatformCore.RecordRef;
    location?: PlatformCore.RecordRef;
    status?: string;
    landedCostMethod?: PlatformCommonTypes.LandedCostMethod;
    landedCostPerLine?: boolean;
    transactionNumber?: string;
    expenseList?: VendorBillExpenseList;
    accountingBookDetailList?: PlatformCommon.AccountingBookDetailList;
    itemList?: VendorBillItemList;
    installmentList?: VendorBillInstallmentList;
    landedCostsList?: PurchLandedCostList;
    purchaseOrderList?: PlatformCore.RecordRefList;
    taxDetailsList?: PlatformCommon.TaxDetailsList;
    overrideInstallments?: boolean;
    customFieldList?: PlatformCore.CustomFieldList;
    internalId?: string;
    externalId?: string;
} & PlatformCore.RecordProps;
export declare class VendorBill extends PlatformCore.Record {
    createdDate?: string;
    lastModifiedDate?: string;
    nexus?: PlatformCore.RecordRef;
    subsidiaryTaxRegNum?: PlatformCore.RecordRef;
    taxRegOverride?: boolean;
    taxDetailsOverride?: boolean;
    customForm?: PlatformCore.RecordRef;
    billAddressList?: PlatformCore.RecordRef;
    account?: PlatformCore.RecordRef;
    entity?: PlatformCore.RecordRef;
    subsidiary?: PlatformCore.RecordRef;
    approvalStatus?: PlatformCore.RecordRef;
    nextApprover?: PlatformCore.RecordRef;
    vatRegNum?: string;
    postingPeriod?: PlatformCore.RecordRef;
    tranDate?: string;
    currencyName?: string;
    billingAddress?: PlatformCommon.Address;
    exchangeRate?: number;
    entityTaxRegNum?: PlatformCore.RecordRef;
    taxPointDate?: string;
    terms?: PlatformCore.RecordRef;
    dueDate?: string;
    discountDate?: string;
    tranId?: string;
    userTotal?: number;
    discountAmount?: number;
    taxTotal?: number;
    paymentHold?: boolean;
    memo?: string;
    tax2Total?: number;
    creditLimit?: number;
    availableVendorCredit?: number;
    currency?: PlatformCore.RecordRef;
    clazz?: PlatformCore.RecordRef;
    department?: PlatformCore.RecordRef;
    location?: PlatformCore.RecordRef;
    status?: string;
    landedCostMethod?: PlatformCommonTypes.LandedCostMethod;
    landedCostPerLine?: boolean;
    transactionNumber?: string;
    expenseList?: VendorBillExpenseList;
    accountingBookDetailList?: PlatformCommon.AccountingBookDetailList;
    itemList?: VendorBillItemList;
    installmentList?: VendorBillInstallmentList;
    landedCostsList?: PurchLandedCostList;
    purchaseOrderList?: PlatformCore.RecordRefList;
    taxDetailsList?: PlatformCommon.TaxDetailsList;
    overrideInstallments?: boolean;
    customFieldList?: PlatformCore.CustomFieldList;
    internalId?: string;
    externalId?: string;
    constructor(props: VendorBillProps);
}
export declare type ItemReceiptExpenseProps = {
    markReceived?: boolean;
    orderLine?: number;
    line?: number;
    account?: string;
    memo?: string;
    amount?: number;
    customFieldList?: PlatformCore.CustomFieldList;
};
export declare class ItemReceiptExpense extends SoapMappingBase {
    markReceived?: boolean;
    orderLine?: number;
    line?: number;
    account?: string;
    memo?: string;
    amount?: number;
    customFieldList?: PlatformCore.CustomFieldList;
    constructor(props: ItemReceiptExpenseProps);
}
export declare type VendorBillItemListProps = {
    item?: VendorBillItem[];
    replaceAll?: boolean;
};
export declare class VendorBillItemList extends SoapMappingBase {
    item?: VendorBillItem[];
    replaceAll?: boolean;
    constructor(props: VendorBillItemListProps);
}
export declare type VendorCreditExpenseProps = {
    orderLine?: number;
    line?: number;
    category?: PlatformCore.RecordRef;
    account?: PlatformCore.RecordRef;
    amount?: number;
    taxAmount?: number;
    taxCode?: PlatformCore.RecordRef;
    taxRate1?: number;
    taxRate2?: number;
    tax1Amt?: number;
    grossAmt?: number;
    taxDetailsReference?: string;
    memo?: string;
    department?: PlatformCore.RecordRef;
    clazz?: PlatformCore.RecordRef;
    location?: PlatformCore.RecordRef;
    customer?: PlatformCore.RecordRef;
    isBillable?: boolean;
    amortizationSched?: PlatformCore.RecordRef;
    amortizStartDate?: string;
    amortizationEndDate?: string;
    amortizationResidual?: string;
    customFieldList?: PlatformCore.CustomFieldList;
};
export declare class VendorCreditExpense extends SoapMappingBase {
    orderLine?: number;
    line?: number;
    category?: PlatformCore.RecordRef;
    account?: PlatformCore.RecordRef;
    amount?: number;
    taxAmount?: number;
    taxCode?: PlatformCore.RecordRef;
    taxRate1?: number;
    taxRate2?: number;
    tax1Amt?: number;
    grossAmt?: number;
    taxDetailsReference?: string;
    memo?: string;
    department?: PlatformCore.RecordRef;
    clazz?: PlatformCore.RecordRef;
    location?: PlatformCore.RecordRef;
    customer?: PlatformCore.RecordRef;
    isBillable?: boolean;
    amortizationSched?: PlatformCore.RecordRef;
    amortizStartDate?: string;
    amortizationEndDate?: string;
    amortizationResidual?: string;
    customFieldList?: PlatformCore.CustomFieldList;
    constructor(props: VendorCreditExpenseProps);
}
export declare type PurchaseOrderProps = {
    createdDate?: string;
    lastModifiedDate?: string;
    nexus?: PlatformCore.RecordRef;
    subsidiaryTaxRegNum?: PlatformCore.RecordRef;
    taxRegOverride?: boolean;
    taxDetailsOverride?: boolean;
    customForm?: PlatformCore.RecordRef;
    entity?: PlatformCore.RecordRef;
    purchaseContract?: PlatformCore.RecordRef;
    vatRegNum?: string;
    employee?: PlatformCore.RecordRef;
    supervisorApproval?: boolean;
    tranDate?: string;
    tranId?: string;
    entityTaxRegNum?: PlatformCore.RecordRef;
    taxPointDate?: string;
    createdFrom?: PlatformCore.RecordRef;
    terms?: PlatformCore.RecordRef;
    dueDate?: string;
    otherRefNum?: string;
    availableVendorCredit?: number;
    memo?: string;
    approvalStatus?: PlatformCore.RecordRef;
    exchangeRate?: number;
    nextApprover?: PlatformCore.RecordRef;
    source?: string;
    currencyName?: string;
    toBePrinted?: boolean;
    toBeEmailed?: boolean;
    email?: string;
    toBeFaxed?: boolean;
    fax?: string;
    message?: string;
    billingAddress?: PlatformCommon.Address;
    billAddressList?: PlatformCore.RecordRef;
    currency?: PlatformCore.RecordRef;
    shipTo?: PlatformCore.RecordRef;
    subTotal?: number;
    taxTotal?: number;
    tax2Total?: number;
    shippingAddress?: PlatformCommon.Address;
    shipIsResidential?: boolean;
    shipAddressList?: PlatformCore.RecordRef;
    fob?: string;
    shipDate?: string;
    shipMethod?: PlatformCore.RecordRef;
    incoterm?: PlatformCore.RecordRef;
    trackingNumbers?: string;
    linkedTrackingNumbers?: string;
    total?: number;
    clazz?: PlatformCore.RecordRef;
    department?: PlatformCore.RecordRef;
    location?: PlatformCore.RecordRef;
    subsidiary?: PlatformCore.RecordRef;
    intercoTransaction?: PlatformCore.RecordRef;
    intercoStatus?: PlatformCommonTypes.IntercoStatus;
    status?: string;
    orderStatus?: TransactionsPurchasesTypes.PurchaseOrderOrderStatus;
    itemList?: PurchaseOrderItemList;
    accountingBookDetailList?: PlatformCommon.AccountingBookDetailList;
    expenseList?: PurchaseOrderExpenseList;
    taxDetailsList?: PlatformCommon.TaxDetailsList;
    customFieldList?: PlatformCore.CustomFieldList;
    internalId?: string;
    externalId?: string;
} & PlatformCore.RecordProps;
export declare class PurchaseOrder extends PlatformCore.Record {
    createdDate?: string;
    lastModifiedDate?: string;
    nexus?: PlatformCore.RecordRef;
    subsidiaryTaxRegNum?: PlatformCore.RecordRef;
    taxRegOverride?: boolean;
    taxDetailsOverride?: boolean;
    customForm?: PlatformCore.RecordRef;
    entity?: PlatformCore.RecordRef;
    purchaseContract?: PlatformCore.RecordRef;
    vatRegNum?: string;
    employee?: PlatformCore.RecordRef;
    supervisorApproval?: boolean;
    tranDate?: string;
    tranId?: string;
    entityTaxRegNum?: PlatformCore.RecordRef;
    taxPointDate?: string;
    createdFrom?: PlatformCore.RecordRef;
    terms?: PlatformCore.RecordRef;
    dueDate?: string;
    otherRefNum?: string;
    availableVendorCredit?: number;
    memo?: string;
    approvalStatus?: PlatformCore.RecordRef;
    exchangeRate?: number;
    nextApprover?: PlatformCore.RecordRef;
    source?: string;
    currencyName?: string;
    toBePrinted?: boolean;
    toBeEmailed?: boolean;
    email?: string;
    toBeFaxed?: boolean;
    fax?: string;
    message?: string;
    billingAddress?: PlatformCommon.Address;
    billAddressList?: PlatformCore.RecordRef;
    currency?: PlatformCore.RecordRef;
    shipTo?: PlatformCore.RecordRef;
    subTotal?: number;
    taxTotal?: number;
    tax2Total?: number;
    shippingAddress?: PlatformCommon.Address;
    shipIsResidential?: boolean;
    shipAddressList?: PlatformCore.RecordRef;
    fob?: string;
    shipDate?: string;
    shipMethod?: PlatformCore.RecordRef;
    incoterm?: PlatformCore.RecordRef;
    trackingNumbers?: string;
    linkedTrackingNumbers?: string;
    total?: number;
    clazz?: PlatformCore.RecordRef;
    department?: PlatformCore.RecordRef;
    location?: PlatformCore.RecordRef;
    subsidiary?: PlatformCore.RecordRef;
    intercoTransaction?: PlatformCore.RecordRef;
    intercoStatus?: PlatformCommonTypes.IntercoStatus;
    status?: string;
    orderStatus?: TransactionsPurchasesTypes.PurchaseOrderOrderStatus;
    itemList?: PurchaseOrderItemList;
    accountingBookDetailList?: PlatformCommon.AccountingBookDetailList;
    expenseList?: PurchaseOrderExpenseList;
    taxDetailsList?: PlatformCommon.TaxDetailsList;
    customFieldList?: PlatformCore.CustomFieldList;
    internalId?: string;
    externalId?: string;
    constructor(props: PurchaseOrderProps);
}
export declare type PurchaseRequisitionItemProps = {
    line?: number;
    item?: PlatformCore.RecordRef;
    vendorName?: string;
    poVendor?: PlatformCore.RecordRef;
    quantity?: number;
    units?: PlatformCore.RecordRef;
    serialNumbers?: string;
    inventoryDetail?: PlatformCommon.InventoryDetail;
    description?: string;
    estimatedRate?: number;
    estimatedAmount?: number;
    rate?: string;
    amount?: number;
    taxCode?: PlatformCore.RecordRef;
    taxRate1?: number;
    taxRate2?: number;
    grossAmt?: number;
    options?: PlatformCore.CustomFieldList;
    department?: PlatformCore.RecordRef;
    clazz?: PlatformCore.RecordRef;
    customer?: PlatformCore.RecordRef;
    isBillable?: boolean;
    linkedOrderList?: PlatformCore.RecordRefList;
    linkedOrderStatus?: string;
    expectedReceiptDate?: string;
    isClosed?: boolean;
    expandItemGroup?: boolean;
};
export declare class PurchaseRequisitionItem extends SoapMappingBase {
    line?: number;
    item?: PlatformCore.RecordRef;
    vendorName?: string;
    poVendor?: PlatformCore.RecordRef;
    quantity?: number;
    units?: PlatformCore.RecordRef;
    serialNumbers?: string;
    inventoryDetail?: PlatformCommon.InventoryDetail;
    description?: string;
    estimatedRate?: number;
    estimatedAmount?: number;
    rate?: string;
    amount?: number;
    taxCode?: PlatformCore.RecordRef;
    taxRate1?: number;
    taxRate2?: number;
    grossAmt?: number;
    options?: PlatformCore.CustomFieldList;
    department?: PlatformCore.RecordRef;
    clazz?: PlatformCore.RecordRef;
    customer?: PlatformCore.RecordRef;
    isBillable?: boolean;
    linkedOrderList?: PlatformCore.RecordRefList;
    linkedOrderStatus?: string;
    expectedReceiptDate?: string;
    isClosed?: boolean;
    expandItemGroup?: boolean;
    constructor(props: PurchaseRequisitionItemProps);
}
export declare type PurchaseOrderExpenseProps = {
    line?: number;
    category?: PlatformCore.RecordRef;
    linkedOrderList?: PlatformCore.RecordRefList;
    account?: PlatformCore.RecordRef;
    amount?: number;
    taxAmount?: number;
    memo?: string;
    department?: PlatformCore.RecordRef;
    clazz?: PlatformCore.RecordRef;
    location?: PlatformCore.RecordRef;
    customer?: PlatformCore.RecordRef;
    isClosed?: boolean;
    isBillable?: boolean;
    createdFrom?: PlatformCore.RecordRef;
    taxCode?: PlatformCore.RecordRef;
    taxRate1?: number;
    taxRate2?: number;
    tax1Amt?: number;
    grossAmt?: number;
    taxDetailsReference?: string;
    customFieldList?: PlatformCore.CustomFieldList;
};
export declare class PurchaseOrderExpense extends SoapMappingBase {
    line?: number;
    category?: PlatformCore.RecordRef;
    linkedOrderList?: PlatformCore.RecordRefList;
    account?: PlatformCore.RecordRef;
    amount?: number;
    taxAmount?: number;
    memo?: string;
    department?: PlatformCore.RecordRef;
    clazz?: PlatformCore.RecordRef;
    location?: PlatformCore.RecordRef;
    customer?: PlatformCore.RecordRef;
    isClosed?: boolean;
    isBillable?: boolean;
    createdFrom?: PlatformCore.RecordRef;
    taxCode?: PlatformCore.RecordRef;
    taxRate1?: number;
    taxRate2?: number;
    tax1Amt?: number;
    grossAmt?: number;
    taxDetailsReference?: string;
    customFieldList?: PlatformCore.CustomFieldList;
    constructor(props: PurchaseOrderExpenseProps);
}
export declare type VendorCreditProps = {
    createdDate?: string;
    lastModifiedDate?: string;
    nexus?: PlatformCore.RecordRef;
    subsidiaryTaxRegNum?: PlatformCore.RecordRef;
    taxRegOverride?: boolean;
    taxDetailsOverride?: boolean;
    customForm?: PlatformCore.RecordRef;
    account?: PlatformCore.RecordRef;
    unApplied?: number;
    billAddressList?: PlatformCore.RecordRef;
    autoApply?: boolean;
    applied?: number;
    transactionNumber?: string;
    tranId?: string;
    createdFrom?: PlatformCore.RecordRef;
    entity?: PlatformCore.RecordRef;
    total?: number;
    userTotal?: number;
    currency?: PlatformCore.RecordRef;
    currencyName?: string;
    billingAddress?: PlatformCommon.Address;
    tranDate?: string;
    exchangeRate?: number;
    entityTaxRegNum?: PlatformCore.RecordRef;
    taxPointDate?: string;
    userTaxTotal?: number;
    postingPeriod?: PlatformCore.RecordRef;
    memo?: string;
    department?: PlatformCore.RecordRef;
    clazz?: PlatformCore.RecordRef;
    location?: PlatformCore.RecordRef;
    subsidiary?: PlatformCore.RecordRef;
    expenseList?: VendorCreditExpenseList;
    itemList?: VendorCreditItemList;
    accountingBookDetailList?: PlatformCommon.AccountingBookDetailList;
    applyList?: VendorCreditApplyList;
    taxDetailsList?: PlatformCommon.TaxDetailsList;
    customFieldList?: PlatformCore.CustomFieldList;
    internalId?: string;
    externalId?: string;
} & PlatformCore.RecordProps;
export declare class VendorCredit extends PlatformCore.Record {
    createdDate?: string;
    lastModifiedDate?: string;
    nexus?: PlatformCore.RecordRef;
    subsidiaryTaxRegNum?: PlatformCore.RecordRef;
    taxRegOverride?: boolean;
    taxDetailsOverride?: boolean;
    customForm?: PlatformCore.RecordRef;
    account?: PlatformCore.RecordRef;
    unApplied?: number;
    billAddressList?: PlatformCore.RecordRef;
    autoApply?: boolean;
    applied?: number;
    transactionNumber?: string;
    tranId?: string;
    createdFrom?: PlatformCore.RecordRef;
    entity?: PlatformCore.RecordRef;
    total?: number;
    userTotal?: number;
    currency?: PlatformCore.RecordRef;
    currencyName?: string;
    billingAddress?: PlatformCommon.Address;
    tranDate?: string;
    exchangeRate?: number;
    entityTaxRegNum?: PlatformCore.RecordRef;
    taxPointDate?: string;
    userTaxTotal?: number;
    postingPeriod?: PlatformCore.RecordRef;
    memo?: string;
    department?: PlatformCore.RecordRef;
    clazz?: PlatformCore.RecordRef;
    location?: PlatformCore.RecordRef;
    subsidiary?: PlatformCore.RecordRef;
    expenseList?: VendorCreditExpenseList;
    itemList?: VendorCreditItemList;
    accountingBookDetailList?: PlatformCommon.AccountingBookDetailList;
    applyList?: VendorCreditApplyList;
    taxDetailsList?: PlatformCommon.TaxDetailsList;
    customFieldList?: PlatformCore.CustomFieldList;
    internalId?: string;
    externalId?: string;
    constructor(props: VendorCreditProps);
}
export declare type VendorCreditItemListProps = {
    item?: VendorCreditItem[];
    replaceAll?: boolean;
};
export declare class VendorCreditItemList extends SoapMappingBase {
    item?: VendorCreditItem[];
    replaceAll?: boolean;
    constructor(props: VendorCreditItemListProps);
}
export declare type VendorPaymentApplyListProps = {
    apply?: VendorPaymentApply[];
    replaceAll?: boolean;
};
export declare class VendorPaymentApplyList extends SoapMappingBase {
    apply?: VendorPaymentApply[];
    replaceAll?: boolean;
    constructor(props: VendorPaymentApplyListProps);
}
export declare type VendorReturnAuthorizationItemListProps = {
    item?: VendorReturnAuthorizationItem[];
    replaceAll?: boolean;
};
export declare class VendorReturnAuthorizationItemList extends SoapMappingBase {
    item?: VendorReturnAuthorizationItem[];
    replaceAll?: boolean;
    constructor(props: VendorReturnAuthorizationItemListProps);
}
export declare type VendorReturnAuthorizationProps = {
    createdDate?: string;
    lastModifiedDate?: string;
    nexus?: PlatformCore.RecordRef;
    subsidiaryTaxRegNum?: PlatformCore.RecordRef;
    taxRegOverride?: boolean;
    taxDetailsOverride?: boolean;
    customForm?: PlatformCore.RecordRef;
    tranId?: string;
    createdFrom?: PlatformCore.RecordRef;
    entity?: PlatformCore.RecordRef;
    orderStatus?: TransactionsPurchasesTypes.VendorReturnAuthorizationOrderStatus;
    tranDate?: string;
    userTotal?: number;
    currency?: PlatformCore.RecordRef;
    currencyName?: string;
    billingAddress?: PlatformCommon.Address;
    billAddressList?: PlatformCore.RecordRef;
    memo?: string;
    exchangeRate?: number;
    entityTaxRegNum?: PlatformCore.RecordRef;
    taxPointDate?: string;
    userTaxTotal?: number;
    department?: PlatformCore.RecordRef;
    clazz?: PlatformCore.RecordRef;
    location?: PlatformCore.RecordRef;
    subsidiary?: PlatformCore.RecordRef;
    intercoTransaction?: PlatformCore.RecordRef;
    intercoStatus?: PlatformCommonTypes.IntercoStatus;
    expenseList?: VendorReturnAuthorizationExpenseList;
    itemList?: VendorReturnAuthorizationItemList;
    accountingBookDetailList?: PlatformCommon.AccountingBookDetailList;
    taxDetailsList?: PlatformCommon.TaxDetailsList;
    customFieldList?: PlatformCore.CustomFieldList;
    internalId?: string;
    externalId?: string;
} & PlatformCore.RecordProps;
export declare class VendorReturnAuthorization extends PlatformCore.Record {
    createdDate?: string;
    lastModifiedDate?: string;
    nexus?: PlatformCore.RecordRef;
    subsidiaryTaxRegNum?: PlatformCore.RecordRef;
    taxRegOverride?: boolean;
    taxDetailsOverride?: boolean;
    customForm?: PlatformCore.RecordRef;
    tranId?: string;
    createdFrom?: PlatformCore.RecordRef;
    entity?: PlatformCore.RecordRef;
    orderStatus?: TransactionsPurchasesTypes.VendorReturnAuthorizationOrderStatus;
    tranDate?: string;
    userTotal?: number;
    currency?: PlatformCore.RecordRef;
    currencyName?: string;
    billingAddress?: PlatformCommon.Address;
    billAddressList?: PlatformCore.RecordRef;
    memo?: string;
    exchangeRate?: number;
    entityTaxRegNum?: PlatformCore.RecordRef;
    taxPointDate?: string;
    userTaxTotal?: number;
    department?: PlatformCore.RecordRef;
    clazz?: PlatformCore.RecordRef;
    location?: PlatformCore.RecordRef;
    subsidiary?: PlatformCore.RecordRef;
    intercoTransaction?: PlatformCore.RecordRef;
    intercoStatus?: PlatformCommonTypes.IntercoStatus;
    expenseList?: VendorReturnAuthorizationExpenseList;
    itemList?: VendorReturnAuthorizationItemList;
    accountingBookDetailList?: PlatformCommon.AccountingBookDetailList;
    taxDetailsList?: PlatformCommon.TaxDetailsList;
    customFieldList?: PlatformCore.CustomFieldList;
    internalId?: string;
    externalId?: string;
    constructor(props: VendorReturnAuthorizationProps);
}
export declare type PurchaseRequisitionExpenseListProps = {
    purchaseRequisitionExpense?: PurchaseRequisitionExpense[];
    replaceAll?: boolean;
};
export declare class PurchaseRequisitionExpenseList extends SoapMappingBase {
    purchaseRequisitionExpense?: PurchaseRequisitionExpense[];
    replaceAll?: boolean;
    constructor(props: PurchaseRequisitionExpenseListProps);
}
export declare type PurchLandedCostListProps = {
    landedCost?: PlatformCommon.LandedCostSummary[];
    replaceAll?: boolean;
};
export declare class PurchLandedCostList extends SoapMappingBase {
    landedCost?: PlatformCommon.LandedCostSummary[];
    replaceAll?: boolean;
    constructor(props: PurchLandedCostListProps);
}
export declare type VendorCreditItemProps = {
    item?: PlatformCore.RecordRef;
    vendorName?: string;
    line?: number;
    orderLine?: number;
    quantity?: number;
    units?: PlatformCore.RecordRef;
    inventoryDetail?: PlatformCommon.InventoryDetail;
    serialNumbersList?: PlatformCore.RecordRefList;
    description?: string;
    rate?: string;
    amount?: number;
    binNumbers?: string;
    taxCode?: PlatformCore.RecordRef;
    taxRate1?: number;
    taxRate2?: number;
    grossAmt?: number;
    tax1Amt?: number;
    options?: PlatformCore.CustomFieldList;
    department?: PlatformCore.RecordRef;
    clazz?: PlatformCore.RecordRef;
    location?: PlatformCore.RecordRef;
    customer?: PlatformCore.RecordRef;
    isBillable?: boolean;
    amortizationSched?: PlatformCore.RecordRef;
    amortizStartDate?: string;
    amortizationEndDate?: string;
    amortizationResidual?: string;
    taxAmount?: number;
    taxDetailsReference?: string;
    customFieldList?: PlatformCore.CustomFieldList;
};
export declare class VendorCreditItem extends SoapMappingBase {
    item?: PlatformCore.RecordRef;
    vendorName?: string;
    line?: number;
    orderLine?: number;
    quantity?: number;
    units?: PlatformCore.RecordRef;
    inventoryDetail?: PlatformCommon.InventoryDetail;
    serialNumbersList?: PlatformCore.RecordRefList;
    description?: string;
    rate?: string;
    amount?: number;
    binNumbers?: string;
    taxCode?: PlatformCore.RecordRef;
    taxRate1?: number;
    taxRate2?: number;
    grossAmt?: number;
    tax1Amt?: number;
    options?: PlatformCore.CustomFieldList;
    department?: PlatformCore.RecordRef;
    clazz?: PlatformCore.RecordRef;
    location?: PlatformCore.RecordRef;
    customer?: PlatformCore.RecordRef;
    isBillable?: boolean;
    amortizationSched?: PlatformCore.RecordRef;
    amortizStartDate?: string;
    amortizationEndDate?: string;
    amortizationResidual?: string;
    taxAmount?: number;
    taxDetailsReference?: string;
    customFieldList?: PlatformCore.CustomFieldList;
    constructor(props: VendorCreditItemProps);
}
