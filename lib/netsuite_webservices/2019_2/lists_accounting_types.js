"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
//# sourceMappingURL=data:application/json;base64,{"version":3,"file":"lists_accounting_types.js","sourceRoot":"","sources":["../../../src/netsuite_webservices/2019_2/lists_accounting_types.ts"],"names":[],"mappings":"","sourcesContent":["export type ItemPreferenceCriterion = \"_A\" | \"_B\" | \"_C\" | \"_D\" | \"_E\" | \"_F\";\n\nexport type CurrencyCurrencyPrecision = \"_two\" | \"_zero\";\n\nexport type ItemAtpMethod = \"_cumulativeAtpWithLookAhead\" | \"_discreteAtp\";\n\nexport type ItemCostingMethod =\n  | \"_average\"\n  | \"_fifo\"\n  | \"_groupAverage\"\n  | \"_lifo\"\n  | \"_lotNumbered\"\n  | \"_serialized\"\n  | \"_standard\";\n\nexport type ItemMatrixType = \"_parent\" | \"_child\";\n\nexport type PaymentCardBrand =\n  | \"_amex\"\n  | \"_cirrus\"\n  | \"_dinersClub\"\n  | \"_discover\"\n  | \"_jcb\"\n  | \"_laser\"\n  | \"_localCard\"\n  | \"_maestro\"\n  | \"_masterCard\"\n  | \"_solo\"\n  | \"_unionPay\"\n  | \"_visa\";\n\nexport type BillingScheduleMonthDow =\n  | \"_sunday\"\n  | \"_monday\"\n  | \"_tuesday\"\n  | \"_wednesday\"\n  | \"_thursday\"\n  | \"_friday\"\n  | \"_saturday\"\n  | \"_day\";\n\nexport type ItemOutOfStockBehavior =\n  | \"_allowBackOrdersButDisplayOutOfStockMessage\"\n  | \"_allowBackOrdersWithNoOutOfStockMessage\"\n  | \"_default\"\n  | \"_disallowBackOrdersButDisplayOutOfStockMessage\"\n  | \"_removeItemWhenOutOfStock\";\n\nexport type ItemType =\n  | \"_assembly\"\n  | \"_description\"\n  | \"_discount\"\n  | \"_downloadItem\"\n  | \"_giftCertificateItem\"\n  | \"_inventoryItem\"\n  | \"_itemGroup\"\n  | \"_kit\"\n  | \"_markup\"\n  | \"_nonInventoryItem\"\n  | \"_otherCharge\"\n  | \"_payment\"\n  | \"_service\"\n  | \"_subtotal\";\n\nexport type BillingScheduleType =\n  | \"_chargeBased\"\n  | \"_fixedBidInterval\"\n  | \"_fixedBidMilestone\"\n  | \"_standard\"\n  | \"_timeAndMaterials\";\n\nexport type ItemSubType = \"_forPurchase\" | \"_forResale\" | \"_forSale\";\n\nexport type ItemSupplyLotSizingMethod =\n  | \"_fixedLotSize\"\n  | \"_lotForLot\"\n  | \"_periodsOfSupply\";\n\nexport type ItemAccountMappingItemAccount =\n  | \"_asset\"\n  | \"_costOfGoods\"\n  | \"_customerReturnVariance\"\n  | \"_deferral\"\n  | \"_deferredRevenue\"\n  | \"_discount\"\n  | \"_dropShipExpense\"\n  | \"_exchangeRateVariance\"\n  | \"_expense\"\n  | \"_foreignCurrencyAdjustmentRevenueAccount\"\n  | \"_gainLoss\"\n  | \"_income\"\n  | \"_intercompanyCostOfGoods\"\n  | \"_intercompanyDeferredRevenue\"\n  | \"_intercompanyExpense\"\n  | \"_intercompanyIncome\"\n  | \"_liability\"\n  | \"_markup\"\n  | \"_payment\"\n  | \"_priceVariance\"\n  | \"_productionPriceVariance\"\n  | \"_productionQuantityVariance\"\n  | \"_purchasePriceVariance\"\n  | \"_quantityVariance\"\n  | \"_scrap\"\n  | \"_unbuildVariance\"\n  | \"_vendorReturnVariance\"\n  | \"_wipVariance\"\n  | \"_workInProcess\"\n  | \"_writeOff\";\n\nexport type CashFlowRateType = \"_average\" | \"_current\" | \"_historical\";\n\nexport type CurrencyFxRateUpdateTimezone =\n  | \"_americaNewYork\"\n  | \"_asiaMagadan\"\n  | \"_asiaTokyo\"\n  | \"_europeParis\";\n\nexport type BillingScheduleYearMonth =\n  | \"_january\"\n  | \"_february\"\n  | \"_march\"\n  | \"_april\"\n  | \"_may\"\n  | \"_june\"\n  | \"_july\"\n  | \"_august\"\n  | \"_september\"\n  | \"_october\"\n  | \"_november\"\n  | \"_december\";\n\nexport type BillingScheduleRecurrencePattern =\n  | \"_anniversaryBillDate\"\n  | \"_fixedBillDate\";\n\nexport type TaxAcctType = \"_sale\" | \"_purchase\";\n\nexport type GeneralRateType = \"_average\" | \"_current\" | \"_historical\";\n\nexport type PeriodicLotSizeType = \"_interval\" | \"_monthly\" | \"_weekly\";\n\nexport type HazmatPackingGroup = \"_i\" | \"_ii\" | \"_iii\";\n\nexport type ItemProductFeed =\n  | \"_googleBase\"\n  | \"_nexTag\"\n  | \"_shoppingCom\"\n  | \"_shopzilla\"\n  | \"_yahooShopping\";\n\nexport type ItemSupplyReplenishmentMethod = \"_reorderPoint\" | \"_timePhased\";\n\nexport type BillingScheduleYearDowimMonth =\n  | \"_january\"\n  | \"_february\"\n  | \"_march\"\n  | \"_april\"\n  | \"_may\"\n  | \"_june\"\n  | \"_july\"\n  | \"_august\"\n  | \"_september\"\n  | \"_october\"\n  | \"_november\"\n  | \"_december\";\n\nexport type ItemDemandSource =\n  | \"_enteredAndPlannedOrders\"\n  | \"_forecastAndOrders\"\n  | \"_forecastConsumption\"\n  | \"_forecastFromDemandPlan\";\n\nexport type BillingScheduleYearDow =\n  | \"_sunday\"\n  | \"_monday\"\n  | \"_tuesday\"\n  | \"_wednesday\"\n  | \"_thursday\"\n  | \"_friday\"\n  | \"_saturday\"\n  | \"_day\";\n\nexport type LocationTimeZone =\n  | \"_africaCairo\"\n  | \"_africaCasablanca\"\n  | \"_africaJohannesburg\"\n  | \"_africaNairobi\"\n  | \"_africaTunis\"\n  | \"_africaWindhoek\"\n  | \"_americaAnchorage\"\n  | \"_americaArgentinaBuenosAires\"\n  | \"_americaBogota\"\n  | \"_americaCaracas\"\n  | \"_americaCayenne\"\n  | \"_americaChicago\"\n  | \"_americaChihuahua\"\n  | \"_americaDenver\"\n  | \"_americaGodthab\"\n  | \"_americaGuatemala\"\n  | \"_americaHalifax\"\n  | \"_americaIndianaIndianapolis\"\n  | \"_americaLaPaz\"\n  | \"_americaLosAngeles\"\n  | \"_americaManaus\"\n  | \"_americaMexicoCity\"\n  | \"_americaMontevideo\"\n  | \"_americaNewYork\"\n  | \"_americaNoronha\"\n  | \"_americaPhoenix\"\n  | \"_americaRegina\"\n  | \"_americaSantiago\"\n  | \"_americaSaoPaulo\"\n  | \"_americaStJohns\"\n  | \"_americaTijuana\"\n  | \"_asiaAlmaty\"\n  | \"_asiaAmman\"\n  | \"_asiaBaghdad\"\n  | \"_asiaBaku\"\n  | \"_asiaBangkok\"\n  | \"_asiaBeirut\"\n  | \"_asiaDhaka\"\n  | \"_asiaHongKong\"\n  | \"_asiaIrkutsk\"\n  | \"_asiaJerusalem\"\n  | \"_asiaKabul\"\n  | \"_asiaKarachi\"\n  | \"_asiaKathmandu\"\n  | \"_asiaKolkata\"\n  | \"_asiaKrasnoyarsk\"\n  | \"_asiaKualaLumpur\"\n  | \"_asiaMagadan\"\n  | \"_asiaManila\"\n  | \"_asiaMuscat\"\n  | \"_asiaRangoon\"\n  | \"_asiaRiyadh\"\n  | \"_asiaSeoul\"\n  | \"_asiaTaipei\"\n  | \"_asiaTashkent\"\n  | \"_asiaTbilisi\"\n  | \"_asiaTehran\"\n  | \"_asiaTokyo\"\n  | \"_asiaVladivostok\"\n  | \"_asiaYakutsk\"\n  | \"_asiaYekaterinburg\"\n  | \"_asiaYerevan\"\n  | \"_atlanticAzores\"\n  | \"_atlanticCapeVerde\"\n  | \"_atlanticReykjavik\"\n  | \"_australiaAdelaide\"\n  | \"_australiaBrisbane\"\n  | \"_australiaDarwin\"\n  | \"_australiaHobart\"\n  | \"_australiaPerth\"\n  | \"_australiaSydney\"\n  | \"_etcGmtPlus12\"\n  | \"_europeAmsterdam\"\n  | \"_europeBudapest\"\n  | \"_europeIstanbul\"\n  | \"_europeKiev\"\n  | \"_europeLondon\"\n  | \"_europeMinsk\"\n  | \"_europeMoscow\"\n  | \"_europeParis\"\n  | \"_europeWarsaw\"\n  | \"_pacificAuckland\"\n  | \"_pacificGuam\"\n  | \"_pacificHonolulu\"\n  | \"_pacificKwajalein\"\n  | \"_pacificPagoPago\"\n  | \"_pacificTongatapu\";\n\nexport type AssemblyItemEffectiveBomControl =\n  | \"_effectiveDate\"\n  | \"_revisionControl\";\n\nexport type PaymentInstrumentSupportedOperation =\n  | \"_authorization\"\n  | \"_capture\"\n  | \"_sale\"\n  | \"_credit\"\n  | \"_refund\"\n  | \"_override\"\n  | \"_void\"\n  | \"_refresh\";\n\nexport type ItemCostAccountingStatus =\n  | \"_complete\"\n  | \"_failed\"\n  | \"_pending\"\n  | \"_processing\";\n\nexport type FairValuePriceFairValueRangePolicy =\n  | \"_boundary\"\n  | \"_fairValue\"\n  | \"_high\"\n  | \"_low\";\n\nexport type LocationGeolocationMethod =\n  | \"_deriveFromPostalCode\"\n  | \"_useLatLongCoordinates\";\n\nexport type BillingScheduleYearDowim =\n  | \"_first\"\n  | \"_second\"\n  | \"_third\"\n  | \"_fourth\"\n  | \"_last\";\n\nexport type CostCategoryItemCostType =\n  | \"_laborRun\"\n  | \"_laborRunOverhead\"\n  | \"_laborSetup\"\n  | \"_laborSetupOverhead\"\n  | \"_landed\"\n  | \"_machineRun\"\n  | \"_machineRunOverhead\"\n  | \"_machineSetup\"\n  | \"_machineSetupOverhead\"\n  | \"_material\"\n  | \"_materialOverhead\"\n  | \"_service\";\n\nexport type LocationAutoAssignmentRegionSetting =\n  | \"_allowSpecifiedRegionsOnly\"\n  | \"_allowWorldwide\"\n  | \"_allowWorldwideExceptExcludedRegions\"\n  | \"_disallow\";\n\nexport type PaymentInstrumentState =\n  | \"_expired\"\n  | \"_invalid\"\n  | \"_unknown\"\n  | \"_verified\";\n\nexport type SalesTaxItemAvailable = \"_both\" | \"_purchase\" | \"_sale\";\n\nexport type ItemInvtClassification = \"_a\" | \"_b\" | \"_c\";\n\nexport type BillingScheduleRecurrenceMode = \"_dom\" | \"_dowim\";\n\nexport type AccountingBookStatus = \"_active\" | \"_inactive\" | \"_pending\";\n\nexport type ItemOverheadType =\n  | \"_amountBaseUnit\"\n  | \"_percentOfMaterial\"\n  | \"_percentOfTotal\";\n\nexport type ItemWeightUnit = \"_g\" | \"_kg\" | \"_lb\" | \"_oz\";\n\nexport type ConsolidatedRate = \"_average\" | \"_current\" | \"_historical\";\n\nexport type BillingScheduleRecurrenceRecurrenceUnits =\n  | \"_custom\"\n  | \"_days\"\n  | \"_months\"\n  | \"_weeks\";\n\nexport type BillingScheduleMonthDowim =\n  | \"_first\"\n  | \"_second\"\n  | \"_third\"\n  | \"_fourth\"\n  | \"_last\";\n\nexport type ItemEbayRelistingOption =\n  | \"_doNotRelist\"\n  | \"_relistWhenItemExpires\"\n  | \"_relistWhenItemIsSold\"\n  | \"_relistWhenItemIsSoldExpires\";\n\nexport type TokenFamily =\n  | \"_adyen\"\n  | \"_altaPay\"\n  | \"_cyberSource\"\n  | \"_eway\"\n  | \"_freedomPay\"\n  | \"_merchantESolutions\"\n  | \"_payCorp\"\n  | \"_payu\"\n  | \"_securePay\"\n  | \"_soluPay\"\n  | \"_vantivPayments\";\n\nexport type RevRecScheduleAmortizationType = \"_standard\" | \"_variable\";\n\nexport type RevRecScheduleRecurrenceType =\n  | \"_custom\"\n  | \"_straightLineByEvenPeriods\"\n  | \"_straightLineProrateFirstAndLastPeriod\"\n  | \"_straightLineProrateFirstAndLastPeriodPeriodRate\"\n  | \"_straightLineUsingExactDays\";\n\nexport type BillingScheduleFrequency =\n  | \"_annually\"\n  | \"_custom\"\n  | \"_daily\"\n  | \"_endOfPeriod\"\n  | \"_monthly\"\n  | \"_never\"\n  | \"_oneTime\"\n  | \"_startOfPeriod\"\n  | \"_weekly\";\n\nexport type PaymentCardType = \"_credit\" | \"_debit\";\n\nexport type LocationType = \"_store\" | \"_warehouse\";\n\nexport type RevRecScheduleRecogIntervalSrc =\n  | \"_revRecDatesSpecifiedOnTransaction\"\n  | \"_billingScheduleTranDateOnSalesOrder\"\n  | \"_billingScheduleRevRecDateOnSalesOrder\"\n  | \"_revRecDatesSpecifiedOnSalesOrder\";\n\nexport type AccountType =\n  | \"_accountsPayable\"\n  | \"_accountsReceivable\"\n  | \"_bank\"\n  | \"_costOfGoodsSold\"\n  | \"_creditCard\"\n  | \"_deferredExpense\"\n  | \"_deferredRevenue\"\n  | \"_equity\"\n  | \"_expense\"\n  | \"_fixedAsset\"\n  | \"_income\"\n  | \"_longTermLiability\"\n  | \"_nonPosting\"\n  | \"_otherAsset\"\n  | \"_otherCurrentAsset\"\n  | \"_otherCurrentLiability\"\n  | \"_otherExpense\"\n  | \"_otherIncome\"\n  | \"_statistical\"\n  | \"_unbilledReceivable\";\n\nexport type RevRecScheduleAmortizationStatus =\n  | \"_notStarted\"\n  | \"_inProgress\"\n  | \"_completed\"\n  | \"_onHold\";\n\nexport type ItemSupplyType = \"_build\" | \"_purchase\" | \"_transfer\";\n\nexport type ItemOverallQuantityPricingType =\n  | \"_byLineQuantity\"\n  | \"_byOverallItemQuantity\"\n  | \"_byOverallParentQuantity\"\n  | \"_byOverallScheduleQuantity\";\n\nexport type InventoryItemFraudRisk = \"_high\" | \"_low\" | \"_medium\";\n\nexport type CurrencyLocale =\n  | \"_afghanistanPashto\"\n  | \"_afghanistanPersian\"\n  | \"_alandIslandsSwedish\"\n  | \"_albaniaAlbanian\"\n  | \"_algeriaArabic\"\n  | \"_angolaPortuguese\"\n  | \"_anguillaEnglish\"\n  | \"_antiguaAndBarbudaEnglish\"\n  | \"_argentinaSpanish\"\n  | \"_armeniaArmenian\"\n  | \"_arubaEnglish\"\n  | \"_arubaPortuguese\"\n  | \"_australiaEnglish\"\n  | \"_austriaGerman\"\n  | \"_azerbaijanAzerbaijani\"\n  | \"_bahamasEnglish\"\n  | \"_bahrainArabic\"\n  | \"_barbadosEnglish\"\n  | \"_belarusByelorussian\"\n  | \"_belgiumDutch\"\n  | \"_belgiumFrench\"\n  | \"_belizeEnglish\"\n  | \"_bengali\"\n  | \"_beninFrench\"\n  | \"_bermudaEnglish\"\n  | \"_bhutanDzongkha\"\n  | \"_boliviaSpanish\"\n  | \"_bonaireSaintEustatiusAndSabaDutch\"\n  | \"_bosniaAndHerzegovinaBosnian\"\n  | \"_botswanaEnglish\"\n  | \"_brazilPortuguese\"\n  | \"_bruneiMalay\"\n  | \"_bulgariaBulgarian\"\n  | \"_burkinaFasoFrench\"\n  | \"_burundiFrench\"\n  | \"_cambodiaKhmer\"\n  | \"_cameroonFrench\"\n  | \"_canadaEnglish\"\n  | \"_canadaFrench\"\n  | \"_canaryIslandsSpanish\"\n  | \"_capeVerdePortuguese\"\n  | \"_caymanIslandsEnglish\"\n  | \"_centralAfricanRepublicFrench\"\n  | \"_ceutaAndMelillaSpanish\"\n  | \"_chadFrench\"\n  | \"_chileSpanish\"\n  | \"_chinaChinese\"\n  | \"_colombiaSpanish\"\n  | \"_comorosFrench\"\n  | \"_congoDemocraticRepublicEnglish\"\n  | \"_congoDemocraticRepublicFrench\"\n  | \"_congoRepublicOfFrench\"\n  | \"_costaRicaSpanish\"\n  | \"_coteDivoireFrench\"\n  | \"_croatiaCroatian\"\n  | \"_cubaSpanish\"\n  | \"_curacaoDutch\"\n  | \"_cyprusEnglish\"\n  | \"_cyprusEnglishEuro\"\n  | \"_czechRepublicCzech\"\n  | \"_denmarkDanish\"\n  | \"_djiboutiArabic\"\n  | \"_djiboutiFrench\"\n  | \"_dominicaEnglish\"\n  | \"_dominicanRepublicSpanish\"\n  | \"_ecuadorSpanish\"\n  | \"_egyptArabic\"\n  | \"_elSalvadorSpanish\"\n  | \"_equatorialGuineaSpanish\"\n  | \"_eritreaAfar\"\n  | \"_estoniaEstonian\"\n  | \"_ethiopiaAmharic\"\n  | \"_falklandIslandsEnglish\"\n  | \"_fijiFijian\"\n  | \"_finlandFinnish\"\n  | \"_finlandFinnishEuro\"\n  | \"_franceFrench\"\n  | \"_franceFrenchEuro\"\n  | \"_frenchPolynesiaFrench\"\n  | \"_gabonFrench\"\n  | \"_gambiaEnglish\"\n  | \"_georgiaGeorgian\"\n  | \"_germanyGerman\"\n  | \"_germanyGermanEuro\"\n  | \"_ghanaEnglish\"\n  | \"_gibraltarEnglish\"\n  | \"_goldOunce\"\n  | \"_greeceGreek\"\n  | \"_grenadaEnglish\"\n  | \"_guatemalaSpanish\"\n  | \"_guineaBissauPortuguese\"\n  | \"_guineaFrench\"\n  | \"_guyanaEnglish\"\n  | \"_haitian\"\n  | \"_hondurasSpanish\"\n  | \"_hongKongChinese\"\n  | \"_hungaryHungarian\"\n  | \"_icelandIcelandic\"\n  | \"_indiaEnglish\"\n  | \"_indiaGujarati\"\n  | \"_indiaHindi\"\n  | \"_indiaKannada\"\n  | \"_indiaMarathi\"\n  | \"_indiaPanjabi\"\n  | \"_indiaTamil\"\n  | \"_indiaTelugu\"\n  | \"_indonesiaIndonesian\"\n  | \"_iranPersian\"\n  | \"_iraqArabic\"\n  | \"_irelandEnglish\"\n  | \"_israelHebrew\"\n  | \"_italyItalian\"\n  | \"_italyItalianEuro\"\n  | \"_jamaicaEnglish\"\n  | \"_japanJapanese\"\n  | \"_jordanArabic\"\n  | \"_jordanEnglish\"\n  | \"_kazakhstanRussian\"\n  | \"_kenyaEnglish\"\n  | \"_kuwaitArabic\"\n  | \"_kuwaitEnglish\"\n  | \"_kyrgyzstanRussian\"\n  | \"_laosLao\"\n  | \"_latviaLatvianLettish\"\n  | \"_lebanonArabic\"\n  | \"_lesothoEnglish\"\n  | \"_liberiaEnglish\"\n  | \"_libyaArabic\"\n  | \"_lithuaniaLithuanian\"\n  | \"_luxembourgFrench\"\n  | \"_luxembourgGerman\"\n  | \"_luxembourgLuxembourgish\"\n  | \"_macauChinese\"\n  | \"_macedoniaMacedonian\"\n  | \"_malawiEnglish\"\n  | \"_malaysiaMalay\"\n  | \"_maldivesDhivehi\"\n  | \"_maliFrench\"\n  | \"_mauritiusEnglish\"\n  | \"_mexicoSpanish\"\n  | \"_moldovaRomanian\"\n  | \"_moldovaRussian\"\n  | \"_mongoliaMongolian\"\n  | \"_moroccoArabic\"\n  | \"_mozambiquePortuguese\"\n  | \"_myanmarBurmese\"\n  | \"_namibiaEnglish\"\n  | \"_nepalNepali\"\n  | \"_netherlandsAntillesDutch\"\n  | \"_netherlandsDutch\"\n  | \"_netherlandsDutchEuro\"\n  | \"_newCaledoniaFrench\"\n  | \"_newZealandEnglish\"\n  | \"_nicaraguaSpanish\"\n  | \"_nigerFrench\"\n  | \"_nigeriaEnglish\"\n  | \"_northKoreaKorean\"\n  | \"_norwayNorwegian\"\n  | \"_omanArabic\"\n  | \"_pakistanUrdu\"\n  | \"_palladiumOunce\"\n  | \"_panamaSpanish\"\n  | \"_papuaNewGuineaEnglish\"\n  | \"_paraguaySpanish\"\n  | \"_peruSpanish\"\n  | \"_philippinesEnglish\"\n  | \"_philippinesTagalog\"\n  | \"_platinumOunce\"\n  | \"_polandPolish\"\n  | \"_portugalPortuguese\"\n  | \"_portugalPortugueseEuro\"\n  | \"_puertoRicoSpanish\"\n  | \"_qatarArabic\"\n  | \"_qatarEnglish\"\n  | \"_romaniaRomanian\"\n  | \"_russiaRussian\"\n  | \"_rwandaFrench\"\n  | \"_saintBarthelemyFrench\"\n  | \"_saintHelenaEnglish\"\n  | \"_saintKittsAndNevisEnglish\"\n  | \"_saintLuciaEnglish\"\n  | \"_saintMartinEnglish\"\n  | \"_saintVincentAndTheGrenadinesEnglish\"\n  | \"_samoaSamoan\"\n  | \"_saoTomeAndPrincipePortuguese\"\n  | \"_saudiArabiaArabic\"\n  | \"_senegalFrench\"\n  | \"_serbiaAndMontenegroSerbian\"\n  | \"_serbiaSerbian\"\n  | \"_serbiaSerboCroatian\"\n  | \"_seychellesEnglish\"\n  | \"_seychellesFrench\"\n  | \"_sierraLeoneEnglish\"\n  | \"_silverOunce\"\n  | \"_singaporeEnglish\"\n  | \"_sintMaartenDutch\"\n  | \"_slovakiaSlovak\"\n  | \"_slovakiaSlovakEuro\"\n  | \"_sloveniaSlovenian\"\n  | \"_sloveniaSlovenianEuro\"\n  | \"_solomonIslandsEnglish\"\n  | \"_somaliaSomali\"\n  | \"_southAfricaAfrikaans\"\n  | \"_southAfricaEnglish\"\n  | \"_southKoreaKorean\"\n  | \"_southSudanEnglish\"\n  | \"_spainCatalan\"\n  | \"_spainSpanish\"\n  | \"_spainSpanishEuro\"\n  | \"_sriLankaSinhalese\"\n  | \"_sudanArabic\"\n  | \"_surinameDutch\"\n  | \"_swazilandSwati\"\n  | \"_swedenSwedish\"\n  | \"_switzerlandFrench\"\n  | \"_switzerlandGerman\"\n  | \"_switzerlandItalian\"\n  | \"_syriaArabic\"\n  | \"_taiwanChinese\"\n  | \"_tajikistanTajik\"\n  | \"_tanzaniaEnglish\"\n  | \"_thailandThai\"\n  | \"_togoFrench\"\n  | \"_tongaTonga\"\n  | \"_trinidadAndTobagoEnglish\"\n  | \"_tunisiaArabic\"\n  | \"_turkeyTurkish\"\n  | \"_turkmenistanTurkmen\"\n  | \"_turksAndCaicosIslandsEnglish\"\n  | \"_ugandaEnglish\"\n  | \"_ukraineUkrainian\"\n  | \"_unitedArabEmiratesArabic\"\n  | \"_unitedArabEmiratesEnglish\"\n  | \"_unitedKingdomEnglish\"\n  | \"_unitedStatesEnglish\"\n  | \"_uruguaySpanish\"\n  | \"_uzbekistanUzbek\"\n  | \"_vanuatuEnglish\"\n  | \"_vanuatuFrench\"\n  | \"_venezuelaSpanish\"\n  | \"_vietnamVietnamese\"\n  | \"_wallisAndFutunaFrench\"\n  | \"_yemenArabic\"\n  | \"_zambiaEnglish\";\n"]}