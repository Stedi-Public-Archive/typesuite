"use strict";
var com_netsuite_webservices_lists_supplychain_2019_2_types_Module_Factory = function () {
    var com_netsuite_webservices_lists_supplychain_2019_2_types = {
        name: 'com_netsuite_webservices_lists_supplychain_2019_2_types',
        typeInfos: [{
                type: 'enumInfo',
                localName: 'ManufacturingOperationTaskPredecessorPredecessorType',
                values: ['_finishToFinish', '_finishToStart', '_startToFinish', '_startToStart']
            }, {
                type: 'enumInfo',
                localName: 'ManufacturingLagType',
                values: ['_quantity', '_quantityPercentage', '_time', '_timePercentage']
            }, {
                type: 'enumInfo',
                localName: 'ManufacturingOperationTaskStatus',
                values: ['_completed', '_inProgress', '_notStarted']
            }],
        elementInfos: []
    };
    return {
        com_netsuite_webservices_lists_supplychain_2019_2_types: com_netsuite_webservices_lists_supplychain_2019_2_types
    };
};
if (typeof define === 'function' && define.amd) {
    define([], com_netsuite_webservices_lists_supplychain_2019_2_types_Module_Factory);
}
else {
    var com_netsuite_webservices_lists_supplychain_2019_2_types_Module = com_netsuite_webservices_lists_supplychain_2019_2_types_Module_Factory();
    if (typeof module !== 'undefined' && module.exports) {
        module.exports.com_netsuite_webservices_lists_supplychain_2019_2_types = com_netsuite_webservices_lists_supplychain_2019_2_types_Module.com_netsuite_webservices_lists_supplychain_2019_2_types;
    }
    else {
        var com_netsuite_webservices_lists_supplychain_2019_2_types = com_netsuite_webservices_lists_supplychain_2019_2_types_Module.com_netsuite_webservices_lists_supplychain_2019_2_types;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tX25ldHN1aXRlX3dlYnNlcnZpY2VzX2xpc3RzX3N1cHBseWNoYWluXzIwMTlfMl90eXBlcy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9uZXRzdWl0ZV93ZWJzZXJ2aWNlcy8yMDE5XzIvX19tYXBwaW5ncy9jb21fbmV0c3VpdGVfd2Vic2VydmljZXNfbGlzdHNfc3VwcGx5Y2hhaW5fMjAxOV8yX3R5cGVzLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxJQUFJLHNFQUFzRSxHQUFHO0lBQzNFLElBQUksdURBQXVELEdBQUc7UUFDNUQsSUFBSSxFQUFFLHlEQUF5RDtRQUMvRCxTQUFTLEVBQUUsQ0FBQztnQkFDUixJQUFJLEVBQUUsVUFBVTtnQkFDaEIsU0FBUyxFQUFFLHNEQUFzRDtnQkFDakUsTUFBTSxFQUFFLENBQUMsaUJBQWlCLEVBQUUsZ0JBQWdCLEVBQUUsZ0JBQWdCLEVBQUUsZUFBZSxDQUFDO2FBQ2pGLEVBQUU7Z0JBQ0QsSUFBSSxFQUFFLFVBQVU7Z0JBQ2hCLFNBQVMsRUFBRSxzQkFBc0I7Z0JBQ2pDLE1BQU0sRUFBRSxDQUFDLFdBQVcsRUFBRSxxQkFBcUIsRUFBRSxPQUFPLEVBQUUsaUJBQWlCLENBQUM7YUFDekUsRUFBRTtnQkFDRCxJQUFJLEVBQUUsVUFBVTtnQkFDaEIsU0FBUyxFQUFFLGtDQUFrQztnQkFDN0MsTUFBTSxFQUFFLENBQUMsWUFBWSxFQUFFLGFBQWEsRUFBRSxhQUFhLENBQUM7YUFDckQsQ0FBQztRQUNKLFlBQVksRUFBRSxFQUFFO0tBQ2pCLENBQUM7SUFDRixPQUFPO1FBQ0wsdURBQXVELEVBQUUsdURBQXVEO0tBQ2pILENBQUM7QUFDSixDQUFDLENBQUM7QUFDRixJQUFJLE9BQU8sTUFBTSxLQUFLLFVBQVUsSUFBSSxNQUFNLENBQUMsR0FBRyxFQUFFO0lBQzlDLE1BQU0sQ0FBQyxFQUFFLEVBQUUsc0VBQXNFLENBQUMsQ0FBQztDQUNwRjtLQUNJO0lBQ0gsSUFBSSw4REFBOEQsR0FBRyxzRUFBc0UsRUFBRSxDQUFDO0lBQzlJLElBQUksT0FBTyxNQUFNLEtBQUssV0FBVyxJQUFJLE1BQU0sQ0FBQyxPQUFPLEVBQUU7UUFDbkQsTUFBTSxDQUFDLE9BQU8sQ0FBQyx1REFBdUQsR0FBRyw4REFBOEQsQ0FBQyx1REFBdUQsQ0FBQztLQUNqTTtTQUNJO1FBQ0gsSUFBSSx1REFBdUQsR0FBRyw4REFBOEQsQ0FBQyx1REFBdUQsQ0FBQztLQUN0TDtDQUNGIiwic291cmNlc0NvbnRlbnQiOlsidmFyIGNvbV9uZXRzdWl0ZV93ZWJzZXJ2aWNlc19saXN0c19zdXBwbHljaGFpbl8yMDE5XzJfdHlwZXNfTW9kdWxlX0ZhY3RvcnkgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBjb21fbmV0c3VpdGVfd2Vic2VydmljZXNfbGlzdHNfc3VwcGx5Y2hhaW5fMjAxOV8yX3R5cGVzID0ge1xuICAgIG5hbWU6ICdjb21fbmV0c3VpdGVfd2Vic2VydmljZXNfbGlzdHNfc3VwcGx5Y2hhaW5fMjAxOV8yX3R5cGVzJyxcbiAgICB0eXBlSW5mb3M6IFt7XG4gICAgICAgIHR5cGU6ICdlbnVtSW5mbycsXG4gICAgICAgIGxvY2FsTmFtZTogJ01hbnVmYWN0dXJpbmdPcGVyYXRpb25UYXNrUHJlZGVjZXNzb3JQcmVkZWNlc3NvclR5cGUnLFxuICAgICAgICB2YWx1ZXM6IFsnX2ZpbmlzaFRvRmluaXNoJywgJ19maW5pc2hUb1N0YXJ0JywgJ19zdGFydFRvRmluaXNoJywgJ19zdGFydFRvU3RhcnQnXVxuICAgICAgfSwge1xuICAgICAgICB0eXBlOiAnZW51bUluZm8nLFxuICAgICAgICBsb2NhbE5hbWU6ICdNYW51ZmFjdHVyaW5nTGFnVHlwZScsXG4gICAgICAgIHZhbHVlczogWydfcXVhbnRpdHknLCAnX3F1YW50aXR5UGVyY2VudGFnZScsICdfdGltZScsICdfdGltZVBlcmNlbnRhZ2UnXVxuICAgICAgfSwge1xuICAgICAgICB0eXBlOiAnZW51bUluZm8nLFxuICAgICAgICBsb2NhbE5hbWU6ICdNYW51ZmFjdHVyaW5nT3BlcmF0aW9uVGFza1N0YXR1cycsXG4gICAgICAgIHZhbHVlczogWydfY29tcGxldGVkJywgJ19pblByb2dyZXNzJywgJ19ub3RTdGFydGVkJ11cbiAgICAgIH1dLFxuICAgIGVsZW1lbnRJbmZvczogW11cbiAgfTtcbiAgcmV0dXJuIHtcbiAgICBjb21fbmV0c3VpdGVfd2Vic2VydmljZXNfbGlzdHNfc3VwcGx5Y2hhaW5fMjAxOV8yX3R5cGVzOiBjb21fbmV0c3VpdGVfd2Vic2VydmljZXNfbGlzdHNfc3VwcGx5Y2hhaW5fMjAxOV8yX3R5cGVzXG4gIH07XG59O1xuaWYgKHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCkge1xuICBkZWZpbmUoW10sIGNvbV9uZXRzdWl0ZV93ZWJzZXJ2aWNlc19saXN0c19zdXBwbHljaGFpbl8yMDE5XzJfdHlwZXNfTW9kdWxlX0ZhY3RvcnkpO1xufVxuZWxzZSB7XG4gIHZhciBjb21fbmV0c3VpdGVfd2Vic2VydmljZXNfbGlzdHNfc3VwcGx5Y2hhaW5fMjAxOV8yX3R5cGVzX01vZHVsZSA9IGNvbV9uZXRzdWl0ZV93ZWJzZXJ2aWNlc19saXN0c19zdXBwbHljaGFpbl8yMDE5XzJfdHlwZXNfTW9kdWxlX0ZhY3RvcnkoKTtcbiAgaWYgKHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnICYmIG1vZHVsZS5leHBvcnRzKSB7XG4gICAgbW9kdWxlLmV4cG9ydHMuY29tX25ldHN1aXRlX3dlYnNlcnZpY2VzX2xpc3RzX3N1cHBseWNoYWluXzIwMTlfMl90eXBlcyA9IGNvbV9uZXRzdWl0ZV93ZWJzZXJ2aWNlc19saXN0c19zdXBwbHljaGFpbl8yMDE5XzJfdHlwZXNfTW9kdWxlLmNvbV9uZXRzdWl0ZV93ZWJzZXJ2aWNlc19saXN0c19zdXBwbHljaGFpbl8yMDE5XzJfdHlwZXM7XG4gIH1cbiAgZWxzZSB7XG4gICAgdmFyIGNvbV9uZXRzdWl0ZV93ZWJzZXJ2aWNlc19saXN0c19zdXBwbHljaGFpbl8yMDE5XzJfdHlwZXMgPSBjb21fbmV0c3VpdGVfd2Vic2VydmljZXNfbGlzdHNfc3VwcGx5Y2hhaW5fMjAxOV8yX3R5cGVzX01vZHVsZS5jb21fbmV0c3VpdGVfd2Vic2VydmljZXNfbGlzdHNfc3VwcGx5Y2hhaW5fMjAxOV8yX3R5cGVzO1xuICB9XG59Il19